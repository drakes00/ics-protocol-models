Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
{7}let pkD: bitstring = pub(skD) in
{8}out(c, pkD);
{9}!
{10}new ch: channel;
(
    {11}in(c, (Cli: host,Sess: host));
    {12}if ((Cli = C) || ((Cli = D) || ((Sess = A) || (Sess = B)))) then
        0
    else
        {13}new K: bitstring;
        {14}out(ch, (Cli,Sess,K));
        {15}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
        {16}let pkCli: bitstring = pub(skCli) in
        {17}let skSess: bitstring = (if (Sess = C) then skC else (if (Sess = D) then skD else sk(Sess))) in
        {18}let pkSess: bitstring = pub(skSess) in
        {19}let tmp: bitstring = (if ((Sess <> C) && (Sess <> D)) then K else CreateSessionRequest) in
        {20}out(c, tmp);
        {21}new Nc: bitstring;
        {22}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
        {23}out(c, m1);
        {24}in(c, m2: bitstring);
        {25}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {26}event beginCliPass(Cli,Sess,(Login(pkCli),Passwd(skCli,pkSess)));
        {27}event beginCliNonce(Cli,Sess,Ns);
        {28}let m3: bitstring = (ActivateSessionRequest,pkCli,Ns,Login(pkCli),Passwd(skCli,pkSess)) in
        {29}out(c, m3);
        {30}in(c, m4: bitstring);
        {31}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
        {32}if ((Sess = C) || (Sess = C)) then
        {33}event endCliNonce(Sess,Cli,Nc)
) | (
    {34}in(ch, (Cli_103: host,Sess_104: host,K_105: bitstring));
    {35}if ((Cli_103 = C) || ((Cli_103 = D) || ((Sess_104 = A) || (Sess_104 = B)))) then
        0
    else
        {36}let skCli_106: bitstring = (if (Cli_103 = A) then skA else (if (Cli_103 = B) then skB else sk(Cli_103))) in
        {37}let pkCli_107: bitstring = pub(skCli_106) in
        {38}let skSess_108: bitstring = (if (Sess_104 = C) then skC else (if (Sess_104 = D) then skD else fail-any)) in
        {39}let pkSess_109: bitstring = pub(skSess_108) in
        {40}let tmp_110: bitstring = (if ((Cli_103 <> A) && (Cli_103 <> B)) then K_105 else CreateSessionRequest) in
        {41}out(c, tmp_110);
        {42}in(c, m1_111: bitstring);
        {43}let (=CreateSessionRequest,=pkCli_107,Nc_112: bitstring) = m1_111 in
        {44}new Ns_113: bitstring;
        {45}event beginSrvNonce(Sess_104,Cli_103,Nc_112);
        {46}let m2_114: bitstring = (CreateSessionResponse,pkSess_109,Nc_112,Ns_113) in
        {47}out(c, m2_114);
        {48}in(c, m3_115: bitstring);
        {49}let (=ActivateSessionRequest,=pkCli_107,=Ns_113,login: bitstring,passwd: bitstring) = m3_115 in
        {50}if (verifyCreds(skSess_108,login,passwd) <> true) then
            0
        else
            {51}new Ns2_116: bitstring;
            {52}let m4_117: bitstring = (ActivateSessionResponse,Ns2_116) in
            {53}out(c, m4_117);
            {54}if ((Cli_103 = A) || (Cli_103 = B)) then
            {55}event endSrvPass(Cli_103,Sess_104,(login,passwd));
            {56}event endSrvNonce(Cli_103,Sess_104,Ns_113)
)

-- Query event(endCliNonce(X,Y,N)) ==> event(beginSrvNonce(X,Y,N))
Completing...
200 rules inserted. The rule base contains 88 rules. 12 rules in the queue.
Starting query event(endCliNonce(X,Y,N)) ==> event(beginSrvNonce(X,Y,N))
goal reachable: end(endCliNonce(C[],B[],Nc[Sess = C[],Cli = B[],!1 = @sid_7046]))
Abbreviations:
Nc_7071 = Nc[Sess = C[],Cli = B[],!1 = @sid_7066]

1. The attacker initially knows C[].
attacker(C[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know C[].
Using the function 2-tuple the attacker may obtain (B[],C[]).
attacker((B[],C[])).

4. The attacker has some term Ns_7067.
attacker(Ns_7067).

5. The message (B[],C[]) that the attacker may have by 3 may be received at input {11}.
So the message (CreateSessionRequest,pub(skB[]),Nc_7071) may be sent to the attacker at output {23}.
attacker((CreateSessionRequest,pub(skB[]),Nc_7071)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_7071).
Using the function 3-proj-3-tuple the attacker may obtain Nc_7071.
attacker(Nc_7071).

7. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skC[]).
By 6, the attacker may know Nc_7071.
By 4, the attacker may know Ns_7067.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skC[]),Nc_7071,Ns_7067).
attacker((CreateSessionResponse,pub(skC[]),Nc_7071,Ns_7067)).

10. The attacker has some term Ns2_7065.
attacker(Ns2_7065).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_7065.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_7065).
attacker((ActivateSessionResponse,Ns2_7065)).

13. The message (B[],C[]) that the attacker may have by 3 may be received at input {11}.
The message (CreateSessionResponse,pub(skC[]),Nc_7071,Ns_7067) that the attacker may have by 9 may be received at input {24}.
The message (ActivateSessionResponse,Ns2_7065) that the attacker may have by 12 may be received at input {30}.
So event endCliNonce(C[],B[],Nc_7071) may be executed at {33}.
end(endCliNonce(C[],B[],Nc_7071)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

out(c, pub(skD)) at {8}

new ch creating ch_7221 at {10} in copy a

in(c, (B,C)) at {11} in copy a

new K creating K_7257 at {13} in copy a

out(ch_7221, (B,C,K_7257)) at {14} in copy a received at {34} in copy a

out(c, CreateSessionRequest) at {41} in copy a

out(c, CreateSessionRequest) at {20} in copy a

new Nc creating Nc_7074 at {21} in copy a

out(c, (CreateSessionRequest,pub(skB),Nc_7074)) at {23} in copy a

in(c, (CreateSessionResponse,pub(skC),Nc_7074,a_7073)) at {24} in copy a

event(beginCliPass(B,C,(Login(pub(skB)),Passwd(skB,pub(skC))))) at {26} in copy a

event(beginCliNonce(B,C,a_7073)) at {27} in copy a

out(c, (ActivateSessionRequest,pub(skB),a_7073,Login(pub(skB)),Passwd(skB,pub(skC)))) at {29} in copy a

in(c, (ActivateSessionResponse,a_7072)) at {30} in copy a

event(endCliNonce(C,B,Nc_7074)) at {33} in copy a

The event endCliNonce(C,B,Nc_7074) is executed.
A trace has been found.
RESULT event(endCliNonce(X,Y,N)) ==> event(beginSrvNonce(X,Y,N)) is false.
-- Query event(endSrvNonce(X_7472,Y_7473,N_7474)) ==> event(beginCliNonce(X_7472,Y_7473,N_7474))
Completing...
200 rules inserted. The rule base contains 91 rules. 18 rules in the queue.
400 rules inserted. The rule base contains 119 rules. 30 rules in the queue.
Starting query event(endSrvNonce(X_7472,Y_7473,N_7474)) ==> event(beginCliNonce(X_7472,Y_7473,N_7474))
goal reachable: attacker(Nc_14788) -> end(endSrvNonce(B[],D[],Ns_113[m1_111 = (CreateSessionRequest,pub(skB[]),Nc_14788),K_105 = K[Sess = D[],Cli = B[],!1 = @sid_14789],Sess_104 = D[],Cli_103 = B[],!1 = @sid_14789]))
Abbreviations:
K_14838 = K[Sess = D[],Cli = B[],!1 = @sid_14833]
Ns_14839 = Ns_113[m1_111 = (CreateSessionRequest,pub(skB[]),Nc_14831),K_105 = K_14838,Sess_104 = D[],Cli_103 = B[],!1 = @sid_14833]
ch_14840 = ch[!1 = @sid_14833]

1. The attacker initially knows D[].
attacker(D[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know D[].
Using the function 2-tuple the attacker may obtain (B[],D[]).
attacker((B[],D[])).

4. The message (B[],D[]) that the attacker may have by 3 may be received at input {11}.
We have D[] <> B[] & D[] <> A[] & B[] <> D[] & B[] <> C[].
So the message (B[],D[],K_14838) may be sent on channel ch_14840 at output {14}.
mess(ch_14840,(B[],D[],K_14838)).

5. We assume as hypothesis that
attacker(Nc_14831).

6. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

7. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

8. By 7, the attacker may know CreateSessionRequest.
By 6, the attacker may know pub(skB[]).
By 5, the attacker may know Nc_14831.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_14831).
attacker((CreateSessionRequest,pub(skB[]),Nc_14831)).

9. The message pub(skD[]) may be sent to the attacker at output {8}.
attacker(pub(skD[])).

10. The attacker has some term y_14834.
attacker(y_14834).

11. By 10, the attacker may know y_14834.
By 9, the attacker may know pub(skD[]).
Using the function Passwd the attacker may obtain Passwd(y_14834,pub(skD[])).
attacker(Passwd(y_14834,pub(skD[]))).

12. By 10, the attacker may know y_14834.
Using the function pub the attacker may obtain pub(y_14834).
attacker(pub(y_14834)).

13. By 12, the attacker may know pub(y_14834).
Using the function Login the attacker may obtain Login(pub(y_14834)).
attacker(Login(pub(y_14834))).

14. The message (B[],D[],K_14838) that may be sent on channel ch_14840 by 4 may be received at input {34}.
The message (CreateSessionRequest,pub(skB[]),Nc_14831) that the attacker may have by 8 may be received at input {42}.
So the message (CreateSessionResponse,pub(skD[]),Nc_14831,Ns_14839) may be sent to the attacker at output {47}.
attacker((CreateSessionResponse,pub(skD[]),Nc_14831,Ns_14839)).

15. By 14, the attacker may know (CreateSessionResponse,pub(skD[]),Nc_14831,Ns_14839).
Using the function 4-proj-4-tuple the attacker may obtain Ns_14839.
attacker(Ns_14839).

16. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

17. By 16, the attacker may know ActivateSessionRequest.
By 6, the attacker may know pub(skB[]).
By 15, the attacker may know Ns_14839.
By 13, the attacker may know Login(pub(y_14834)).
By 11, the attacker may know Passwd(y_14834,pub(skD[])).
Using the function 5-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Ns_14839,Login(pub(y_14834)),Passwd(y_14834,pub(skD[]))).
attacker((ActivateSessionRequest,pub(skB[]),Ns_14839,Login(pub(y_14834)),Passwd(y_14834,pub(skD[])))).

18. The message (B[],D[],K_14838) that may be sent on channel ch_14840 by 4 may be received at input {34}.
The message (CreateSessionRequest,pub(skB[]),Nc_14831) that the attacker may have by 8 may be received at input {42}.
The message (ActivateSessionRequest,pub(skB[]),Ns_14839,Login(pub(y_14834)),Passwd(y_14834,pub(skD[]))) that the attacker may have by 17 may be received at input {48}.
So event endSrvNonce(B[],D[],Ns_14839) may be executed at {56}.
end(endSrvNonce(B[],D[],Ns_14839)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

out(c, pub(skD)) at {8}

new ch creating ch_14846 at {10} in copy a_14842

in(c, (B,D)) at {11} in copy a_14842

new K creating K_14844 at {13} in copy a_14842

out(ch_14846, (B,D,K_14844)) at {14} in copy a_14842 received at {34} in copy a_14842

out(c, CreateSessionRequest) at {41} in copy a_14842

out(c, CreateSessionRequest) at {20} in copy a_14842

new Nc creating Nc_15215 at {21} in copy a_14842

out(c, (CreateSessionRequest,pub(skB),Nc_15215)) at {23} in copy a_14842

in(c, (CreateSessionRequest,pub(skB),a_14841)) at {42} in copy a_14842

new Ns_113 creating Ns_14845 at {44} in copy a_14842

event(beginSrvNonce(D,B,a_14841)) at {45} in copy a_14842

out(c, (CreateSessionResponse,pub(skD),a_14841,Ns_14845)) at {47} in copy a_14842

in(c, (ActivateSessionRequest,pub(skB),Ns_14845,Login(pub(a_14843)),Passwd(a_14843,pub(skD)))) at {48} in copy a_14842

new Ns2_116 creating Ns2_15254 at {51} in copy a_14842

out(c, (ActivateSessionResponse,Ns2_15254)) at {53} in copy a_14842

event(endSrvPass(B,D,(Login(pub(a_14843)),Passwd(a_14843,pub(skD))))) at {55} in copy a_14842

event(endSrvNonce(B,D,Ns_14845)) at {56} in copy a_14842

The event endSrvNonce(B,D,Ns_14845) is executed.
A trace has been found.
RESULT event(endSrvNonce(X_7472,Y_7473,N_7474)) ==> event(beginCliNonce(X_7472,Y_7473,N_7474)) is false.
-- Query event(endSrvPass(X_15262,Y_15263,N_15264)) ==> event(beginCliPass(X_15262,Y_15263,N_15264))
Completing...
200 rules inserted. The rule base contains 91 rules. 18 rules in the queue.
400 rules inserted. The rule base contains 123 rules. 30 rules in the queue.
Starting query event(endSrvPass(X_15262,Y_15263,N_15264)) ==> event(beginCliPass(X_15262,Y_15263,N_15264))
goal reachable: attacker(y_21658) -> end(endSrvPass(B[],D[],(Login(pub(y_21658)),Passwd(y_21658,pub(skD[])))))
Abbreviations:
K_21704 = K[Sess = D[],Cli = B[],!1 = @sid_21699]
Ns_21705 = Ns_113[m1_111 = (CreateSessionRequest,pub(skB[]),Nc_21697),K_105 = K_21704,Sess_104 = D[],Cli_103 = B[],!1 = @sid_21699]
ch_21706 = ch[!1 = @sid_21699]

1. The attacker initially knows D[].
attacker(D[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know D[].
Using the function 2-tuple the attacker may obtain (B[],D[]).
attacker((B[],D[])).

4. The message (B[],D[]) that the attacker may have by 3 may be received at input {11}.
We have D[] <> B[] & D[] <> A[] & B[] <> D[] & B[] <> C[].
So the message (B[],D[],K_21704) may be sent on channel ch_21706 at output {14}.
mess(ch_21706,(B[],D[],K_21704)).

5. The attacker has some term Nc_21697.
attacker(Nc_21697).

6. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

7. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

8. By 7, the attacker may know CreateSessionRequest.
By 6, the attacker may know pub(skB[]).
By 5, the attacker may know Nc_21697.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_21697).
attacker((CreateSessionRequest,pub(skB[]),Nc_21697)).

9. The message pub(skD[]) may be sent to the attacker at output {8}.
attacker(pub(skD[])).

10. We assume as hypothesis that
attacker(y_21700).

11. By 10, the attacker may know y_21700.
By 9, the attacker may know pub(skD[]).
Using the function Passwd the attacker may obtain Passwd(y_21700,pub(skD[])).
attacker(Passwd(y_21700,pub(skD[]))).

12. By 10, the attacker may know y_21700.
Using the function pub the attacker may obtain pub(y_21700).
attacker(pub(y_21700)).

13. By 12, the attacker may know pub(y_21700).
Using the function Login the attacker may obtain Login(pub(y_21700)).
attacker(Login(pub(y_21700))).

14. The message (B[],D[],K_21704) that may be sent on channel ch_21706 by 4 may be received at input {34}.
The message (CreateSessionRequest,pub(skB[]),Nc_21697) that the attacker may have by 8 may be received at input {42}.
So the message (CreateSessionResponse,pub(skD[]),Nc_21697,Ns_21705) may be sent to the attacker at output {47}.
attacker((CreateSessionResponse,pub(skD[]),Nc_21697,Ns_21705)).

15. By 14, the attacker may know (CreateSessionResponse,pub(skD[]),Nc_21697,Ns_21705).
Using the function 4-proj-4-tuple the attacker may obtain Ns_21705.
attacker(Ns_21705).

16. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

17. By 16, the attacker may know ActivateSessionRequest.
By 6, the attacker may know pub(skB[]).
By 15, the attacker may know Ns_21705.
By 13, the attacker may know Login(pub(y_21700)).
By 11, the attacker may know Passwd(y_21700,pub(skD[])).
Using the function 5-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Ns_21705,Login(pub(y_21700)),Passwd(y_21700,pub(skD[]))).
attacker((ActivateSessionRequest,pub(skB[]),Ns_21705,Login(pub(y_21700)),Passwd(y_21700,pub(skD[])))).

18. The message (B[],D[],K_21704) that may be sent on channel ch_21706 by 4 may be received at input {34}.
The message (CreateSessionRequest,pub(skB[]),Nc_21697) that the attacker may have by 8 may be received at input {42}.
The message (ActivateSessionRequest,pub(skB[]),Ns_21705,Login(pub(y_21700)),Passwd(y_21700,pub(skD[]))) that the attacker may have by 17 may be received at input {48}.
So event endSrvPass(B[],D[],(Login(pub(y_21700)),Passwd(y_21700,pub(skD[])))) may be executed at {55}.
end(endSrvPass(B[],D[],(Login(pub(y_21700)),Passwd(y_21700,pub(skD[]))))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

out(c, pub(skD)) at {8}

new ch creating ch_21712 at {10} in copy a_21709

in(c, (B,D)) at {11} in copy a_21709

new K creating K_21710 at {13} in copy a_21709

out(ch_21712, (B,D,K_21710)) at {14} in copy a_21709 received at {34} in copy a_21709

out(c, CreateSessionRequest) at {41} in copy a_21709

out(c, CreateSessionRequest) at {20} in copy a_21709

new Nc creating Nc_22081 at {21} in copy a_21709

out(c, (CreateSessionRequest,pub(skB),Nc_22081)) at {23} in copy a_21709

in(c, (CreateSessionRequest,pub(skB),a_21708)) at {42} in copy a_21709

new Ns_113 creating Ns_21711 at {44} in copy a_21709

event(beginSrvNonce(D,B,a_21708)) at {45} in copy a_21709

out(c, (CreateSessionResponse,pub(skD),a_21708,Ns_21711)) at {47} in copy a_21709

in(c, (ActivateSessionRequest,pub(skB),Ns_21711,Login(pub(a_21707)),Passwd(a_21707,pub(skD)))) at {48} in copy a_21709

new Ns2_116 creating Ns2_22120 at {51} in copy a_21709

out(c, (ActivateSessionResponse,Ns2_22120)) at {53} in copy a_21709

event(endSrvPass(B,D,(Login(pub(a_21707)),Passwd(a_21707,pub(skD))))) at {55} in copy a_21709

The event endSrvPass(B,D,(Login(pub(a_21707)),Passwd(a_21707,pub(skD)))) is executed.
A trace has been found.
RESULT event(endSrvPass(X_15262,Y_15263,N_15264)) ==> event(beginCliPass(X_15262,Y_15263,N_15264)) is false.
-- Query not attacker(Passwd(skA[],pub(skC[])))
Completing...
200 rules inserted. The rule base contains 98 rules. 8 rules in the queue.
Starting query not attacker(Passwd(skA[],pub(skC[])))
goal reachable: attacker(Passwd(skA[],pub(skC[])))
Abbreviations:
Nc_28027 = Nc[Sess = C[],Cli = A[],!1 = @sid_28020]

1. The attacker initially knows C[].
attacker(C[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know C[].
Using the function 2-tuple the attacker may obtain (A[],C[]).
attacker((A[],C[])).

4. The attacker has some term Ns_28021.
attacker(Ns_28021).

5. The message (A[],C[]) that the attacker may have by 3 may be received at input {11}.
So the message (CreateSessionRequest,pub(skA[]),Nc_28027) may be sent to the attacker at output {23}.
attacker((CreateSessionRequest,pub(skA[]),Nc_28027)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_28027).
Using the function 3-proj-3-tuple the attacker may obtain Nc_28027.
attacker(Nc_28027).

7. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skC[]).
By 6, the attacker may know Nc_28027.
By 4, the attacker may know Ns_28021.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skC[]),Nc_28027,Ns_28021).
attacker((CreateSessionResponse,pub(skC[]),Nc_28027,Ns_28021)).

10. The message (A[],C[]) that the attacker may have by 3 may be received at input {11}.
The message (CreateSessionResponse,pub(skC[]),Nc_28027,Ns_28021) that the attacker may have by 9 may be received at input {24}.
So the message (ActivateSessionRequest,pub(skA[]),Ns_28021,Login(pub(skA[])),Passwd(skA[],pub(skC[]))) may be sent to the attacker at output {29}.
attacker((ActivateSessionRequest,pub(skA[]),Ns_28021,Login(pub(skA[])),Passwd(skA[],pub(skC[])))).

11. By 10, the attacker may know (ActivateSessionRequest,pub(skA[]),Ns_28021,Login(pub(skA[])),Passwd(skA[],pub(skC[]))).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[],pub(skC[])).
attacker(Passwd(skA[],pub(skC[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

out(c, pub(skD)) at {8}

new ch creating ch_28178 at {10} in copy a_28029

in(c, (A,C)) at {11} in copy a_28029

new K creating K_28214 at {13} in copy a_28029

out(ch_28178, (A,C,K_28214)) at {14} in copy a_28029 received at {34} in copy a_28029

out(c, CreateSessionRequest) at {41} in copy a_28029

out(c, CreateSessionRequest) at {20} in copy a_28029

new Nc creating Nc_28030 at {21} in copy a_28029

out(c, (CreateSessionRequest,pub(skA),Nc_28030)) at {23} in copy a_28029

in(c, (CreateSessionResponse,pub(skC),Nc_28030,a_28028)) at {24} in copy a_28029

event(beginCliPass(A,C,(Login(pub(skA)),Passwd(skA,pub(skC))))) at {26} in copy a_28029

event(beginCliNonce(A,C,a_28028)) at {27} in copy a_28029

out(c, (ActivateSessionRequest,pub(skA),a_28028,Login(pub(skA)),Passwd(skA,pub(skC)))) at {29} in copy a_28029

The attacker has the message Passwd(skA,pub(skC)).
A trace has been found.
RESULT not attacker(Passwd(skA[],pub(skC[]))) is false.
