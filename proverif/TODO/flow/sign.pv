(*  C --[TransactionID, Req]--> S
    S --[TransactionID, Resp] --> C
    C --[TransactionID+1, Req] --> S
    S --[TransactionID+1, Resp] --> C
    ...
*)

free c: channel.
free cCO, cSO: channel [private].

free zero: bitstring.
fun suc(bitstring): bitstring [private].

type request.
type response.

(* Cryotpo primitives *)
type key.
fun senc(bitstring, key): bitstring.
reduc forall x: bitstring, k: key ; sdec(senc(x, k), k) = x.

(* Public key crypto *)
fun pub(key): key.
fun enc(bitstring, key): bitstring.
reduc forall x: bitstring, k: key ; dec(enc(x, pub(k)), k) = x.

(* Signatures *)
fun sign(bitstring, key): bitstring.
reduc forall x: bitstring, k: key ; verify(x, sign(x, k), pub(k)) = true.

(* Goals *)
event different.
query event(different).


(* Integrity check *)
let oracle =
    let id = zero in
    in(cCO, (=id, reqc: bitstring, resc: bitstring));
    in(cSO, (=id, reqs: bitstring, ress: bitstring));
    if (reqc, resc) <> (reqs, ress) then event different else
    
    let id = suc(id) in
    in(cCO, (=id, reqc: bitstring, resc: bitstring));
    in(cSO, (=id, reqs: bitstring, ress: bitstring));
    if (reqc, resc) <> (reqs, ress) then event different else 0.


let client(skCli: key, pkSrv: key) =
    let id = zero in
    new req: request;
    let m = (id, req) in
    out(c, (m, sign(m, skCli)));
    in(c, (m: bitstring, sigM: bitstring));
    if verify(m, sigM, pkSrv) <> true then 0 else
    let (=id, res: response) = m in
    out(cCO, (id, req, res));

    let id = suc(id) in
    new req: request;
    let m = (id, req) in
    out(c, (m, sign(m, skCli)));
    in(c, (m: bitstring, sigM: bitstring));
    if verify(m, sigM, pkSrv) <> true then 0 else
    let (=id, res: response) = m in
    out(cCO, (id, req, res)).


let server(pkCli: key, skSrv: key) =
    let id = zero in
    in(c, (m: bitstring, sigM: bitstring));
    if verify(m, sigM, pkCli) <> true then 0 else
    let (=id, req: request) = m in
    new res: response;
    out(cSO, (id, req, res));
    let m = (id, res) in
    out(c, (m, sign(m, skSrv)));

    let id = suc(id) in
    in(c, (m: bitstring, sigM: bitstring));
    if verify(m, sigM, pkCli) <> true then 0 else
    let (=id, req: request) = m in
    new res: response;
    out(cSO, (id, req, res));
    let m = (id, res) in
    out(c, (m, sign(m, skSrv))).

process
    new skCli: key; let pkCli = pub(skCli) in out(c, pkCli);
    new skSrv: key; let pkSrv = pub(skSrv) in out(c, pkSrv);

    (client(skCli, pkSrv) |
     server(pkCli, skSrv) |
     oracle
    )
