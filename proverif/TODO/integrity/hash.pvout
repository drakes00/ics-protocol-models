Process:
(
    {1}in(cAO, m1: bitstring);
    {2}in(cBO, m2: bitstring);
    {3}if (m1 = m2) then
        0
    else
        {4}event different(m1,m2)
) | (
    {5}out(cAO, m);
    {6}out(c, (m,H(m)))
) | (
    {7}in(c, (x: bitstring,h: bitstring));
    {8}if (h = H(x)) then
    {9}out(cBO, x)
)

-- Query not event(different(x_19,m[]))
Completing...
Starting query not event(different(x_19,m[]))
RESULT not event(different(x_19,m[])) is true.
-- Query not event(different(m[],x_165))
Completing...
Starting query not event(different(m[],x_165))
goal reachable: x_298 <> m[] && attacker(x_298) -> end(different(m[],x_298))

1. The message m[] may be sent on channel cAO[] at output {5}.
mess(cAO[],m[]).

2. We assume as hypothesis that
attacker(x_306).

3. By 2, the attacker may know x_306.
Using the function H the attacker may obtain H(x_306).
attacker(H(x_306)).

4. By 2, the attacker may know x_306.
By 3, the attacker may know H(x_306).
Using the function 2-tuple the attacker may obtain (x_306,H(x_306)).
attacker((x_306,H(x_306))).

5. The message (x_306,H(x_306)) that the attacker may have by 4 may be received at input {7}.
So the message x_306 may be sent on channel cBO[] at output {9}.
mess(cBO[],x_306).

6. The message m[] that may be sent on channel cAO[] by 1 may be received at input {1}.
The message x_306 that may be sent on channel cBO[] by 5 may be received at input {2}.
We have m[] <> x_306.
So event different(m[],x_306) may be executed at {4}.
end(different(m[],x_306)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(cAO, m) at {5} received at {1}

out(c, (m,H(m))) at {6}

in(c, (a,H(a))) at {7}

out(cBO, a) at {9} received at {2}

event(different(m,a)) at {4}

The event different(m,a) is executed.
A trace has been found.
RESULT not event(different(m[],x_165)) is false.
