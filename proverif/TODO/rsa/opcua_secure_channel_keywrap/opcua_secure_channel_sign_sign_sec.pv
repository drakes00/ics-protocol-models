(*  OpcUaClient --[GetEndpointRequest]--> DiscoveryEndpoint
    DiscorevyEndpoint --[SP, None, UP, pk(SessionEndpoint)]--> OpcUaClient
    OpcUaClient --[pk(OpcUaClient), SP, exp(g, Nc)]--> SessionEndpoint
    SessionEndpoint --[exp(g, Ns)]--> OpcUaClient
*)

free c: channel.


(* Hosts *)
type host.
free A, B, C, I: host.


(* Hash function *)
fun h(bitstring): bitstring.


(* Symetric key crypto *)
fun senc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, k: bitstring ; sdec(senc(x, k), k) = x.


(* Public key crypto *)
fun sk(host): bitstring.
fun pub(bitstring): bitstring.
fun enc(bitstring, bitstring): bitstring.
fun dec(bitstring, bitstring): bitstring.
equation forall x: bitstring, k: bitstring ; dec(enc(x, pub(k)), k) = x.


(* Signatures *)
fun sign(bitstring, bitstring): bitstring.
reduc forall x:bitstring, s:bitstring, k:bitstring ; verify(x, sign(x, k), pub(k)) = true.


(* Diffie-Hellman *)
const g: bitstring.
fun exp(bitstring, bitstring): bitstring.
equation forall x: bitstring, y: bitstring; exp(exp(g, x), y) = exp(exp(g, y), x).


(* Constants *)
const GetEndpointRequest: bitstring.
const GetEndpointResponse: bitstring.
const OpenSecureChannelRequest: bitstring.
const OpenSecureChannelResponse: bitstring.

const None: bitstring.
const Sign: bitstring.
const SignAndEncrypt: bitstring.


(* Private keys *)
free skA: bitstring [private].
free skB: bitstring [private].
free skC: bitstring [private].


(* Goals *)
fun mCli(bitstring, bitstring): bitstring [private].
fun mSrv(bitstring, bitstring): bitstring [private].
query attacker(mCli(pub(skA), pub(skC))).
query attacker(mSrv(pub(skA), pub(skC))).


let client(skA: bitstring, skB: bitstring, skC: bitstring) = 
    in(c, (Cli: host, Disco: host, Sess: host));
    let skCli = if Cli = A then skA else if Cli = B then skB else if Cli = C then skC in
    let pkCli = pub(skCli) in
    let pkDisco = if Disco = A then pub(skA) else if Disco = B then pub(skB) else if Disco = C then pub(skC) else pub(sk(Disco)) in
    let pkSess = if Sess = A then pub(skA) else if Sess = B then pub(skB) else if Sess = C then pub(skC) else pub(sk(Sess)) in

    (* Role starting *)
    out(c, GetEndpointRequest);

    in(c, (=GetEndpointResponse, =pkSess, =Sign, SP: bitstring, UP: bitstring));

    new Nc: bitstring;
    let wNc = enc(Nc, pkSess) in
    let m1 = (OpenSecureChannelRequest, pkCli, wNc) in
    out(c, (pkCli, m1, sign(h(m1), skCli)));

    in(c, (em2: bitstring, sigM2: bitstring));
    let m2 = em2 in
    if verify(h(m2), sigM2, pkSess) <> true then 0 else
    let (=OpenSecureChannelResponse, wNs: bitstring, ST: bitstring, TTL: bitstring) = m2 in
    let Ns = dec(wNs, skCli) in

    let Kcli = h((Nc, Ns)) in
    out(c, senc(mCli(pkCli, pkSess), Kcli)).


let disco(skA: bitstring, skB: bitstring, skC: bitstring) = 
    in(c, (Cli: host, Disco: host, Sess: host));
    let skDisco = if Disco = A then skA else if Disco = B then skB else if Disco = C then skC in
    let pkDisco = pub(skDisco) in
    let pkCli = if Cli = A then pub(skA) else if Cli = B then pub(skB) else if Cli = C then pub(skC) else pub(sk(Cli)) in
    let pkSess = if Sess = A then pub(skA) else if Sess = B then pub(skB) else if Sess = C then pub(skC) else pub(sk(Sess)) in

    (* Role starting *)
    in(c, =GetEndpointRequest);

    new SP: bitstring;
    new UP: bitstring;
    out(c, (GetEndpointResponse, pkSess, Sign, SP, UP)).


let sess(skA: bitstring, skB: bitstring, skC: bitstring) = 
    in(c, (Cli: host, Disco: host, Sess: host));
    let skSess = if Sess = A then skA else if Sess = B then skB else if Sess = C then skC in
    let pkSess = pub(skSess) in
    let pkCli = if Cli = A then pub(skA) else if Cli = B then pub(skB) else if Cli = C then pub(skC) else pub(sk(Cli)) in
    let pkDisco = if Disco = A then pub(skA) else if Disco = B then pub(skB) else if Disco = C then pub(skC) else pub(sk(Disco)) in

    (* Role starting *)
    in(c, (=pkCli, em1: bitstring, sigM1: bitstring));
    let m1 = em1 in
    if verify(h(m1), sigM1, pkCli) <> true then 0 else
    let (=OpenSecureChannelRequest, =pkCli, wNc: bitstring) = m1 in
    let Nc = dec(wNc, skSess) in
    
    new Ns: bitstring;
    new ST: bitstring;
    new TTL: bitstring;
    let wNs = enc(Ns, pkCli) in
    let m2 = (OpenSecureChannelResponse, wNs, ST, TTL) in
    out(c, (m2, sign(h(m2), skSess)));

    let Ksrv = h((Ns, Nc)) in
    out(c, senc(mSrv(pkCli, pkSess), Ksrv)).


process
    let pkA = pub(skA) in out(c, pkA);
    let pkB = pub(skB) in out(c, pkB);
    let pkC = pub(skC) in out(c, pkC);

    (!client(skA, skB, skC) |
     !disco(skA, skB, skC) |
     !sess(skA, skB, skC)
    )
