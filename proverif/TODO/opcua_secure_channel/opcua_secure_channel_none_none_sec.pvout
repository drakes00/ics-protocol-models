Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (=GetEndpointResponse,=pkSess,=None,SP: bitstring,UP: bitstring));
    {15}new Nc: bitstring;
    {16}let m1: bitstring = (OpenSecureChannelRequest,pkCli,Nc) in
    {17}out(c, (pkCli,m1));
    {18}in(c, em2: bitstring);
    {19}let m2: bitstring = em2 in
    {20}let (=OpenSecureChannelResponse,Ns: bitstring,ST: bitstring,TTL: bitstring) = m2 in
    {21}let Kcli: bitstring = h((Nc,Ns)) in
    {22}out(c, senc(mCli(pkCli,pkSess),Kcli))
) | (
    {23}!
    {24}in(c, (Cli_81: host,Disco_82: host,Sess_83: host));
    {25}let skDisco: bitstring = (if (Disco_82 = A) then skA else (if (Disco_82 = B) then skB else (if (Disco_82 = C) then skC else fail-any))) in
    {26}let pkDisco_84: bitstring = pub(skDisco) in
    {27}let pkCli_85: bitstring = (if (Cli_81 = A) then pub(skA) else (if (Cli_81 = B) then pub(skB) else (if (Cli_81 = C) then pub(skC) else pub(sk(Cli_81))))) in
    {28}let pkSess_86: bitstring = (if (Sess_83 = A) then pub(skA) else (if (Sess_83 = B) then pub(skB) else (if (Sess_83 = C) then pub(skC) else pub(sk(Sess_83))))) in
    {29}in(c, =GetEndpointRequest);
    {30}new SP_87: bitstring;
    {31}new UP_88: bitstring;
    {32}out(c, (GetEndpointResponse,pkSess_86,None,SP_87,UP_88))
) | (
    {33}!
    {34}in(c, (Cli_89: host,Disco_90: host,Sess_91: host));
    {35}let skSess: bitstring = (if (Sess_91 = A) then skA else (if (Sess_91 = B) then skB else (if (Sess_91 = C) then skC else fail-any))) in
    {36}let pkSess_92: bitstring = pub(skSess) in
    {37}let pkCli_93: bitstring = (if (Cli_89 = A) then pub(skA) else (if (Cli_89 = B) then pub(skB) else (if (Cli_89 = C) then pub(skC) else pub(sk(Cli_89))))) in
    {38}let pkDisco_94: bitstring = (if (Disco_90 = A) then pub(skA) else (if (Disco_90 = B) then pub(skB) else (if (Disco_90 = C) then pub(skC) else pub(sk(Disco_90))))) in
    {39}in(c, (=pkCli_93,em1: bitstring));
    {40}let m1_95: bitstring = em1 in
    {41}let (=OpenSecureChannelRequest,=pkCli_93,Nc_96: bitstring) = m1_95 in
    {42}new Ns_97: bitstring;
    {43}new ST_98: bitstring;
    {44}new TTL_99: bitstring;
    {45}let m2_100: bitstring = (OpenSecureChannelResponse,Ns_97,ST_98,TTL_99) in
    {46}out(c, m2_100);
    {47}let Ksrv: bitstring = h((Nc_96,Ns_97)) in
    {48}out(c, senc(mSrv(pkCli_93,pkSess_92),Ksrv))
)

-- Query not attacker(mSrv(pub(skA[]),pub(skC[])))
Completing...
200 rules inserted. The rule base contains 75 rules. 388 rules in the queue.
400 rules inserted. The rule base contains 107 rules. 388 rules in the queue.
600 rules inserted. The rule base contains 123 rules. 386 rules in the queue.
800 rules inserted. The rule base contains 123 rules. 386 rules in the queue.
1000 rules inserted. The rule base contains 127 rules. 368 rules in the queue.
1200 rules inserted. The rule base contains 97 rules. 360 rules in the queue.
1400 rules inserted. The rule base contains 143 rules. 294 rules in the queue.
1600 rules inserted. The rule base contains 161 rules. 280 rules in the queue.
1800 rules inserted. The rule base contains 265 rules. 201 rules in the queue.
2000 rules inserted. The rule base contains 390 rules. 111 rules in the queue.
Starting query not attacker(mSrv(pub(skA[]),pub(skC[])))
goal reachable: attacker(mSrv(pub(skA[]),pub(skC[])))
Abbreviations:
Ns_41000 = Ns_97[em1 = (OpenSecureChannelRequest,pub(skA[]),Nc_40996),Sess_91 = C[],Disco_90 = A[],Cli_89 = A[],!1 = @sid_40997]
ST_41001 = ST_98[em1 = (OpenSecureChannelRequest,pub(skA[]),Nc_40996),Sess_91 = C[],Disco_90 = A[],Cli_89 = A[],!1 = @sid_40997]
TTL_41002 = TTL_99[em1 = (OpenSecureChannelRequest,pub(skA[]),Nc_40996),Sess_91 = C[],Disco_90 = A[],Cli_89 = A[],!1 = @sid_40997]

1. The attacker initially knows C[].
attacker(C[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 2, the attacker may know A[].
By 1, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (A[],A[],C[]).
attacker((A[],A[],C[])).

4. The attacker has some term Nc_40996.
attacker(Nc_40996).

5. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

6. Using the function OpenSecureChannelRequest the attacker may obtain OpenSecureChannelRequest.
attacker(OpenSecureChannelRequest).

7. By 6, the attacker may know OpenSecureChannelRequest.
By 5, the attacker may know pub(skA[]).
By 4, the attacker may know Nc_40996.
Using the function 3-tuple the attacker may obtain (OpenSecureChannelRequest,pub(skA[]),Nc_40996).
attacker((OpenSecureChannelRequest,pub(skA[]),Nc_40996)).

8. By 5, the attacker may know pub(skA[]).
By 7, the attacker may know (OpenSecureChannelRequest,pub(skA[]),Nc_40996).
Using the function 2-tuple the attacker may obtain (pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_40996)).
attacker((pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_40996))).

9. The message (A[],A[],C[]) that the attacker may have by 3 may be received at input {34}.
The message (pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_40996)) that the attacker may have by 8 may be received at input {39}.
So the message (OpenSecureChannelResponse,Ns_41000,ST_41001,TTL_41002) may be sent to the attacker at output {46}.
attacker((OpenSecureChannelResponse,Ns_41000,ST_41001,TTL_41002)).

10. By 9, the attacker may know (OpenSecureChannelResponse,Ns_41000,ST_41001,TTL_41002).
Using the function 2-proj-4-tuple the attacker may obtain Ns_41000.
attacker(Ns_41000).

11. By 4, the attacker may know Nc_40996.
By 10, the attacker may know Ns_41000.
Using the function 2-tuple the attacker may obtain (Nc_40996,Ns_41000).
attacker((Nc_40996,Ns_41000)).

12. By 11, the attacker may know (Nc_40996,Ns_41000).
Using the function h the attacker may obtain h((Nc_40996,Ns_41000)).
attacker(h((Nc_40996,Ns_41000))).

13. The message (A[],A[],C[]) that the attacker may have by 3 may be received at input {34}.
The message (pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_40996)) that the attacker may have by 8 may be received at input {39}.
So the message senc(mSrv(pub(skA[]),pub(skC[])),h((Nc_40996,Ns_41000))) may be sent to the attacker at output {48}.
attacker(senc(mSrv(pub(skA[]),pub(skC[])),h((Nc_40996,Ns_41000)))).

14. By 13, the attacker may know senc(mSrv(pub(skA[]),pub(skC[])),h((Nc_40996,Ns_41000))).
By 12, the attacker may know h((Nc_40996,Ns_41000)).
Using the function sdec the attacker may obtain mSrv(pub(skA[]),pub(skC[])).
attacker(mSrv(pub(skA[]),pub(skC[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (A,A,C)) at {34} in copy a_41003

in(c, (pub(skA),(OpenSecureChannelRequest,pub(skA),a))) at {39} in copy a_41003

new Ns_97 creating Ns_41004 at {42} in copy a_41003

new ST_98 creating ST_41005 at {43} in copy a_41003

new TTL_99 creating TTL_41006 at {44} in copy a_41003

out(c, (OpenSecureChannelResponse,Ns_41004,ST_41005,TTL_41006)) at {46} in copy a_41003

out(c, senc(mSrv(pub(skA),pub(skC)),h((a,Ns_41004)))) at {48} in copy a_41003

The attacker has the message mSrv(pub(skA),pub(skC)).
A trace has been found.
RESULT not attacker(mSrv(pub(skA[]),pub(skC[]))) is false.
-- Query not attacker(mCli(pub(skA[]),pub(skC[])))
Completing...
200 rules inserted. The rule base contains 75 rules. 388 rules in the queue.
400 rules inserted. The rule base contains 107 rules. 388 rules in the queue.
600 rules inserted. The rule base contains 123 rules. 386 rules in the queue.
800 rules inserted. The rule base contains 123 rules. 386 rules in the queue.
1000 rules inserted. The rule base contains 127 rules. 368 rules in the queue.
1200 rules inserted. The rule base contains 97 rules. 360 rules in the queue.
1400 rules inserted. The rule base contains 143 rules. 294 rules in the queue.
1600 rules inserted. The rule base contains 161 rules. 280 rules in the queue.
1800 rules inserted. The rule base contains 265 rules. 201 rules in the queue.
2000 rules inserted. The rule base contains 390 rules. 111 rules in the queue.
Starting query not attacker(mCli(pub(skA[]),pub(skC[])))
goal reachable: attacker(mCli(pub(skA[]),pub(skC[])))
Abbreviations:
Nc_82015 = Nc[UP = UP_82011,SP = SP_82010,Sess = C[],Disco = A[],Cli = A[],!1 = @sid_82012]

1. The attacker has some term Ns_82007.
attacker(Ns_82007).

2. The attacker initially knows C[].
attacker(C[]).

3. The attacker initially knows A[].
attacker(A[]).

4. By 3, the attacker may know A[].
By 3, the attacker may know A[].
By 2, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (A[],A[],C[]).
attacker((A[],A[],C[])).

5. The attacker has some term UP_82011.
attacker(UP_82011).

6. The attacker has some term SP_82010.
attacker(SP_82010).

7. Using the function None the attacker may obtain None.
attacker(None).

8. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

9. Using the function GetEndpointResponse the attacker may obtain GetEndpointResponse.
attacker(GetEndpointResponse).

10. By 9, the attacker may know GetEndpointResponse.
By 8, the attacker may know pub(skC[]).
By 7, the attacker may know None.
By 6, the attacker may know SP_82010.
By 5, the attacker may know UP_82011.
Using the function 5-tuple the attacker may obtain (GetEndpointResponse,pub(skC[]),None,SP_82010,UP_82011).
attacker((GetEndpointResponse,pub(skC[]),None,SP_82010,UP_82011)).

11. The message (A[],A[],C[]) that the attacker may have by 4 may be received at input {8}.
The message (GetEndpointResponse,pub(skC[]),None,SP_82010,UP_82011) that the attacker may have by 10 may be received at input {14}.
So the message (pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_82015)) may be sent to the attacker at output {17}.
attacker((pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_82015))).

12. By 11, the attacker may know (pub(skA[]),(OpenSecureChannelRequest,pub(skA[]),Nc_82015)).
Using the function 2-proj-2-tuple the attacker may obtain (OpenSecureChannelRequest,pub(skA[]),Nc_82015).
attacker((OpenSecureChannelRequest,pub(skA[]),Nc_82015)).

13. By 12, the attacker may know (OpenSecureChannelRequest,pub(skA[]),Nc_82015).
Using the function 3-proj-3-tuple the attacker may obtain Nc_82015.
attacker(Nc_82015).

14. By 13, the attacker may know Nc_82015.
By 1, the attacker may know Ns_82007.
Using the function 2-tuple the attacker may obtain (Nc_82015,Ns_82007).
attacker((Nc_82015,Ns_82007)).

15. By 14, the attacker may know (Nc_82015,Ns_82007).
Using the function h the attacker may obtain h((Nc_82015,Ns_82007)).
attacker(h((Nc_82015,Ns_82007))).

16. The attacker has some term TTL_82009.
attacker(TTL_82009).

17. The attacker has some term ST_82008.
attacker(ST_82008).

18. Using the function OpenSecureChannelResponse the attacker may obtain OpenSecureChannelResponse.
attacker(OpenSecureChannelResponse).

19. By 18, the attacker may know OpenSecureChannelResponse.
By 1, the attacker may know Ns_82007.
By 17, the attacker may know ST_82008.
By 16, the attacker may know TTL_82009.
Using the function 4-tuple the attacker may obtain (OpenSecureChannelResponse,Ns_82007,ST_82008,TTL_82009).
attacker((OpenSecureChannelResponse,Ns_82007,ST_82008,TTL_82009)).

20. The message (A[],A[],C[]) that the attacker may have by 4 may be received at input {8}.
The message (GetEndpointResponse,pub(skC[]),None,SP_82010,UP_82011) that the attacker may have by 10 may be received at input {14}.
The message (OpenSecureChannelResponse,Ns_82007,ST_82008,TTL_82009) that the attacker may have by 19 may be received at input {18}.
So the message senc(mCli(pub(skA[]),pub(skC[])),h((Nc_82015,Ns_82007))) may be sent to the attacker at output {22}.
attacker(senc(mCli(pub(skA[]),pub(skC[])),h((Nc_82015,Ns_82007)))).

21. By 20, the attacker may know senc(mCli(pub(skA[]),pub(skC[])),h((Nc_82015,Ns_82007))).
By 15, the attacker may know h((Nc_82015,Ns_82007)).
Using the function sdec the attacker may obtain mCli(pub(skA[]),pub(skC[])).
attacker(mCli(pub(skA[]),pub(skC[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (A,A,C)) at {8} in copy a_82018

out(c, GetEndpointRequest) at {13} in copy a_82018

in(c, (GetEndpointResponse,pub(skC),None,a_82017,a_82016)) at {14} in copy a_82018

new Nc creating Nc_82022 at {15} in copy a_82018

out(c, (pub(skA),(OpenSecureChannelRequest,pub(skA),Nc_82022))) at {17} in copy a_82018

in(c, (OpenSecureChannelResponse,a_82019,a_82020,a_82021)) at {18} in copy a_82018

out(c, senc(mCli(pub(skA),pub(skC)),h((Nc_82022,a_82019)))) at {22} in copy a_82018

The attacker has the message mCli(pub(skA),pub(skC)).
A trace has been found.
RESULT not attacker(mCli(pub(skA[]),pub(skC[]))) is false.
