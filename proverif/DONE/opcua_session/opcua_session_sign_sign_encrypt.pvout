Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {28}if ((Sess = A) || (Sess = B)) then
            {29}event endCli(Sess,Cli,Ns)
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, (em1: bitstring,sigM1: bitstring));
    {36}let m1_66: bitstring = sdec(em1,K_61) in
    {37}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {38}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {39}new Ns_68: bitstring;
        {40}event beginSrv(Sess_60,Cli_59,Ns_68);
        {41}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Nc_67,Ns_68) in
        {42}out(c, (senc(m2_69,K_61),sign(h(m2_69),skSess_64)));
        {43}in(c, (em3: bitstring,sigM3: bitstring));
        {44}let m3_70: bitstring = sdec(em3,K_61) in
        {45}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {47}new Ns2_71: bitstring;
            {48}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {49}out(c, (senc(m4_72,K_61),sign(h(m4_72),skSess_64)));
            {50}if ((Cli_59 = A) || (Cli_59 = B)) then
            {51}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 140 rules. 72 rules in the queue.
400 rules inserted. The rule base contains 232 rules. 112 rules in the queue.
600 rules inserted. The rule base contains 258 rules. 98 rules in the queue.
800 rules inserted. The rule base contains 304 rules. 48 rules in the queue.
1000 rules inserted. The rule base contains 381 rules. 27 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_12891,Y_12892,N_12893)) ==> event(beginCli(X_12891,Y_12892,N_12893))
Completing...
200 rules inserted. The rule base contains 142 rules. 72 rules in the queue.
400 rules inserted. The rule base contains 245 rules. 125 rules in the queue.
600 rules inserted. The rule base contains 300 rules. 128 rules in the queue.
800 rules inserted. The rule base contains 428 rules. 40 rules in the queue.
1000 rules inserted. The rule base contains 533 rules. 75 rules in the queue.
1200 rules inserted. The rule base contains 548 rules. 28 rules in the queue.
Starting query event(endSrv(X_12891,Y_12892,N_12893)) ==> event(beginCli(X_12891,Y_12892,N_12893))
RESULT event(endSrv(X_12891,Y_12892,N_12893)) ==> event(beginCli(X_12891,Y_12892,N_12893)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 244 rules. 106 rules in the queue.
600 rules inserted. The rule base contains 260 rules. 88 rules in the queue.
800 rules inserted. The rule base contains 316 rules. 48 rules in the queue.
1000 rules inserted. The rule base contains 376 rules. 24 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_36167 = Nc[Sess = Sess_36158,Cli = A[],!1 = @sid_36159]

1. The attacker has some term Sess_36158.
attacker(Sess_36158).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36158.
Using the function 2-tuple the attacker may obtain (A[],Sess_36158).
attacker((A[],Sess_36158)).

4. By 1, the attacker may know Sess_36158.
Using the function sk the attacker may obtain sk(Sess_36158).
attacker(sk(Sess_36158)).

5. The attacker has some term Ns_36160.
attacker(Ns_36160).

6. The message (A[],Sess_36158) that the attacker may have by 3 may be received at input {7}.
We have Sess_36158 <> B[] & Sess_36158 <> A[].
So the message ((CreateSessionRequest,pub(skA[]),Nc_36167),sign(h((CreateSessionRequest,pub(skA[]),Nc_36167)),skA[])) may be sent to the attacker at output {18}.
attacker(((CreateSessionRequest,pub(skA[]),Nc_36167),sign(h((CreateSessionRequest,pub(skA[]),Nc_36167)),skA[]))).

7. By 6, the attacker may know ((CreateSessionRequest,pub(skA[]),Nc_36167),sign(h((CreateSessionRequest,pub(skA[]),Nc_36167)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_36167).
attacker((CreateSessionRequest,pub(skA[]),Nc_36167)).

8. By 7, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_36167).
Using the function 3-proj-3-tuple the attacker may obtain Nc_36167.
attacker(Nc_36167).

9. By 4, the attacker may know sk(Sess_36158).
Using the function pub the attacker may obtain pub(sk(Sess_36158)).
attacker(pub(sk(Sess_36158))).

10. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

11. By 10, the attacker may know CreateSessionResponse.
By 9, the attacker may know pub(sk(Sess_36158)).
By 8, the attacker may know Nc_36167.
By 5, the attacker may know Ns_36160.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160).
attacker((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)).

12. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160))).

13. By 12, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)).
By 4, the attacker may know sk(Sess_36158).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158))).

14. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160).
By 13, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160),sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158))).
attacker(((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160),sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158)))).

15. The message (A[],Sess_36158) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160),sign(h((CreateSessionResponse,pub(sk(Sess_36158)),Nc_36167,Ns_36160)),sk(Sess_36158))) that the attacker may have by 14 may be received at input {19}.
We have Sess_36158 <> B[] & Sess_36158 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

16. By 15, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_36265 at {6} in copy a_36168

in(c, (A,a)) at {7} in copy a_36168

new K creating K_36351 at {12} in copy a_36168

out(ch_36265, (A,a,K_36351)) at {13} in copy a_36168 received at {30} in copy a_36168

out(c, K_36351) at {15} in copy a_36168

new Nc creating Nc_36170 at {16} in copy a_36168

out(c, ((CreateSessionRequest,pub(skA),Nc_36170),sign(h((CreateSessionRequest,pub(skA),Nc_36170)),skA))) at {18} in copy a_36168

in(c, ((CreateSessionResponse,pub(sk(a)),Nc_36170,a_36169),sign(h((CreateSessionResponse,pub(sk(a)),Nc_36170,a_36169)),sk(a)))) at {19} in copy a_36168

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {22} in copy a_36168

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_36168

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 244 rules. 106 rules in the queue.
600 rules inserted. The rule base contains 260 rules. 88 rules in the queue.
800 rules inserted. The rule base contains 316 rules. 48 rules in the queue.
1000 rules inserted. The rule base contains 376 rules. 24 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
Nc_46037 = Nc[Sess = Sess_46028,Cli = A[],!1 = @sid_46029]

1. The attacker has some term Sess_46028.
attacker(Sess_46028).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_46028.
Using the function 2-tuple the attacker may obtain (A[],Sess_46028).
attacker((A[],Sess_46028)).

4. By 1, the attacker may know Sess_46028.
Using the function sk the attacker may obtain sk(Sess_46028).
attacker(sk(Sess_46028)).

5. The attacker has some term Ns_46030.
attacker(Ns_46030).

6. The message (A[],Sess_46028) that the attacker may have by 3 may be received at input {7}.
We have Sess_46028 <> B[] & Sess_46028 <> A[].
So the message ((CreateSessionRequest,pub(skA[]),Nc_46037),sign(h((CreateSessionRequest,pub(skA[]),Nc_46037)),skA[])) may be sent to the attacker at output {18}.
attacker(((CreateSessionRequest,pub(skA[]),Nc_46037),sign(h((CreateSessionRequest,pub(skA[]),Nc_46037)),skA[]))).

7. By 6, the attacker may know ((CreateSessionRequest,pub(skA[]),Nc_46037),sign(h((CreateSessionRequest,pub(skA[]),Nc_46037)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_46037).
attacker((CreateSessionRequest,pub(skA[]),Nc_46037)).

8. By 7, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_46037).
Using the function 3-proj-3-tuple the attacker may obtain Nc_46037.
attacker(Nc_46037).

9. By 4, the attacker may know sk(Sess_46028).
Using the function pub the attacker may obtain pub(sk(Sess_46028)).
attacker(pub(sk(Sess_46028))).

10. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

11. By 10, the attacker may know CreateSessionResponse.
By 9, the attacker may know pub(sk(Sess_46028)).
By 8, the attacker may know Nc_46037.
By 5, the attacker may know Ns_46030.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030).
attacker((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)).

12. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)).
attacker(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030))).

13. By 12, the attacker may know h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)).
By 4, the attacker may know sk(Sess_46028).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028))).

14. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030).
By 13, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030),sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028))).
attacker(((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030),sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028)))).

15. The message (A[],Sess_46028) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030),sign(h((CreateSessionResponse,pub(sk(Sess_46028)),Nc_46037,Ns_46030)),sk(Sess_46028))) that the attacker may have by 14 may be received at input {19}.
We have Sess_46028 <> B[] & Sess_46028 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

16. By 15, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_46137 at {6} in copy a_46039

in(c, (A,a_46038)) at {7} in copy a_46039

new K creating K_46223 at {12} in copy a_46039

out(ch_46137, (A,a_46038,K_46223)) at {13} in copy a_46039 received at {30} in copy a_46039

out(c, K_46223) at {15} in copy a_46039

new Nc creating Nc_46041 at {16} in copy a_46039

out(c, ((CreateSessionRequest,pub(skA),Nc_46041),sign(h((CreateSessionRequest,pub(skA),Nc_46041)),skA))) at {18} in copy a_46039

in(c, ((CreateSessionResponse,pub(sk(a_46038)),Nc_46041,a_46040),sign(h((CreateSessionResponse,pub(sk(a_46038)),Nc_46041,a_46040)),sk(a_46038)))) at {19} in copy a_46039

event(beginCli(A,a_46038,(Login(skA),Passwd(skA)))) at {22} in copy a_46039

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_46039

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
