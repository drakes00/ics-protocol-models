Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}let m1_66: bitstring = sdec(em1,K_61) in
    {35}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {36}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {37}new Ns_68: bitstring;
        {38}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {39}out(c, (senc(m2_69,K_61),sign(h(m2_69),skSess_64)));
        {40}in(c, (em3: bitstring,sigM3: bitstring));
        {41}let m3_70: bitstring = sdec(em3,K_61) in
        {42}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {43}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {44}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {45}new Ns2_71: bitstring;
            {46}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {47}out(c, (senc(m4_72,K_61),sign(h(m4_72),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 144 rules. 74 rules in the queue.
400 rules inserted. The rule base contains 250 rules. 116 rules in the queue.
600 rules inserted. The rule base contains 314 rules. 136 rules in the queue.
800 rules inserted. The rule base contains 438 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 525 rules. 107 rules in the queue.
1200 rules inserted. The rule base contains 586 rules. 28 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 226 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 252 rules. 95 rules in the queue.
800 rules inserted. The rule base contains 320 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 384 rules. 24 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_23427.
attacker(Sess_23427).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_23427.
Using the function 2-tuple the attacker may obtain (A[],Sess_23427).
attacker((A[],Sess_23427)).

4. By 1, the attacker may know Sess_23427.
Using the function sk the attacker may obtain sk(Sess_23427).
attacker(sk(Sess_23427)).

5. The attacker has some term Ns_23428.
attacker(Ns_23428).

6. By 4, the attacker may know sk(Sess_23427).
Using the function pub the attacker may obtain pub(sk(Sess_23427)).
attacker(pub(sk(Sess_23427))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_23427)).
By 5, the attacker may know Ns_23428.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428).
attacker((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)).
attacker(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)).
By 4, the attacker may know sk(Sess_23427).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428),sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427))).
attacker(((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428),sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427)))).

12. The message (A[],Sess_23427) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428),sign(h((CreateSessionResponse,pub(sk(Sess_23427)),Ns_23428)),sk(Sess_23427))) that the attacker may have by 11 may be received at input {19}.
We have Sess_23427 <> B[] & Sess_23427 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_23532 at {6} in copy a_23437

in(c, (A,a)) at {7} in copy a_23437

new K creating K_23618 at {12} in copy a_23437

out(ch_23532, (A,a,K_23618)) at {13} in copy a_23437 received at {28} in copy a_23437

out(c, K_23618) at {15} in copy a_23437

new Nc creating Nc_23703 at {16} in copy a_23437

out(c, ((CreateSessionRequest,pub(skA),Nc_23703),sign(h((CreateSessionRequest,pub(skA),Nc_23703)),skA))) at {18} in copy a_23437

in(c, ((CreateSessionResponse,pub(sk(a)),a_23436),sign(h((CreateSessionResponse,pub(sk(a)),a_23436)),sk(a)))) at {19} in copy a_23437

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {22} in copy a_23437

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_23437

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 226 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 252 rules. 95 rules in the queue.
800 rules inserted. The rule base contains 320 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 384 rules. 24 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_33078.
attacker(Sess_33078).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_33078.
Using the function 2-tuple the attacker may obtain (A[],Sess_33078).
attacker((A[],Sess_33078)).

4. By 1, the attacker may know Sess_33078.
Using the function sk the attacker may obtain sk(Sess_33078).
attacker(sk(Sess_33078)).

5. The attacker has some term Ns_33079.
attacker(Ns_33079).

6. By 4, the attacker may know sk(Sess_33078).
Using the function pub the attacker may obtain pub(sk(Sess_33078)).
attacker(pub(sk(Sess_33078))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_33078)).
By 5, the attacker may know Ns_33079.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079).
attacker((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)).
attacker(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)).
By 4, the attacker may know sk(Sess_33078).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079),sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078))).
attacker(((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079),sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078)))).

12. The message (A[],Sess_33078) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079),sign(h((CreateSessionResponse,pub(sk(Sess_33078)),Ns_33079)),sk(Sess_33078))) that the attacker may have by 11 may be received at input {19}.
We have Sess_33078 <> B[] & Sess_33078 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_33185 at {6} in copy a_33089

in(c, (A,a_33087)) at {7} in copy a_33089

new K creating K_33271 at {12} in copy a_33089

out(ch_33185, (A,a_33087,K_33271)) at {13} in copy a_33089 received at {28} in copy a_33089

out(c, K_33271) at {15} in copy a_33089

new Nc creating Nc_33356 at {16} in copy a_33089

out(c, ((CreateSessionRequest,pub(skA),Nc_33356),sign(h((CreateSessionRequest,pub(skA),Nc_33356)),skA))) at {18} in copy a_33089

in(c, ((CreateSessionResponse,pub(sk(a_33087)),a_33088),sign(h((CreateSessionResponse,pub(sk(a_33087)),a_33088)),sk(a_33087)))) at {19} in copy a_33089

event(beginCli(A,a_33087,(Login(skA),Passwd(skA)))) at {22} in copy a_33089

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_33089

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
