Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {28}if ((Sess = A) || (Sess = B)) then
            {29}event endCli(Sess,Cli,Ns)
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, (em1: bitstring,sigM1: bitstring));
    {36}let m1_66: bitstring = sdec(em1,K_61) in
    {37}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {38}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {39}new Ns_68: bitstring;
        {40}event beginSrv(Sess_60,Cli_59,Ns_68);
        {41}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {42}out(c, (senc(m2_69,K_61),sign(h(m2_69),skSess_64)));
        {43}in(c, (em3: bitstring,sigM3: bitstring));
        {44}let m3_70: bitstring = sdec(em3,K_61) in
        {45}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {47}new Ns2_71: bitstring;
            {48}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {49}out(c, (senc(m4_72,K_61),sign(h(m4_72),skSess_64)));
            {50}if ((Cli_59 = A) || (Cli_59 = B)) then
            {51}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 141 rules. 72 rules in the queue.
400 rules inserted. The rule base contains 214 rules. 100 rules in the queue.
600 rules inserted. The rule base contains 250 rules. 102 rules in the queue.
800 rules inserted. The rule base contains 318 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 377 rules. 39 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_13155,Y_13156,N_13157)) ==> event(beginCli(X_13155,Y_13156,N_13157))
Completing...
200 rules inserted. The rule base contains 142 rules. 72 rules in the queue.
400 rules inserted. The rule base contains 251 rules. 113 rules in the queue.
600 rules inserted. The rule base contains 309 rules. 133 rules in the queue.
800 rules inserted. The rule base contains 440 rules. 72 rules in the queue.
1000 rules inserted. The rule base contains 515 rules. 97 rules in the queue.
1200 rules inserted. The rule base contains 558 rules. 28 rules in the queue.
Starting query event(endSrv(X_13155,Y_13156,N_13157)) ==> event(beginCli(X_13155,Y_13156,N_13157))
RESULT event(endSrv(X_13155,Y_13156,N_13157)) ==> event(beginCli(X_13155,Y_13156,N_13157)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 226 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 252 rules. 95 rules in the queue.
800 rules inserted. The rule base contains 320 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 384 rules. 24 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_36887.
attacker(Sess_36887).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36887.
Using the function 2-tuple the attacker may obtain (A[],Sess_36887).
attacker((A[],Sess_36887)).

4. By 1, the attacker may know Sess_36887.
Using the function sk the attacker may obtain sk(Sess_36887).
attacker(sk(Sess_36887)).

5. The attacker has some term Ns_36888.
attacker(Ns_36888).

6. By 4, the attacker may know sk(Sess_36887).
Using the function pub the attacker may obtain pub(sk(Sess_36887)).
attacker(pub(sk(Sess_36887))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_36887)).
By 5, the attacker may know Ns_36888.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888).
attacker((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)).
By 4, the attacker may know sk(Sess_36887).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888),sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887))).
attacker(((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888),sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887)))).

12. The message (A[],Sess_36887) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888),sign(h((CreateSessionResponse,pub(sk(Sess_36887)),Ns_36888)),sk(Sess_36887))) that the attacker may have by 11 may be received at input {19}.
We have Sess_36887 <> B[] & Sess_36887 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_36992 at {6} in copy a_36897

in(c, (A,a)) at {7} in copy a_36897

new K creating K_37078 at {12} in copy a_36897

out(ch_36992, (A,a,K_37078)) at {13} in copy a_36897 received at {30} in copy a_36897

out(c, K_37078) at {15} in copy a_36897

new Nc creating Nc_37163 at {16} in copy a_36897

out(c, ((CreateSessionRequest,pub(skA),Nc_37163),sign(h((CreateSessionRequest,pub(skA),Nc_37163)),skA))) at {18} in copy a_36897

in(c, ((CreateSessionResponse,pub(sk(a)),a_36896),sign(h((CreateSessionResponse,pub(sk(a)),a_36896)),sk(a)))) at {19} in copy a_36897

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {22} in copy a_36897

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_36897

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 226 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 252 rules. 95 rules in the queue.
800 rules inserted. The rule base contains 320 rules. 56 rules in the queue.
1000 rules inserted. The rule base contains 384 rules. 24 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_46840.
attacker(Sess_46840).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_46840.
Using the function 2-tuple the attacker may obtain (A[],Sess_46840).
attacker((A[],Sess_46840)).

4. By 1, the attacker may know Sess_46840.
Using the function sk the attacker may obtain sk(Sess_46840).
attacker(sk(Sess_46840)).

5. The attacker has some term Ns_46841.
attacker(Ns_46841).

6. By 4, the attacker may know sk(Sess_46840).
Using the function pub the attacker may obtain pub(sk(Sess_46840)).
attacker(pub(sk(Sess_46840))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_46840)).
By 5, the attacker may know Ns_46841.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841).
attacker((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)).
attacker(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)).
By 4, the attacker may know sk(Sess_46840).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841),sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840))).
attacker(((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841),sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840)))).

12. The message (A[],Sess_46840) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841),sign(h((CreateSessionResponse,pub(sk(Sess_46840)),Ns_46841)),sk(Sess_46840))) that the attacker may have by 11 may be received at input {19}.
We have Sess_46840 <> B[] & Sess_46840 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_46947 at {6} in copy a_46851

in(c, (A,a_46849)) at {7} in copy a_46851

new K creating K_47033 at {12} in copy a_46851

out(ch_46947, (A,a_46849,K_47033)) at {13} in copy a_46851 received at {30} in copy a_46851

out(c, K_47033) at {15} in copy a_46851

new Nc creating Nc_47118 at {16} in copy a_46851

out(c, ((CreateSessionRequest,pub(skA),Nc_47118),sign(h((CreateSessionRequest,pub(skA),Nc_47118)),skA))) at {18} in copy a_46851

in(c, ((CreateSessionResponse,pub(sk(a_46849)),a_46850),sign(h((CreateSessionResponse,pub(sk(a_46849)),a_46850)),sk(a_46849)))) at {19} in copy a_46851

event(beginCli(A,a_46849,(Login(skA),Passwd(skA)))) at {22} in copy a_46851

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_46851

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
