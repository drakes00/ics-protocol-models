Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else fail-any)) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (m1,sign(h(m1),skCli)));
    {14}in(c, (m2: bitstring,sigM2: bitstring));
    {15}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {16}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {17}new CSC: bitstring;
        {18}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
        {19}let m3: bitstring = (CSC,Login(skCli,skSess),Passwd(skCli,skSess)) in
        {20}out(c, (m3,sign(h(m3),skCli)));
        {21}in(c, (m4: bitstring,sigM4: bitstring));
        {22}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {23}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {24}!
    {25}in(c, (Cli_59: host,Sess_60: host));
    {26}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else fail-any)) in
    {27}let pkCli_62: bitstring = pub(skCli_61) in
    {28}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {29}let pkSess_64: bitstring = pub(skSess_63) in
    {30}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {31}in(c, (em1: bitstring,sigM1: bitstring));
    {32}let m1_66: bitstring = sdec(em1,K_65) in
    {33}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {34}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {35}new SSC_67: bitstring;
            {36}new Ns2_68: bitstring;
            {37}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {38}out(c, (senc(m2_69,K_65),sign(h(m2_69),skSess_63)));
            {39}in(c, (em3: bitstring,sigM3: bitstring));
            {40}let m3_70: bitstring = sdec(em3,K_65) in
            {41}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {42}let (CSC_71: bitstring,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_70 in
                {43}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
                {44}let m4_72: bitstring = ActivateSessionResponse in
                {45}out(c, (senc(m4_72,K_65),sign(h(m4_72),skSess_63)))
) | (
    {46}!
    {47}in(c, (X: host,Y: host));
    {48}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {49}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {50}if ((X,Y) = (A,B)) then
        0
    else
        {51}if ((X,Y) = (B,A)) then
            0
        else
            {52}out(c, Skey(skX,skY))
) | (
    {53}!
    {54}in(c, (X_73: host,Y_74: host));
    {55}let skX_75: bitstring = (if (X_73 = A) then skA else (if (X_73 = B) then skB else sk(X_73))) in
    {56}let skY_76: bitstring = (if (Y_74 = A) then skA else (if (Y_74 = B) then skB else sk(Y_74))) in
    {57}if ((X_73,Y_74) = (A,B)) then
        0
    else
        {58}if ((X_73,Y_74) = (B,A)) then
            0
        else
            {59}out(c, (Login(skX_75,skY_76),Passwd(skX_75,skY_76)))
)

-- Query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
Completing...
200 rules inserted. The rule base contains 120 rules. 21 rules in the queue.
Starting query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
goal reachable: begin(beginCli(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[])))) -> end(endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[])))) -> end(endSrv(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[]))))
RESULT event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 121 rules. 14 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 121 rules. 14 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 121 rules. 14 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))
Abbreviations:
SSC_25279 = SSC_67[sigM1 = sign(h(CreateSessionRequest),skB[]),em1 = senc(CreateSessionRequest,Skey(skB[],skB[])),Sess_60 = B[],Cli_59 = B[],!1 = @sid_25262]
Ns2_25280 = Ns2_68[sigM1 = sign(h(CreateSessionRequest),skB[]),em1 = senc(CreateSessionRequest,Skey(skB[],skB[])),Sess_60 = B[],Cli_59 = B[],!1 = @sid_25262]
CSC_25281 = CSC[sigM2 = sign(h((SSC_25279,Ns2_25280)),skB[]),m2 = (SSC_25279,Ns2_25280),Sess = B[],Cli = A[],!1 = @sid_25273]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

5. The message (B[],B[]) that the attacker may have by 4 may be received at input {6}.
So the message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) may be sent to the attacker at output {13}.
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

6. By 5, the attacker may know (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(CreateSessionRequest),skB[]).
attacker(sign(h(CreateSessionRequest),skB[])).

7. The message (B[],B[]) that the attacker may have by 4 may be received at input {47}.
So the message Skey(skB[],skB[]) may be sent to the attacker at output {52}.
attacker(Skey(skB[],skB[])).

8. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

9. By 8, the attacker may know CreateSessionRequest.
By 7, the attacker may know Skey(skB[],skB[]).
Using the function senc the attacker may obtain senc(CreateSessionRequest,Skey(skB[],skB[])).
attacker(senc(CreateSessionRequest,Skey(skB[],skB[]))).

10. By 9, the attacker may know senc(CreateSessionRequest,Skey(skB[],skB[])).
By 6, the attacker may know sign(h(CreateSessionRequest),skB[]).
Using the function 2-tuple the attacker may obtain (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])).
attacker((senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[]))).

11. The message (B[],B[]) that the attacker may have by 4 may be received at input {25}.
The message (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])) that the attacker may have by 10 may be received at input {31}.
So the message (senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])),sign(h((SSC_25279,Ns2_25280)),skB[])) may be sent to the attacker at output {38}.
attacker((senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])),sign(h((SSC_25279,Ns2_25280)),skB[]))).

12. By 11, the attacker may know (senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])),sign(h((SSC_25279,Ns2_25280)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((SSC_25279,Ns2_25280)),skB[]).
attacker(sign(h((SSC_25279,Ns2_25280)),skB[])).

13. By 11, the attacker may know (senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])),sign(h((SSC_25279,Ns2_25280)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])).
attacker(senc((SSC_25279,Ns2_25280),Skey(skB[],skB[]))).

14. By 13, the attacker may know senc((SSC_25279,Ns2_25280),Skey(skB[],skB[])).
By 7, the attacker may know Skey(skB[],skB[]).
Using the function sdec the attacker may obtain (SSC_25279,Ns2_25280).
attacker((SSC_25279,Ns2_25280)).

15. By 14, the attacker may know (SSC_25279,Ns2_25280).
Using the function 2-proj-2-tuple the attacker may obtain Ns2_25280.
attacker(Ns2_25280).

16. By 14, the attacker may know (SSC_25279,Ns2_25280).
Using the function 1-proj-2-tuple the attacker may obtain SSC_25279.
attacker(SSC_25279).

17. By 16, the attacker may know SSC_25279.
By 15, the attacker may know Ns2_25280.
Using the function 2-tuple the attacker may obtain (SSC_25279,Ns2_25280).
attacker((SSC_25279,Ns2_25280)).

18. By 17, the attacker may know (SSC_25279,Ns2_25280).
By 12, the attacker may know sign(h((SSC_25279,Ns2_25280)),skB[]).
Using the function 2-tuple the attacker may obtain ((SSC_25279,Ns2_25280),sign(h((SSC_25279,Ns2_25280)),skB[])).
attacker(((SSC_25279,Ns2_25280),sign(h((SSC_25279,Ns2_25280)),skB[]))).

19. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_25279,Ns2_25280),sign(h((SSC_25279,Ns2_25280)),skB[])) that the attacker may have by 18 may be received at input {14}.
So the message ((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[]))).

20. By 19, the attacker may know ((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[])).
attacker((CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[]))).

21. By 20, the attacker may know (CSC_25281,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,B)) at {6} in copy a_25284

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {13} in copy a_25284

in(c, (A,B)) at {6} in copy a_25282

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_25282

in(c, (B,B)) at {25} in copy a

in(c, (B,B)) at {47} in copy a_25283

out(c, Skey(skB,skB)) at {52} in copy a_25283

in(c, (senc(CreateSessionRequest,Skey(skB,skB)),sign(h(CreateSessionRequest),skB))) at {31} in copy a

new SSC_67 creating SSC_25285 at {35} in copy a

new Ns2_68 creating Ns2_25286 at {36} in copy a

out(c, (senc((SSC_25285,Ns2_25286),Skey(skB,skB)),sign(h((SSC_25285,Ns2_25286)),skB))) at {38} in copy a

in(c, ((SSC_25285,Ns2_25286),sign(h((SSC_25285,Ns2_25286)),skB))) at {14} in copy a_25282

new CSC creating CSC_25287 at {17} in copy a_25282

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {18} in copy a_25282

out(c, ((CSC_25287,Login(skA,skB),Passwd(skA,skB)),sign(h((CSC_25287,Login(skA,skB),Passwd(skA,skB))),skA))) at {20} in copy a_25282

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 121 rules. 14 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))
Abbreviations:
SSC_32027 = SSC_67[sigM1 = sign(h(CreateSessionRequest),skB[]),em1 = senc(CreateSessionRequest,Skey(skB[],skB[])),Sess_60 = B[],Cli_59 = B[],!1 = @sid_32010]
Ns2_32028 = Ns2_68[sigM1 = sign(h(CreateSessionRequest),skB[]),em1 = senc(CreateSessionRequest,Skey(skB[],skB[])),Sess_60 = B[],Cli_59 = B[],!1 = @sid_32010]
CSC_32029 = CSC[sigM2 = sign(h((SSC_32027,Ns2_32028)),skB[]),m2 = (SSC_32027,Ns2_32028),Sess = B[],Cli = A[],!1 = @sid_32021]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

5. The message (B[],B[]) that the attacker may have by 4 may be received at input {6}.
So the message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) may be sent to the attacker at output {13}.
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

6. By 5, the attacker may know (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(CreateSessionRequest),skB[]).
attacker(sign(h(CreateSessionRequest),skB[])).

7. The message (B[],B[]) that the attacker may have by 4 may be received at input {47}.
So the message Skey(skB[],skB[]) may be sent to the attacker at output {52}.
attacker(Skey(skB[],skB[])).

8. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

9. By 8, the attacker may know CreateSessionRequest.
By 7, the attacker may know Skey(skB[],skB[]).
Using the function senc the attacker may obtain senc(CreateSessionRequest,Skey(skB[],skB[])).
attacker(senc(CreateSessionRequest,Skey(skB[],skB[]))).

10. By 9, the attacker may know senc(CreateSessionRequest,Skey(skB[],skB[])).
By 6, the attacker may know sign(h(CreateSessionRequest),skB[]).
Using the function 2-tuple the attacker may obtain (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])).
attacker((senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[]))).

11. The message (B[],B[]) that the attacker may have by 4 may be received at input {25}.
The message (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])) that the attacker may have by 10 may be received at input {31}.
So the message (senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])),sign(h((SSC_32027,Ns2_32028)),skB[])) may be sent to the attacker at output {38}.
attacker((senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])),sign(h((SSC_32027,Ns2_32028)),skB[]))).

12. By 11, the attacker may know (senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])),sign(h((SSC_32027,Ns2_32028)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((SSC_32027,Ns2_32028)),skB[]).
attacker(sign(h((SSC_32027,Ns2_32028)),skB[])).

13. By 11, the attacker may know (senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])),sign(h((SSC_32027,Ns2_32028)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])).
attacker(senc((SSC_32027,Ns2_32028),Skey(skB[],skB[]))).

14. By 13, the attacker may know senc((SSC_32027,Ns2_32028),Skey(skB[],skB[])).
By 7, the attacker may know Skey(skB[],skB[]).
Using the function sdec the attacker may obtain (SSC_32027,Ns2_32028).
attacker((SSC_32027,Ns2_32028)).

15. By 14, the attacker may know (SSC_32027,Ns2_32028).
Using the function 2-proj-2-tuple the attacker may obtain Ns2_32028.
attacker(Ns2_32028).

16. By 14, the attacker may know (SSC_32027,Ns2_32028).
Using the function 1-proj-2-tuple the attacker may obtain SSC_32027.
attacker(SSC_32027).

17. By 16, the attacker may know SSC_32027.
By 15, the attacker may know Ns2_32028.
Using the function 2-tuple the attacker may obtain (SSC_32027,Ns2_32028).
attacker((SSC_32027,Ns2_32028)).

18. By 17, the attacker may know (SSC_32027,Ns2_32028).
By 12, the attacker may know sign(h((SSC_32027,Ns2_32028)),skB[]).
Using the function 2-tuple the attacker may obtain ((SSC_32027,Ns2_32028),sign(h((SSC_32027,Ns2_32028)),skB[])).
attacker(((SSC_32027,Ns2_32028),sign(h((SSC_32027,Ns2_32028)),skB[]))).

19. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_32027,Ns2_32028),sign(h((SSC_32027,Ns2_32028)),skB[])) that the attacker may have by 18 may be received at input {14}.
So the message ((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[]))).

20. By 19, the attacker may know ((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[])).
attacker((CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[]))).

21. By 20, the attacker may know (CSC_32029,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,B)) at {6} in copy a_32033

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {13} in copy a_32033

in(c, (A,B)) at {6} in copy a_32031

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_32031

in(c, (B,B)) at {25} in copy a_32030

in(c, (B,B)) at {47} in copy a_32032

out(c, Skey(skB,skB)) at {52} in copy a_32032

in(c, (senc(CreateSessionRequest,Skey(skB,skB)),sign(h(CreateSessionRequest),skB))) at {31} in copy a_32030

new SSC_67 creating SSC_32034 at {35} in copy a_32030

new Ns2_68 creating Ns2_32035 at {36} in copy a_32030

out(c, (senc((SSC_32034,Ns2_32035),Skey(skB,skB)),sign(h((SSC_32034,Ns2_32035)),skB))) at {38} in copy a_32030

in(c, ((SSC_32034,Ns2_32035),sign(h((SSC_32034,Ns2_32035)),skB))) at {14} in copy a_32031

new CSC creating CSC_32036 at {17} in copy a_32031

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {18} in copy a_32031

out(c, ((CSC_32036,Login(skA,skB),Passwd(skA,skB)),sign(h((CSC_32036,Login(skA,skB),Passwd(skA,skB))),skA))) at {20} in copy a_32031

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
