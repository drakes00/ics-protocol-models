File "opcua_session_sign_sign_encrypt.pv", line 112, character 41 - line 112, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (m1,sign(h(m1),skCli)));
    {15}in(c, (m2: bitstring,sigM2: bitstring));
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {18}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {19}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {20}out(c, (m3,sign(h(m3),skCli)));
        {21}in(c, (m4: bitstring,sigM4: bitstring));
        {22}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {23}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {24}!
    {25}in(c, (Cli_59: host,Sess_60: host));
    {26}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {27}let pkCli_62: bitstring = pub(skCli_61) in
    {28}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {29}let pkSess_64: bitstring = pub(skSess_63) in
    {30}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {31}in(c, (em1: bitstring,sigM1: bitstring));
    {32}new Nc_66: bitstring;
    {33}let m1_67: bitstring = sdec(em1,K_65) in
    {34}if (verify(h(m1_67),sigM1,pkCli_62) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_62,Nc_68: bitstring) = m1_67 in
        {36}new Ns_69: bitstring;
        {37}let m2_70: bitstring = (CreateSessionResponse,pkSess_64,Ns_69) in
        {38}out(c, (senc(m2_70,K_65),sign(h(m2_70),skSess_63)));
        {39}in(c, (em3: bitstring,sigM3: bitstring));
        {40}let m3_71: bitstring = sdec(em3,K_65) in
        {41}if (verify(h(m3_71),sigM3,pkCli_62) <> true) then
            0
        else
            {42}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_71 in
            {43}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
            {44}new Ns2_72: bitstring;
            {45}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {46}out(c, (senc(m4_73,K_65),sign(h(m4_73),skSess_63)))
) | (
    {47}!
    {48}in(c, (X: host,Y: host));
    {49}if (X = Y) then
        0
    else
        {50}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {51}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {52}if ((X,Y) = (A,B)) then
            0
        else
            {53}if ((X,Y) = (B,A)) then
                0
            else
                {54}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
Completing...
200 rules inserted. The rule base contains 134 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 190 rules. 52 rules in the queue.
600 rules inserted. The rule base contains 268 rules. 26 rules in the queue.
Starting query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
RESULT event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 156 rules. 16 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 156 rules. 16 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 156 rules. 16 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_29150.
attacker(Sess_29150).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_29150.
Using the function 2-tuple the attacker may obtain (A[],Sess_29150).
attacker((A[],Sess_29150)).

4. By 1, the attacker may know Sess_29150.
Using the function sk the attacker may obtain sk(Sess_29150).
attacker(sk(Sess_29150)).

5. The attacker has some term Ns_29151.
attacker(Ns_29151).

6. By 4, the attacker may know sk(Sess_29150).
Using the function pub the attacker may obtain pub(sk(Sess_29150)).
attacker(pub(sk(Sess_29150))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_29150)).
By 5, the attacker may know Ns_29151.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151).
attacker((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)).
attacker(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)).
By 4, the attacker may know sk(Sess_29150).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151),sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150))).
attacker(((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151),sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150)))).

12. The message (A[],Sess_29150) that the attacker may have by 3 may be received at input {6}.
The message ((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151),sign(h((CreateSessionResponse,pub(sk(Sess_29150)),Ns_29151)),sk(Sess_29150))) that the attacker may have by 11 may be received at input {15}.
We have Sess_29150 <> B[] & Sess_29150 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a)) at {6} in copy a_29160

new Nc creating Nc_29342 at {12} in copy a_29160

out(c, ((CreateSessionRequest,pub(skA),Nc_29342),sign(h((CreateSessionRequest,pub(skA),Nc_29342)),skA))) at {14} in copy a_29160

in(c, ((CreateSessionResponse,pub(sk(a)),a_29159),sign(h((CreateSessionResponse,pub(sk(a)),a_29159)),sk(a)))) at {15} in copy a_29160

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {18} in copy a_29160

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {20} in copy a_29160

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 156 rules. 16 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_36209.
attacker(Sess_36209).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36209.
Using the function 2-tuple the attacker may obtain (A[],Sess_36209).
attacker((A[],Sess_36209)).

4. By 1, the attacker may know Sess_36209.
Using the function sk the attacker may obtain sk(Sess_36209).
attacker(sk(Sess_36209)).

5. The attacker has some term Ns_36210.
attacker(Ns_36210).

6. By 4, the attacker may know sk(Sess_36209).
Using the function pub the attacker may obtain pub(sk(Sess_36209)).
attacker(pub(sk(Sess_36209))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_36209)).
By 5, the attacker may know Ns_36210.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210).
attacker((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)).
By 4, the attacker may know sk(Sess_36209).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210),sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209))).
attacker(((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210),sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209)))).

12. The message (A[],Sess_36209) that the attacker may have by 3 may be received at input {6}.
The message ((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210),sign(h((CreateSessionResponse,pub(sk(Sess_36209)),Ns_36210)),sk(Sess_36209))) that the attacker may have by 11 may be received at input {15}.
We have Sess_36209 <> B[] & Sess_36209 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_36218)) at {6} in copy a_36220

new Nc creating Nc_36403 at {12} in copy a_36220

out(c, ((CreateSessionRequest,pub(skA),Nc_36403),sign(h((CreateSessionRequest,pub(skA),Nc_36403)),skA))) at {14} in copy a_36220

in(c, ((CreateSessionResponse,pub(sk(a_36218)),a_36219),sign(h((CreateSessionResponse,pub(sk(a_36218)),a_36219)),sk(a_36218)))) at {15} in copy a_36220

event(beginCli(A,a_36218,(Login(skA),Passwd(skA)))) at {18} in copy a_36220

out(c, ((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {20} in copy a_36220

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
