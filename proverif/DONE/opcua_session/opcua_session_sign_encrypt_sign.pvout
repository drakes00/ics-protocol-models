File "opcua_session_sign_encrypt_sign.pv", line 70, character 9 - line 70, character 10:
Warning: identifier K rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}new K_59: bitstring;
    {15}out(ch, (Cli,Sess,K_59));
    {16}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K_59 else CreateSessionRequest) in
    {17}out(c, tmp);
    {18}new Nc: bitstring;
    {19}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {20}out(c, (senc(m1,K_59),sign(h(m1),skCli)));
    {21}in(c, (em2: bitstring,sigM2: bitstring));
    {22}let m2: bitstring = sdec(em2,K_59) in
    {23}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {24}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {25}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
        {26}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli)) in
        {27}out(c, (senc(m3,K_59),sign(h(m3),skCli)));
        {28}in(c, (em4: bitstring,sigM4: bitstring));
        {29}let m4: bitstring = sdec(em4,K_59) in
        {30}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {31}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {32}if ((Sess = A) || (Sess = B)) then
            {33}event endCli(Sess,Cli,Ns)
) | (
    {34}in(ch, (Cli_60: host,Sess_61: host,K_62: bitstring));
    {35}let skCli_63: bitstring = (if (Cli_60 = A) then skA else (if (Cli_60 = B) then skB else sk(Cli_60))) in
    {36}let pkCli_64: bitstring = pub(skCli_63) in
    {37}let skSess_65: bitstring = (if (Sess_61 = A) then skA else (if (Sess_61 = B) then skB else fail-any)) in
    {38}let pkSess_66: bitstring = pub(skSess_65) in
    {39}let tmp_67: bitstring = (if ((Cli_60 <> A) && (Cli_60 <> B)) then K_62 else CreateSessionRequest) in
    {40}out(c, tmp_67);
    {41}in(c, (m1_68: bitstring,sigM1: bitstring));
    {42}if (verify(h(m1_68),sigM1,pkCli_64) <> true) then
        0
    else
        {43}let (=CreateSessionRequest,=pkCli_64,Nc_69: bitstring) = m1_68 in
        {44}new Ns_70: bitstring;
        {45}event beginSrv(Sess_61,Cli_60,Ns_70);
        {46}let m2_71: bitstring = (CreateSessionResponse,pkSess_66,Nc_69,Ns_70) in
        {47}out(c, (m2_71,sign(h(m2_71),skSess_65)));
        {48}in(c, (m3_72: bitstring,sigM3: bitstring));
        {49}if (verify(h(m3_72),sigM3,pkCli_64) <> true) then
            0
        else
            {50}let (=ActivateSessionRequest,=pkCli_64,=Login(pkCli_64),=Passwd(skCli_63)) = m3_72 in
            {51}new Ns2_73: bitstring;
            {52}let m4_74: bitstring = (ActivateSessionResponse,Ns2_73) in
            {53}out(c, (m4_74,sign(h(m4_74),skSess_65)));
            {54}if ((Cli_60 = A) || (Cli_60 = B)) then
            {55}event endSrv(Cli_60,Sess_61,(Login(pkCli_64),Passwd(skCli_63)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 133 rules. 98 rules in the queue.
400 rules inserted. The rule base contains 214 rules. 160 rules in the queue.
600 rules inserted. The rule base contains 238 rules. 152 rules in the queue.
800 rules inserted. The rule base contains 282 rules. 74 rules in the queue.
1000 rules inserted. The rule base contains 293 rules. 55 rules in the queue.
1200 rules inserted. The rule base contains 385 rules. 69 rules in the queue.
1400 rules inserted. The rule base contains 420 rules. 2 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_15679,Y_15680,N_15681)) ==> event(beginCli(X_15679,Y_15680,N_15681))
Completing...
200 rules inserted. The rule base contains 132 rules. 104 rules in the queue.
400 rules inserted. The rule base contains 202 rules. 174 rules in the queue.
600 rules inserted. The rule base contains 224 rules. 176 rules in the queue.
800 rules inserted. The rule base contains 268 rules. 84 rules in the queue.
1000 rules inserted. The rule base contains 260 rules. 72 rules in the queue.
1200 rules inserted. The rule base contains 366 rules. 88 rules in the queue.
1400 rules inserted. The rule base contains 414 rules. 28 rules in the queue.
Starting query event(endSrv(X_15679,Y_15680,N_15681)) ==> event(beginCli(X_15679,Y_15680,N_15681))
goal reachable: Sess_30076 <> B[] && Sess_30076 <> A[] && begin(beginCli(B[],Sess_30076,(Login(pub(skB[])),Passwd(skB[])))) && attacker(Sess_30076) -> end(endSrv(B[],A[],(Login(pub(skB[])),Passwd(skB[]))))
Abbreviations:
K_30221 = K_59[Sess = Sess_30199,Cli = B[],!1 = @sid_30141]
Nc_30222 = Nc[Sess = Sess_30199,Cli = B[],!1 = @sid_30141]
K_30223 = K_59[Sess = Sess_30199,Cli = B[],!1 = @sid_30200]
Nc_30224 = Nc[Sess = Sess_30199,Cli = B[],!1 = @sid_30200]
Nc_30225 = Nc[Sess = Sess_30157,Cli = B[],!1 = @sid_30158]
K_30226 = K_59[Sess = Sess_30157,Cli = B[],!1 = @sid_30158]
ch_30227 = ch[!1 = @sid_30216]
K_30228 = K_59[Sess = A[],Cli = B[],!1 = @sid_30216]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (B[],A[],K_30228) may be sent on channel ch_30227 at output {15}.
mess(ch_30227,(B[],A[],K_30228)).

5. The attacker has some term Sess_30157.
attacker(Sess_30157).

6. By 2, the attacker may know B[].
By 5, the attacker may know Sess_30157.
Using the function 2-tuple the attacker may obtain (B[],Sess_30157).
attacker((B[],Sess_30157)).

7. The message (B[],Sess_30157) that the attacker may have by 6 may be received at input {7}.
We have Sess_30157 <> B[] & Sess_30157 <> A[].
So the message (senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])) may be sent to the attacker at output {20}.
attacker((senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[]).
attacker(sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])).

9. The message (B[],Sess_30157) that the attacker may have by 6 may be received at input {7}.
We have Sess_30157 <> B[] & Sess_30157 <> A[].
So the message K_30226 may be sent to the attacker at output {17}.
attacker(K_30226).

10. By 7, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226).
attacker(senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226)).

11. By 10, the attacker may know senc((CreateSessionRequest,pub(skB[]),Nc_30225),K_30226).
By 9, the attacker may know K_30226.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_30225).
attacker((CreateSessionRequest,pub(skB[]),Nc_30225)).

12. By 11, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_30225).
Using the function 3-proj-3-tuple the attacker may obtain Nc_30225.
attacker(Nc_30225).

13. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

14. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

15. By 14, the attacker may know CreateSessionRequest.
By 13, the attacker may know pub(skB[]).
By 12, the attacker may know Nc_30225.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_30225).
attacker((CreateSessionRequest,pub(skB[]),Nc_30225)).

16. By 15, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_30225).
By 8, the attacker may know sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionRequest,pub(skB[]),Nc_30225),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])).
attacker(((CreateSessionRequest,pub(skB[]),Nc_30225),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[]))).

17. We assume as hypothesis that
attacker(Sess_30199).

18. By 2, the attacker may know B[].
By 17, the attacker may know Sess_30199.
Using the function 2-tuple the attacker may obtain (B[],Sess_30199).
attacker((B[],Sess_30199)).

19. By 17, the attacker may know Sess_30199.
Using the function sk the attacker may obtain sk(Sess_30199).
attacker(sk(Sess_30199)).

20. The attacker has some term Ns_30201.
attacker(Ns_30201).

21. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message K_30223 may be sent to the attacker at output {17}.
attacker(K_30223).

22. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message (senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223),sign(h((CreateSessionRequest,pub(skB[]),Nc_30224)),skB[])) may be sent to the attacker at output {20}.
attacker((senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223),sign(h((CreateSessionRequest,pub(skB[]),Nc_30224)),skB[]))).

23. By 22, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223),sign(h((CreateSessionRequest,pub(skB[]),Nc_30224)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223).
attacker(senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223)).

24. By 23, the attacker may know senc((CreateSessionRequest,pub(skB[]),Nc_30224),K_30223).
By 21, the attacker may know K_30223.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_30224).
attacker((CreateSessionRequest,pub(skB[]),Nc_30224)).

25. By 24, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_30224).
Using the function 3-proj-3-tuple the attacker may obtain Nc_30224.
attacker(Nc_30224).

26. By 19, the attacker may know sk(Sess_30199).
Using the function pub the attacker may obtain pub(sk(Sess_30199)).
attacker(pub(sk(Sess_30199))).

27. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

28. By 27, the attacker may know CreateSessionResponse.
By 26, the attacker may know pub(sk(Sess_30199)).
By 25, the attacker may know Nc_30224.
By 20, the attacker may know Ns_30201.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201).
attacker((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)).

29. By 28, the attacker may know (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)).
attacker(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201))).

30. By 29, the attacker may know h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)).
By 19, the attacker may know sk(Sess_30199).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199))).

31. By 28, the attacker may know (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201).
By 21, the attacker may know K_30223.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223).
attacker(senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223)).

32. By 31, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223).
By 30, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199)))).

33. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201),K_30223),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30224,Ns_30201)),sk(Sess_30199))) that the attacker may have by 32 may be received at input {21}.
The event beginCli(B[],Sess_30199,(Login(pub(skB[])),Passwd(skB[]))) may be executed at {25}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30223),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])) may be sent to the attacker at output {27}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30223),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]))).

34. By 33, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30223),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]).
attacker(sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).

35. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message K_30221 may be sent to the attacker at output {17}.
attacker(K_30221).

36. The attacker has some term Ns_30142.
attacker(Ns_30142).

37. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message (senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221),sign(h((CreateSessionRequest,pub(skB[]),Nc_30222)),skB[])) may be sent to the attacker at output {20}.
attacker((senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221),sign(h((CreateSessionRequest,pub(skB[]),Nc_30222)),skB[]))).

38. By 37, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221),sign(h((CreateSessionRequest,pub(skB[]),Nc_30222)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221).
attacker(senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221)).

39. By 38, the attacker may know senc((CreateSessionRequest,pub(skB[]),Nc_30222),K_30221).
By 35, the attacker may know K_30221.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_30222).
attacker((CreateSessionRequest,pub(skB[]),Nc_30222)).

40. By 39, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_30222).
Using the function 3-proj-3-tuple the attacker may obtain Nc_30222.
attacker(Nc_30222).

41. By 27, the attacker may know CreateSessionResponse.
By 26, the attacker may know pub(sk(Sess_30199)).
By 40, the attacker may know Nc_30222.
By 36, the attacker may know Ns_30142.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142).
attacker((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)).

42. By 41, the attacker may know (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)).
attacker(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142))).

43. By 42, the attacker may know h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)).
By 19, the attacker may know sk(Sess_30199).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199))).

44. By 41, the attacker may know (CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142).
By 35, the attacker may know K_30221.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221).
attacker(senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221)).

45. By 44, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221).
By 43, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199)))).

46. The message (B[],Sess_30199) that the attacker may have by 18 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142),K_30221),sign(h((CreateSessionResponse,pub(sk(Sess_30199)),Nc_30222,Ns_30142)),sk(Sess_30199))) that the attacker may have by 45 may be received at input {21}.
The event beginCli(B[],Sess_30199,(Login(pub(skB[])),Passwd(skB[]))) may be executed at {25}.
We have Sess_30199 <> B[] & Sess_30199 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])) may be sent to the attacker at output {27}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]))).

47. By 46, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221).
attacker(senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221)).

48. By 47, the attacker may know senc((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),K_30221).
By 35, the attacker may know K_30221.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))).

49. By 48, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

50. By 13, the attacker may know pub(skB[]).
Using the function Login the attacker may obtain Login(pub(skB[])).
attacker(Login(pub(skB[]))).

51. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

52. By 51, the attacker may know ActivateSessionRequest.
By 13, the attacker may know pub(skB[]).
By 50, the attacker may know Login(pub(skB[])).
By 49, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))).

53. By 52, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
By 34, the attacker may know sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]).
Using the function 2-tuple the attacker may obtain ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
attacker(((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]))).

54. The message (B[],A[],K_30228) that may be sent on channel ch_30227 by 4 may be received at input {34}.
The message ((CreateSessionRequest,pub(skB[]),Nc_30225),sign(h((CreateSessionRequest,pub(skB[]),Nc_30225)),skB[])) that the attacker may have by 16 may be received at input {41}.
The message ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])) that the attacker may have by 53 may be received at input {48}.
So event endSrv(B[],A[],(Login(pub(skB[])),Passwd(skB[]))) may be executed at {55}.
end(endSrv(B[],A[],(Login(pub(skB[])),Passwd(skB[])))).


Could not find a trace corresponding to this derivation.
RESULT event(endSrv(X_15679,Y_15680,N_15681)) ==> event(beginCli(X_15679,Y_15680,N_15681)) cannot be proved.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 134 rules. 114 rules in the queue.
400 rules inserted. The rule base contains 212 rules. 144 rules in the queue.
600 rules inserted. The rule base contains 235 rules. 133 rules in the queue.
800 rules inserted. The rule base contains 252 rules. 68 rules in the queue.
1000 rules inserted. The rule base contains 286 rules. 58 rules in the queue.
1200 rules inserted. The rule base contains 381 rules. 33 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_100611 = K_59[Sess = Sess_100600,Cli = A[],!1 = @sid_100601]
Nc_100612 = Nc[Sess = Sess_100600,Cli = A[],!1 = @sid_100601]

1. The attacker has some term Sess_100600.
attacker(Sess_100600).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_100600.
Using the function 2-tuple the attacker may obtain (A[],Sess_100600).
attacker((A[],Sess_100600)).

4. The message (A[],Sess_100600) that the attacker may have by 3 may be received at input {7}.
We have Sess_100600 <> B[] & Sess_100600 <> A[].
So the message K_100611 may be sent to the attacker at output {17}.
attacker(K_100611).

5. By 1, the attacker may know Sess_100600.
Using the function sk the attacker may obtain sk(Sess_100600).
attacker(sk(Sess_100600)).

6. The attacker has some term Ns_100602.
attacker(Ns_100602).

7. The message (A[],Sess_100600) that the attacker may have by 3 may be received at input {7}.
We have Sess_100600 <> B[] & Sess_100600 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611),sign(h((CreateSessionRequest,pub(skA[]),Nc_100612)),skA[])) may be sent to the attacker at output {20}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611),sign(h((CreateSessionRequest,pub(skA[]),Nc_100612)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611),sign(h((CreateSessionRequest,pub(skA[]),Nc_100612)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_100612),K_100611).
By 4, the attacker may know K_100611.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_100612).
attacker((CreateSessionRequest,pub(skA[]),Nc_100612)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_100612).
Using the function 3-proj-3-tuple the attacker may obtain Nc_100612.
attacker(Nc_100612).

11. By 5, the attacker may know sk(Sess_100600).
Using the function pub the attacker may obtain pub(sk(Sess_100600)).
attacker(pub(sk(Sess_100600))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 11, the attacker may know pub(sk(Sess_100600)).
By 10, the attacker may know Nc_100612.
By 6, the attacker may know Ns_100602.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602).
attacker((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)).

14. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)).
attacker(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602))).

15. By 14, the attacker may know h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)).
By 5, the attacker may know sk(Sess_100600).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600))).

16. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602).
By 4, the attacker may know K_100611.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611).
attacker(senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611)).

17. By 16, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611).
By 15, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611),sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611),sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600)))).

18. The message (A[],Sess_100600) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602),K_100611),sign(h((CreateSessionResponse,pub(sk(Sess_100600)),Nc_100612,Ns_100602)),sk(Sess_100600))) that the attacker may have by 17 may be received at input {21}.
We have Sess_100600 <> B[] & Sess_100600 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])) may be sent to the attacker at output {27}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611)).

20. By 19, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_100611).
By 4, the attacker may know K_100611.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


Could not find a trace corresponding to this derivation.
RESULT not attacker(Passwd(skA[])) cannot be proved.
