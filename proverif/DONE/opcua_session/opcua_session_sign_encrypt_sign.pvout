Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {15}in(c, (em2: bitstring,sigM2: bitstring));
    {16}let m2: bitstring = sdec(em2,K) in
    {17}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {18}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_62,Nc_67: bitstring) = m1_66 in
        {36}new Ns_68: bitstring;
        {37}let m2_69: bitstring = (CreateSessionResponse,pkSess_64,Ns_68) in
        {38}out(c, (m2_69,sign(h(m2_69),skSess_63)));
        {39}in(c, (m3_70: bitstring,sigM3: bitstring));
        {40}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
            0
        else
            {41}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
            {42}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
            {43}new Ns2_71: bitstring;
            {44}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {45}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {46}!
    {47}in(c, (X: host,Y: host));
    {48}if (X = Y) then
        0
    else
        {49}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {50}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {51}if ((X,Y) = (A,B)) then
            0
        else
            {52}if ((X,Y) = (B,A)) then
                0
            else
                {53}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 154 rules. 20 rules in the queue.
600 rules inserted. The rule base contains 197 rules. 9 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Sess_8968 <> B[] && Sess_8968 <> A[] && begin(beginCli(B[],Sess_8968,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_8968) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
Nc_9112 = Nc[Sess = Sess_9064,Cli = B[],!1 = @sid_9065]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The attacker has some term Sess_9064.
attacker(Sess_9064).

5. By 2, the attacker may know B[].
By 4, the attacker may know Sess_9064.
Using the function 2-tuple the attacker may obtain (B[],Sess_9064).
attacker((B[],Sess_9064)).

6. The message (B[],Sess_9064) that the attacker may have by 5 may be received at input {6}.
We have Sess_9064 <> B[] & Sess_9064 <> A[].
So the message (senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])) may be sent to the attacker at output {14}.
attacker((senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[]))).

7. By 6, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[]).
attacker(sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])).

8. The message (B[],Sess_9064) that the attacker may have by 5 may be received at input {47}.
We have Sess_9064 <> A[] & Sess_9064 <> B[].
So the message Skey(skB[],sk(Sess_9064)) may be sent to the attacker at output {53}.
attacker(Skey(skB[],sk(Sess_9064))).

9. By 6, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))).
attacker(senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064)))).

10. By 9, the attacker may know senc((CreateSessionRequest,pub(skB[]),Nc_9112),Skey(skB[],sk(Sess_9064))).
By 8, the attacker may know Skey(skB[],sk(Sess_9064)).
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_9112).
attacker((CreateSessionRequest,pub(skB[]),Nc_9112)).

11. By 10, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_9112).
Using the function 3-proj-3-tuple the attacker may obtain Nc_9112.
attacker(Nc_9112).

12. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

13. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

14. By 13, the attacker may know CreateSessionRequest.
By 12, the attacker may know pub(skB[]).
By 11, the attacker may know Nc_9112.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_9112).
attacker((CreateSessionRequest,pub(skB[]),Nc_9112)).

15. By 14, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_9112).
By 7, the attacker may know sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionRequest,pub(skB[]),Nc_9112),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])).
attacker(((CreateSessionRequest,pub(skB[]),Nc_9112),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[]))).

16. We assume as hypothesis that
attacker(Sess_9089).

17. By 2, the attacker may know B[].
By 16, the attacker may know Sess_9089.
Using the function 2-tuple the attacker may obtain (B[],Sess_9089).
attacker((B[],Sess_9089)).

18. By 16, the attacker may know Sess_9089.
Using the function sk the attacker may obtain sk(Sess_9089).
attacker(sk(Sess_9089)).

19. The attacker has some term Ns_9090.
attacker(Ns_9090).

20. By 18, the attacker may know sk(Sess_9089).
Using the function pub the attacker may obtain pub(sk(Sess_9089)).
attacker(pub(sk(Sess_9089))).

21. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

22. By 21, the attacker may know CreateSessionResponse.
By 20, the attacker may know pub(sk(Sess_9089)).
By 19, the attacker may know Ns_9090.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090).
attacker((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)).

23. By 22, the attacker may know (CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)).
attacker(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090))).

24. By 23, the attacker may know h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)).
By 18, the attacker may know sk(Sess_9089).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089))).

25. The message (B[],Sess_9089) that the attacker may have by 17 may be received at input {47}.
We have Sess_9089 <> A[] & Sess_9089 <> B[].
So the message Skey(skB[],sk(Sess_9089)) may be sent to the attacker at output {53}.
attacker(Skey(skB[],sk(Sess_9089))).

26. By 22, the attacker may know (CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090).
By 25, the attacker may know Skey(skB[],sk(Sess_9089)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089)))).

27. By 26, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089))).
By 24, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089))),sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089))),sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089)))).

28. The message (B[],Sess_9089) that the attacker may have by 17 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090),Skey(skB[],sk(Sess_9089))),sign(h((CreateSessionResponse,pub(sk(Sess_9089)),Ns_9090)),sk(Sess_9089))) that the attacker may have by 27 may be received at input {15}.
The event beginCli(B[],Sess_9089,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_9089 <> B[] & Sess_9089 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

29. By 28, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]).
attacker(sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).

30. By 28, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))).
attacker(senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089)))).

31. By 30, the attacker may know senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_9089))).
By 25, the attacker may know Skey(skB[],sk(Sess_9089)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

32. By 31, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

33. By 31, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

34. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

35. By 34, the attacker may know ActivateSessionRequest.
By 12, the attacker may know pub(skB[]).
By 33, the attacker may know Login(skB[]).
By 32, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

36. By 35, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
By 29, the attacker may know sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]).
Using the function 2-tuple the attacker may obtain ((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
attacker(((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

37. The message (B[],A[]) that the attacker may have by 3 may be received at input {27}.
The message ((CreateSessionRequest,pub(skB[]),Nc_9112),sign(h((CreateSessionRequest,pub(skB[]),Nc_9112)),skB[])) that the attacker may have by 15 may be received at input {33}.
The message ((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) that the attacker may have by 36 may be received at input {39}.
So event endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))) may be executed at {42}.
end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a)) at {6} in copy a_9115

new Nc creating Nc_9355 at {12} in copy a_9115

out(c, (senc((CreateSessionRequest,pub(skB),Nc_9355),Skey(skB,sk(a))),sign(h((CreateSessionRequest,pub(skB),Nc_9355)),skB))) at {14} in copy a_9115

in(c, (B,a_9116)) at {6} in copy a_9117

new Nc creating Nc_9120 at {12} in copy a_9117

out(c, (senc((CreateSessionRequest,pub(skB),Nc_9120),Skey(skB,sk(a_9116))),sign(h((CreateSessionRequest,pub(skB),Nc_9120)),skB))) at {14} in copy a_9117

in(c, (B,A)) at {27} in copy a_9119

in(c, (B,a)) at {47} in copy a_9114

out(c, Skey(skB,sk(a))) at {53} in copy a_9114

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_9113),Skey(skB,sk(a))),sign(h((CreateSessionResponse,pub(sk(a)),a_9113)),sk(a)))) at {15} in copy a_9115

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {19} in copy a_9115

out(c, (senc((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB)),Skey(skB,sk(a))),sign(h((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))),skB))) at {21} in copy a_9115

in(c, (B,a_9116)) at {47} in copy a_9118

out(c, Skey(skB,sk(a_9116))) at {53} in copy a_9118

in(c, ((CreateSessionRequest,pub(skB),Nc_9120),sign(h((CreateSessionRequest,pub(skB),Nc_9120)),skB))) at {33} in copy a_9119

new Ns_68 creating Ns_9698 at {36} in copy a_9119

out(c, ((CreateSessionResponse,pub(skA),Ns_9698),sign(h((CreateSessionResponse,pub(skA),Ns_9698)),skA))) at {38} in copy a_9119

in(c, ((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB)),sign(h((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))),skB))) at {39} in copy a_9119

event(endSrv(B,A,(Login(skB),Passwd(skB)))) at {42} in copy a_9119

The event endSrv(B,A,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 150 rules. 16 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 150 rules. 16 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 150 rules. 16 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_31285.
attacker(Sess_31285).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_31285.
Using the function 2-tuple the attacker may obtain (A[],Sess_31285).
attacker((A[],Sess_31285)).

4. The message (A[],Sess_31285) that the attacker may have by 3 may be received at input {47}.
We have Sess_31285 <> B[] & Sess_31285 <> A[].
So the message Skey(skA[],sk(Sess_31285)) may be sent to the attacker at output {53}.
attacker(Skey(skA[],sk(Sess_31285))).

5. By 1, the attacker may know Sess_31285.
Using the function sk the attacker may obtain sk(Sess_31285).
attacker(sk(Sess_31285)).

6. The attacker has some term Ns_31286.
attacker(Ns_31286).

7. By 5, the attacker may know sk(Sess_31285).
Using the function pub the attacker may obtain pub(sk(Sess_31285)).
attacker(pub(sk(Sess_31285))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_31285)).
By 6, the attacker may know Ns_31286.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286).
attacker((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)).
attacker(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)).
By 5, the attacker may know sk(Sess_31285).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286).
By 4, the attacker may know Skey(skA[],sk(Sess_31285)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285))),sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285))),sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285)))).

14. The message (A[],Sess_31285) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286),Skey(skA[],sk(Sess_31285))),sign(h((CreateSessionResponse,pub(sk(Sess_31285)),Ns_31286)),sk(Sess_31285))) that the attacker may have by 13 may be received at input {15}.
We have Sess_31285 <> B[] & Sess_31285 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285))).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_31285))).
By 4, the attacker may know Skey(skA[],sk(Sess_31285)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_31296)) at {6} in copy a_31298

new Nc creating Nc_31500 at {12} in copy a_31298

out(c, (senc((CreateSessionRequest,pub(skA),Nc_31500),Skey(skA,sk(a_31296))),sign(h((CreateSessionRequest,pub(skA),Nc_31500)),skA))) at {14} in copy a_31298

in(c, (A,a_31296)) at {47} in copy a_31299

out(c, Skey(skA,sk(a_31296))) at {53} in copy a_31299

in(c, (senc((CreateSessionResponse,pub(sk(a_31296)),a_31297),Skey(skA,sk(a_31296))),sign(h((CreateSessionResponse,pub(sk(a_31296)),a_31297)),sk(a_31296)))) at {15} in copy a_31298

event(beginCli(A,a_31296,(Login(skA),Passwd(skA)))) at {19} in copy a_31298

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_31296))),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_31298

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 150 rules. 16 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_38792.
attacker(Sess_38792).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_38792.
Using the function 2-tuple the attacker may obtain (A[],Sess_38792).
attacker((A[],Sess_38792)).

4. The message (A[],Sess_38792) that the attacker may have by 3 may be received at input {47}.
We have Sess_38792 <> B[] & Sess_38792 <> A[].
So the message Skey(skA[],sk(Sess_38792)) may be sent to the attacker at output {53}.
attacker(Skey(skA[],sk(Sess_38792))).

5. By 1, the attacker may know Sess_38792.
Using the function sk the attacker may obtain sk(Sess_38792).
attacker(sk(Sess_38792)).

6. The attacker has some term Ns_38793.
attacker(Ns_38793).

7. By 5, the attacker may know sk(Sess_38792).
Using the function pub the attacker may obtain pub(sk(Sess_38792)).
attacker(pub(sk(Sess_38792))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_38792)).
By 6, the attacker may know Ns_38793.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793).
attacker((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)).
attacker(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)).
By 5, the attacker may know sk(Sess_38792).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793).
By 4, the attacker may know Skey(skA[],sk(Sess_38792)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792))),sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792))),sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792)))).

14. The message (A[],Sess_38792) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793),Skey(skA[],sk(Sess_38792))),sign(h((CreateSessionResponse,pub(sk(Sess_38792)),Ns_38793)),sk(Sess_38792))) that the attacker may have by 13 may be received at input {15}.
We have Sess_38792 <> B[] & Sess_38792 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792))).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_38792))).
By 4, the attacker may know Skey(skA[],sk(Sess_38792)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_38803)) at {6} in copy a_38805

new Nc creating Nc_39007 at {12} in copy a_38805

out(c, (senc((CreateSessionRequest,pub(skA),Nc_39007),Skey(skA,sk(a_38803))),sign(h((CreateSessionRequest,pub(skA),Nc_39007)),skA))) at {14} in copy a_38805

in(c, (A,a_38803)) at {47} in copy a_38806

out(c, Skey(skA,sk(a_38803))) at {53} in copy a_38806

in(c, (senc((CreateSessionResponse,pub(sk(a_38803)),a_38804),Skey(skA,sk(a_38803))),sign(h((CreateSessionResponse,pub(sk(a_38803)),a_38804)),sk(a_38803)))) at {15} in copy a_38805

event(beginCli(A,a_38803,(Login(skA),Passwd(skA)))) at {19} in copy a_38805

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_38803))),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_38805

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
