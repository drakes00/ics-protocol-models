Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else sk(Cli))) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(pkCli,pkSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {14}in(c, (em2: bitstring,sigM2: bitstring));
    {15}let m2: bitstring = sdec(em2,K) in
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {18}new CSC: bitstring;
        {19}event beginCli(Cli,Sess,(Login(pkCli,pkSess),Passwd(pkCli,pkSess)));
        {20}let m3: bitstring = (CSC,Login(pkCli,pkSess),Passwd(pkCli,pkSess)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else sk(Sess_60))) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(pkCli_62,pkSess_64) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {35}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {36}new SSC_67: bitstring;
            {37}new Ns2_68: bitstring;
            {38}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {39}out(c, (m2_69,sign(h(m2_69),skSess_63)));
            {40}in(c, (m3_70: bitstring,sigM3: bitstring));
            {41}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {42}let (CSC_71: bitstring,=Login(pkCli_62,pkSess_64),=Passwd(pkCli_62,pkSess_64)) = m3_70 in
                {43}event endSrv(Cli_59,Sess_60,(Login(pkCli_62,pkSess_64),Passwd(pkCli_62,pkSess_64)));
                {44}let m4_72: bitstring = ActivateSessionResponse in
                {45}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {46}!
    {47}in(c, (X: host,Y: host));
    {48}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {49}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {50}if ((X,Y) = (A,B)) then
        0
    else
        {51}if ((X,Y) = (B,A)) then
            0
        else
            {52}out(c, Skey(pub(skX),pub(skY)))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 104 rules. 52 rules in the queue.
400 rules inserted. The rule base contains 154 rules. 38 rules in the queue.
600 rules inserted. The rule base contains 208 rules. 14 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: X_11873 <> B[] && X_11873 <> A[] && begin(beginCli(X_11873,B[],(Login(pub(sk(X_11873)),pub(skB[])),Passwd(pub(sk(X_11873)),pub(skB[]))))) && attacker(X_11873) -> end(endSrv(X_11873,B[],(Login(pub(sk(X_11873)),pub(skB[])),Passwd(pub(sk(X_11873)),pub(skB[])))))
goal reachable: X_11874 <> B[] && X_11874 <> A[] && begin(beginCli(X_11874,A[],(Login(pub(sk(X_11874)),pub(skA[])),Passwd(pub(sk(X_11874)),pub(skA[]))))) && attacker(X_11874) -> end(endSrv(X_11874,A[],(Login(pub(sk(X_11874)),pub(skA[])),Passwd(pub(sk(X_11874)),pub(skA[])))))
goal reachable: begin(beginCli(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[]))))) -> end(endSrv(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[])))))
goal reachable: begin(beginCli(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[]))))) -> end(endSrv(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[])))))
goal reachable: Y_11875 <> B[] && Y_11875 <> A[] && begin(beginCli(B[],Y_11875,(Login(pub(skB[]),pub(sk(Y_11875))),Passwd(pub(skB[]),pub(sk(Y_11875)))))) && attacker(Y_11875) -> end(endSrv(B[],Y_11875,(Login(pub(skB[]),pub(sk(Y_11875))),Passwd(pub(skB[]),pub(sk(Y_11875))))))
goal reachable: Y_11876 <> B[] && Y_11876 <> A[] && begin(beginCli(A[],Y_11876,(Login(pub(skA[]),pub(sk(Y_11876))),Passwd(pub(skA[]),pub(sk(Y_11876)))))) && attacker(Y_11876) -> end(endSrv(A[],Y_11876,(Login(pub(skA[]),pub(sk(Y_11876))),Passwd(pub(skA[]),pub(sk(Y_11876))))))
goal reachable: Y_11878 <> B[] && Y_11878 <> A[] && X_11877 <> B[] && X_11877 <> A[] && begin(beginCli(X_11877,Y_11878,(Login(pub(sk(X_11877)),pub(sk(Y_11878))),Passwd(pub(sk(X_11877)),pub(sk(Y_11878)))))) && attacker(X_11877) && attacker(Y_11878) -> end(endSrv(X_11877,Y_11878,(Login(pub(sk(X_11877)),pub(sk(Y_11878))),Passwd(pub(sk(X_11877)),pub(sk(Y_11878))))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(pub(skB[]),pub(skA[])))
Completing...
200 rules inserted. The rule base contains 104 rules. 41 rules in the queue.
400 rules inserted. The rule base contains 144 rules. 40 rules in the queue.
Starting query not attacker(Skey(pub(skB[]),pub(skA[])))
RESULT not attacker(Skey(pub(skB[]),pub(skA[]))) is true.
-- Query not attacker(Skey(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 104 rules. 41 rules in the queue.
400 rules inserted. The rule base contains 144 rules. 40 rules in the queue.
Starting query not attacker(Skey(pub(skA[]),pub(skB[])))
RESULT not attacker(Skey(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Passwd(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 104 rules. 41 rules in the queue.
400 rules inserted. The rule base contains 144 rules. 40 rules in the queue.
Starting query not attacker(Passwd(pub(skA[]),pub(skB[])))
RESULT not attacker(Passwd(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Login(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 104 rules. 41 rules in the queue.
400 rules inserted. The rule base contains 144 rules. 40 rules in the queue.
Starting query not attacker(Login(pub(skA[]),pub(skB[])))
RESULT not attacker(Login(pub(skA[]),pub(skB[]))) is true.
