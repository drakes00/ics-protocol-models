(*  OpcUaClient --[CreateSessionRequest]--> SessionEndpoint
    SessionEndpoint --[Ns2]--> OpcUaClient
    OpcUaClient --[pkCli, Login, Password]--> SessionEndpoint
    SessionEndpoint --[ActivateSessionResponse]--> OpcUaClient
*)

free c: channel.


(* Hosts *)
type host.
free A, B: host.


(* Hash function *)
fun h(bitstring): bitstring.


(* Symetric key crypto *)
fun senc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, k: bitstring ; sdec(senc(x, k), k) = x.


(* Signatures *)
fun sk(host): bitstring.
fun pub(bitstring): bitstring.
fun sign(bitstring, bitstring): bitstring.
reduc forall x:bitstring, s:bitstring, k:bitstring ; verify(x, sign(x, k), pub(k)) = true.


(* Constants *)
const CreateSessionRequest: bitstring.
const CreateSessionResponse: bitstring.
const ActivateSessionRequest: bitstring.
const ActivateSessionResponse: bitstring.


(* Private keys *)
free skA: bitstring [private].
free skB: bitstring [private].


(* Secrets *)
fun Login(bitstring): bitstring.
fun Passwd(bitstring): bitstring.


(* Events *)
event beginCli(host, host, bitstring).
event endSrv(host, host, bitstring).
event beginSrv(host, host, bitstring).
event endCli(host, host, bitstring).


(* Goals *)
query attacker(Passwd(skA)).

query X: host, Y: host, N: bitstring ; event(endSrv(X, Y, N)) ==> event(beginCli(X, Y, N)).
query X: host, Y: host, N: bitstring ; event(endCli(X, Y, N)) ==> event(beginSrv(X, Y, N)).


let client(skA: bitstring, skB: bitstring, ch: channel) = 
    in(c, (Cli: host, Sess: host));
    new K: bitstring;
    out(ch, (Cli, Sess, K));
    let skCli = if Cli = A then skA else if Cli = B then skB in
    let pkCli = pub(skCli) in
    let skSess = if Sess = A then skA else if Sess = B then skB else sk(Sess) in
    let pkSess = pub(skSess) in
    let tmp = if Sess <> A && Sess <> B then K else CreateSessionRequest in out(c, tmp);

    (* Role starting *)
    new Nc: bitstring;
    let m1 = (CreateSessionRequest, pkCli, Nc) in
    out(c, m1);

    in(c, m2: bitstring);
    let (=CreateSessionResponse, =pkSess, =Nc, Ns: bitstring) = m2 in

    event beginCli(Cli, Sess, (Login(pkCli), Passwd(skCli)));
    let m3 = (ActivateSessionRequest, pkCli, Login(pkCli), Passwd(skCli)) in
    out(c, m3);

    in(c, m4: bitstring);
    let (=ActivateSessionResponse, Ns2: bitstring) = m4 in
    if Sess = A || Sess = B then
    event endCli(Sess, Cli, Ns).


let sess(skA: bitstring, skB: bitstring, ch: channel) = 
    in(ch, (Cli: host, Sess: host, K: bitstring));
    let skCli = if Cli = A then skA else if Cli = B then skB else sk(Cli) in
    let pkCli = pub(skCli) in
    let skSess = if Sess = A then skA else if Sess = B then skB in
    let pkSess = pub(skSess) in
    let tmp = if Cli <> A && Cli <> B then K else CreateSessionRequest in out(c, tmp);

    (* Role starting *)
    in(c, m1: bitstring);
    let (=CreateSessionRequest, =pkCli, Nc: bitstring) = m1 in

    new Ns: bitstring;
    event beginSrv(Sess, Cli, Ns);
    let m2 = (CreateSessionResponse, pkSess, Nc, Ns) in
    out(c, m2);

    in(c, m3: bitstring);
    let (=ActivateSessionRequest, =pkCli, =Login(pkCli), =Passwd(skCli)) = m3 in

    new Ns2: bitstring;
    let m4 = (ActivateSessionResponse, Ns2) in
    out(c, m4);
    if Cli = A || Cli = B then
    event endSrv(Cli, Sess, (Login(pkCli), Passwd(skCli))).


process
    let pkA = pub(skA) in out(c, pkA);
    let pkB = pub(skB) in out(c, pkB);

    !(new ch: channel;
      client(skA, skB, ch)  |
      sess(skA, skB, ch)
    )
