Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, m1);
    {15}in(c, m2: bitstring);
    {16}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {17}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {18}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, (m1_66: bitstring,sigM1: bitstring));
    {30}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {31}let (=CreateSessionRequest,=pkCli_62,Nc_67: bitstring) = m1_66 in
        {32}new Ns_68: bitstring;
        {33}let m2_69: bitstring = (CreateSessionResponse,pkSess_64,Ns_68) in
        {34}out(c, (m2_69,sign(h(m2_69),skSess_63)));
        {35}in(c, (m3_70: bitstring,sigM3: bitstring));
        {36}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
            0
        else
            {37}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
            {38}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
            {39}new Ns2_71: bitstring;
            {40}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {41}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {42}!
    {43}in(c, (X: host,Y: host));
    {44}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {45}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {46}if ((X,Y) = (A,B)) then
        0
    else
        {47}if ((X,Y) = (B,A)) then
            0
        else
            {48}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 100 rules. 38 rules in the queue.
400 rules inserted. The rule base contains 116 rules. 36 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 84 rules. 12 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 84 rules. 12 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 84 rules. 12 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_23095.
attacker(Ns_23095).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_23095.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_23095).
attacker((CreateSessionResponse,pub(skA[]),Ns_23095)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (CreateSessionResponse,pub(skA[]),Ns_23095) that the attacker may have by 6 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_23101

new Nc creating Nc_23256 at {12} in copy a_23101

out(c, (CreateSessionRequest,pub(skA),Nc_23256)) at {14} in copy a_23101

in(c, (CreateSessionResponse,pub(skA),a)) at {15} in copy a_23101

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_23101

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {19} in copy a_23101

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 84 rules. 12 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_28693.
attacker(Ns_28693).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_28693.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_28693).
attacker((CreateSessionResponse,pub(skA[]),Ns_28693)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (CreateSessionResponse,pub(skA[]),Ns_28693) that the attacker may have by 6 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_28700

new Nc creating Nc_28856 at {12} in copy a_28700

out(c, (CreateSessionRequest,pub(skA),Nc_28856)) at {14} in copy a_28700

in(c, (CreateSessionResponse,pub(skA),a_28699)) at {15} in copy a_28700

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_28700

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {19} in copy a_28700

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
