Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {26}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {27}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {28}let pkCli_63: bitstring = pub(skCli_62) in
    {29}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {30}let pkSess_65: bitstring = pub(skSess_64) in
    {31}in(c, (m1_66: bitstring,sigM1: bitstring));
    {32}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {33}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {34}new Ns_68: bitstring;
        {35}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {36}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {37}in(c, (m3_70: bitstring,sigM3: bitstring));
        {38}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {39}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {40}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {41}new Ns2_71: bitstring;
            {42}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {43}out(c, (m4_72,sign(h(m4_72),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 113 rules. 49 rules in the queue.
400 rules inserted. The rule base contains 164 rules. 62 rules in the queue.
600 rules inserted. The rule base contains 184 rules. 42 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 94 rules. 34 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_12807.
attacker(Ns_12807).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_12807.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_12807).
attacker((CreateSessionResponse,pub(skA[]),Ns_12807)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_12807) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_12896 at {6} in copy a_12813

in(c, (A,A)) at {7} in copy a_12813

new K creating K_12967 at {12} in copy a_12813

out(ch_12896, (A,A,K_12967)) at {13} in copy a_12813 received at {26} in copy a_12813

out(c, CreateSessionRequest) at {15} in copy a_12813

new Nc creating Nc_13057 at {16} in copy a_12813

out(c, (CreateSessionRequest,pub(skA),Nc_13057)) at {18} in copy a_12813

in(c, (CreateSessionResponse,pub(skA),a)) at {19} in copy a_12813

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_12813

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_12813

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 94 rules. 34 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_18122.
attacker(Ns_18122).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_18122.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_18122).
attacker((CreateSessionResponse,pub(skA[]),Ns_18122)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_18122) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_18213 at {6} in copy a_18129

in(c, (A,A)) at {7} in copy a_18129

new K creating K_18284 at {12} in copy a_18129

out(ch_18213, (A,A,K_18284)) at {13} in copy a_18129 received at {26} in copy a_18129

out(c, CreateSessionRequest) at {15} in copy a_18129

new Nc creating Nc_18374 at {16} in copy a_18129

out(c, (CreateSessionRequest,pub(skA),Nc_18374)) at {18} in copy a_18129

in(c, (CreateSessionResponse,pub(skA),a_18128)) at {19} in copy a_18129

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_18129

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_18129

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
