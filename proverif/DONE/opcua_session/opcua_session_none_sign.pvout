File "opcua_session_none_sign.pv", line 70, character 9 - line 70, character 10:
Warning: identifier K rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}new K_59: bitstring;
    {15}out(ch, (Cli,Sess,K_59));
    {16}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K_59 else CreateSessionRequest) in
    {17}out(c, tmp);
    {18}new Nc: bitstring;
    {19}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {20}out(c, m1);
    {21}in(c, m2: bitstring);
    {22}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
    {23}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
    {24}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli)) in
    {25}out(c, m3);
    {26}in(c, m4: bitstring);
    {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {28}if ((Sess = A) || (Sess = B)) then
    {29}event endCli(Sess,Cli,Ns)
) | (
    {30}in(ch, (Cli_60: host,Sess_61: host,K_62: bitstring));
    {31}let skCli_63: bitstring = (if (Cli_60 = A) then skA else (if (Cli_60 = B) then skB else sk(Cli_60))) in
    {32}let pkCli_64: bitstring = pub(skCli_63) in
    {33}let skSess_65: bitstring = (if (Sess_61 = A) then skA else (if (Sess_61 = B) then skB else fail-any)) in
    {34}let pkSess_66: bitstring = pub(skSess_65) in
    {35}let tmp_67: bitstring = (if ((Cli_60 <> A) && (Cli_60 <> B)) then K_62 else CreateSessionRequest) in
    {36}out(c, tmp_67);
    {37}in(c, (m1_68: bitstring,sigM1: bitstring));
    {38}if (verify(h(m1_68),sigM1,pkCli_64) <> true) then
        0
    else
        {39}let (=CreateSessionRequest,=pkCli_64,Nc_69: bitstring) = m1_68 in
        {40}new Ns_70: bitstring;
        {41}event beginSrv(Sess_61,Cli_60,Ns_70);
        {42}let m2_71: bitstring = (CreateSessionResponse,pkSess_66,Nc_69,Ns_70) in
        {43}out(c, (m2_71,sign(h(m2_71),skSess_65)));
        {44}in(c, (m3_72: bitstring,sigM3: bitstring));
        {45}if (verify(h(m3_72),sigM3,pkCli_64) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=pkCli_64,=Login(pkCli_64),=Passwd(skCli_63)) = m3_72 in
            {47}new Ns2_73: bitstring;
            {48}let m4_74: bitstring = (ActivateSessionResponse,Ns2_73) in
            {49}out(c, (m4_74,sign(h(m4_74),skSess_65)));
            {50}if ((Cli_60 = A) || (Cli_60 = B)) then
            {51}event endSrv(Cli_60,Sess_61,(Login(pkCli_64),Passwd(skCli_63)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 106 rules. 52 rules in the queue.
400 rules inserted. The rule base contains 140 rules. 38 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_7992) -> end(endCli(A[],B[],N_7992))
Abbreviations:
Nc_8019 = Nc[Sess = A[],Cli = B[],!1 = @sid_8014]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_8018).

5. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skB[]),Nc_8019) may be sent to the attacker at output {20}.
attacker((CreateSessionRequest,pub(skB[]),Nc_8019)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_8019).
Using the function 3-proj-3-tuple the attacker may obtain Nc_8019.
attacker(Nc_8019).

7. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skA[]).
By 6, the attacker may know Nc_8019.
By 4, the attacker may know N_8018.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_8019,N_8018).
attacker((CreateSessionResponse,pub(skA[]),Nc_8019,N_8018)).

10. The attacker has some term Ns2_8013.
attacker(Ns2_8013).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_8013.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_8013).
attacker((ActivateSessionResponse,Ns2_8013)).

13. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_8019,N_8018) that the attacker may have by 9 may be received at input {21}.
The message (ActivateSessionResponse,Ns2_8013) that the attacker may have by 12 may be received at input {26}.
So event endCli(A[],B[],N_8018) may be executed at {29}.
end(endCli(A[],B[],N_8018)).


Could not find a trace corresponding to this derivation.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) cannot be proved.
-- Query event(endSrv(X_8276,Y_8277,N_8278)) ==> event(beginCli(X_8276,Y_8277,N_8278))
Completing...
200 rules inserted. The rule base contains 116 rules. 58 rules in the queue.
400 rules inserted. The rule base contains 140 rules. 48 rules in the queue.
Starting query event(endSrv(X_8276,Y_8277,N_8278)) ==> event(beginCli(X_8276,Y_8277,N_8278))
RESULT event(endSrv(X_8276,Y_8277,N_8278)) ==> event(beginCli(X_8276,Y_8277,N_8278)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 102 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 140 rules. 34 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_21521 = Nc[Sess = A[],Cli = A[],!1 = @sid_21515]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_21516.
attacker(Ns_21516).

4. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_21521) may be sent to the attacker at output {20}.
attacker((CreateSessionRequest,pub(skA[]),Nc_21521)).

5. By 4, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_21521).
Using the function 3-proj-3-tuple the attacker may obtain Nc_21521.
attacker(Nc_21521).

6. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(skA[]).
By 5, the attacker may know Nc_21521.
By 3, the attacker may know Ns_21516.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_21521,Ns_21516).
attacker((CreateSessionResponse,pub(skA[]),Nc_21521,Ns_21516)).

9. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_21521,Ns_21516) that the attacker may have by 8 may be received at input {21}.
So the message (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])) may be sent to the attacker at output {25}.
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

10. By 9, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


Could not find a trace corresponding to this derivation.
RESULT not attacker(Passwd(skA[])) cannot be proved.
