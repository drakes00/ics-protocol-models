Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {36}new Ns_68: bitstring;
        {37}event beginSrv(Sess_60,Cli_59,Ns_68);
        {38}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Nc_67,Ns_68) in
        {39}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {40}in(c, (m3_70: bitstring,sigM3: bitstring));
        {41}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {42}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {43}new Ns2_71: bitstring;
            {44}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {45}out(c, (m4_72,sign(h(m4_72),skSess_64)));
            {46}if ((Cli_59 = A) || (Cli_59 = B)) then
            {47}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 92 rules. 40 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_6626) -> end(endCli(A[],B[],N_6626))
Abbreviations:
Nc_6653 = Nc[Sess = A[],Cli = B[],!1 = @sid_6648]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_6652).

5. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skB[]),Nc_6653) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skB[]),Nc_6653)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_6653).
Using the function 3-proj-3-tuple the attacker may obtain Nc_6653.
attacker(Nc_6653).

7. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skA[]).
By 6, the attacker may know Nc_6653.
By 4, the attacker may know N_6652.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_6653,N_6652).
attacker((CreateSessionResponse,pub(skA[]),Nc_6653,N_6652)).

10. The attacker has some term Ns2_6647.
attacker(Ns2_6647).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_6647.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_6647).
attacker((ActivateSessionResponse,Ns2_6647)).

13. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_6653,N_6652) that the attacker may have by 9 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_6647) that the attacker may have by 12 may be received at input {24}.
So event endCli(A[],B[],N_6652) may be executed at {27}.
end(endCli(A[],B[],N_6652)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_6739 at {6} in copy a_6655

in(c, (B,A)) at {7} in copy a_6655

new K creating K_6810 at {12} in copy a_6655

out(ch_6739, (B,A,K_6810)) at {13} in copy a_6655 received at {28} in copy a_6655

out(c, CreateSessionRequest) at {15} in copy a_6655

new Nc creating Nc_6656 at {16} in copy a_6655

out(c, (CreateSessionRequest,pub(skB),Nc_6656)) at {18} in copy a_6655

in(c, (CreateSessionResponse,pub(skA),Nc_6656,a)) at {19} in copy a_6655

event(beginCli(B,A,(Login(skB),Passwd(skB)))) at {21} in copy a_6655

out(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_6655

in(c, (ActivateSessionResponse,a_6654)) at {24} in copy a_6655

event(endCli(A,B,a)) at {27} in copy a_6655

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_6928,Y_6929,N_6930)) ==> event(beginCli(X_6928,Y_6929,N_6930))
Completing...
200 rules inserted. The rule base contains 105 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 160 rules. 60 rules in the queue.
600 rules inserted. The rule base contains 198 rules. 22 rules in the queue.
Starting query event(endSrv(X_6928,Y_6929,N_6930)) ==> event(beginCli(X_6928,Y_6929,N_6930))
RESULT event(endSrv(X_6928,Y_6929,N_6930)) ==> event(beginCli(X_6928,Y_6929,N_6930)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 88 rules. 36 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_20151 = Nc[Sess = A[],Cli = A[],!1 = @sid_20145]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_20146.
attacker(Ns_20146).

4. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_20151) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skA[]),Nc_20151)).

5. By 4, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_20151).
Using the function 3-proj-3-tuple the attacker may obtain Nc_20151.
attacker(Nc_20151).

6. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(skA[]).
By 5, the attacker may know Nc_20151.
By 3, the attacker may know Ns_20146.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_20151,Ns_20146).
attacker((CreateSessionResponse,pub(skA[]),Nc_20151,Ns_20146)).

9. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_20151,Ns_20146) that the attacker may have by 8 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

10. By 9, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_20238 at {6} in copy a_20152

in(c, (A,A)) at {7} in copy a_20152

new K creating K_20309 at {12} in copy a_20152

out(ch_20238, (A,A,K_20309)) at {13} in copy a_20152 received at {28} in copy a_20152

out(c, CreateSessionRequest) at {15} in copy a_20152

new Nc creating Nc_20154 at {16} in copy a_20152

out(c, (CreateSessionRequest,pub(skA),Nc_20154)) at {18} in copy a_20152

in(c, (CreateSessionResponse,pub(skA),Nc_20154,a_20153)) at {19} in copy a_20152

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_20152

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_20152

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 88 rules. 36 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
Nc_25901 = Nc[Sess = A[],Cli = A[],!1 = @sid_25895]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_25896.
attacker(Ns_25896).

4. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_25901) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skA[]),Nc_25901)).

5. By 4, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_25901).
Using the function 3-proj-3-tuple the attacker may obtain Nc_25901.
attacker(Nc_25901).

6. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(skA[]).
By 5, the attacker may know Nc_25901.
By 3, the attacker may know Ns_25896.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_25901,Ns_25896).
attacker((CreateSessionResponse,pub(skA[]),Nc_25901,Ns_25896)).

9. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_25901,Ns_25896) that the attacker may have by 8 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

10. By 9, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_25988 at {6} in copy a_25902

in(c, (A,A)) at {7} in copy a_25902

new K creating K_26059 at {12} in copy a_25902

out(ch_25988, (A,A,K_26059)) at {13} in copy a_25902 received at {28} in copy a_25902

out(c, CreateSessionRequest) at {15} in copy a_25902

new Nc creating Nc_25904 at {16} in copy a_25902

out(c, (CreateSessionRequest,pub(skA),Nc_25904)) at {18} in copy a_25902

in(c, (CreateSessionResponse,pub(skA),Nc_25904,a_25903)) at {19} in copy a_25902

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_25902

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_25902

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
