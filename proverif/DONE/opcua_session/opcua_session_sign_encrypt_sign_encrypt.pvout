Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {14}in(c, (em2: bitstring,sigM2: bitstring));
    {15}let m2: bitstring = sdec(em2,K) in
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {18}new CSC: bitstring;
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (CSC,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}let m1_66: bitstring = sdec(em1,K_65) in
    {35}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {36}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {37}new SSC_67: bitstring;
            {38}new Ns2_68: bitstring;
            {39}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {40}out(c, (senc(m2_69,K_65),sign(h(m2_69),skSess_63)));
            {41}in(c, (em3: bitstring,sigM3: bitstring));
            {42}let m3_70: bitstring = sdec(em3,K_65) in
            {43}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {44}let (CSC_71: bitstring,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
                {45}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
                {46}let m4_72: bitstring = ActivateSessionResponse in
                {47}out(c, (senc(m4_72,K_65),sign(h(m4_72),skSess_63)))
) | (
    {48}!
    {49}in(c, (X: host,Y: host));
    {50}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {51}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {52}if ((X,Y) = (A,B)) then
        0
    else
        {53}if ((X,Y) = (B,A)) then
            0
        else
            {54}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 115 rules. 38 rules in the queue.
400 rules inserted. The rule base contains 186 rules. 42 rules in the queue.
600 rules inserted. The rule base contains 229 rules. 18 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Sess_8418 <> B[] && Sess_8418 <> A[] && begin(beginCli(B[],Sess_8418,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_8418) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
CSC_8577 = CSC[sigM2 = sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555)),em2 = senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))),Sess = Sess_8555,Cli = B[],!1 = @sid_8558]
CSC_8578 = CSC[sigM2 = sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555)),em2 = senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))),Sess = Sess_8555,Cli = B[],!1 = @sid_8483]
CSC_8579 = CSC[sigM2 = sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555)),em2 = senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))),Sess = Sess_8555,Cli = B[],!1 = @sid_8450]

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. The message (B[],B[]) that the attacker may have by 2 may be received at input {6}.
So the message (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])) may be sent to the attacker at output {13}.
attacker((senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[]))).

4. By 3, the attacker may know (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(CreateSessionRequest),skB[]).
attacker(sign(h(CreateSessionRequest),skB[])).

5. By 3, the attacker may know (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc(CreateSessionRequest,Skey(skB[],skB[])).
attacker(senc(CreateSessionRequest,Skey(skB[],skB[]))).

6. By 5, the attacker may know senc(CreateSessionRequest,Skey(skB[],skB[])).
By 4, the attacker may know sign(h(CreateSessionRequest),skB[]).
Using the function 2-tuple the attacker may obtain (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])).
attacker((senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[]))).

7. We assume as hypothesis that
attacker(Sess_8555).

8. By 1, the attacker may know B[].
By 7, the attacker may know Sess_8555.
Using the function 2-tuple the attacker may obtain (B[],Sess_8555).
attacker((B[],Sess_8555)).

9. By 7, the attacker may know Sess_8555.
Using the function sk the attacker may obtain sk(Sess_8555).
attacker(sk(Sess_8555)).

10. The attacker has some term Ns2_8557.
attacker(Ns2_8557).

11. The attacker has some term SSC_8556.
attacker(SSC_8556).

12. By 11, the attacker may know SSC_8556.
By 10, the attacker may know Ns2_8557.
Using the function 2-tuple the attacker may obtain (SSC_8556,Ns2_8557).
attacker((SSC_8556,Ns2_8557)).

13. By 12, the attacker may know (SSC_8556,Ns2_8557).
Using the function h the attacker may obtain h((SSC_8556,Ns2_8557)).
attacker(h((SSC_8556,Ns2_8557))).

14. By 13, the attacker may know h((SSC_8556,Ns2_8557)).
By 9, the attacker may know sk(Sess_8555).
Using the function sign the attacker may obtain sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555)).
attacker(sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555))).

15. The message (B[],Sess_8555) that the attacker may have by 8 may be received at input {49}.
We have Sess_8555 <> B[] & Sess_8555 <> A[].
So the message Skey(skB[],sk(Sess_8555)) may be sent to the attacker at output {54}.
attacker(Skey(skB[],sk(Sess_8555))).

16. By 12, the attacker may know (SSC_8556,Ns2_8557).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function senc the attacker may obtain senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))).
attacker(senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555)))).

17. By 16, the attacker may know senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))).
By 14, the attacker may know sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555)).
Using the function 2-tuple the attacker may obtain (senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555))).
attacker((senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555)))).

18. The message (B[],Sess_8555) that the attacker may have by 8 may be received at input {6}.
The message (senc((SSC_8556,Ns2_8557),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8556,Ns2_8557)),sk(Sess_8555))) that the attacker may have by 17 may be received at input {14}.
The event beginCli(B[],Sess_8555,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_8555 <> B[] & Sess_8555 <> A[].
So the message (senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[]))).

19. By 18, the attacker may know (senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[]).
attacker(sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])).

20. The message (B[],B[]) that the attacker may have by 2 may be received at input {49}.
So the message Skey(skB[],skB[]) may be sent to the attacker at output {54}.
attacker(Skey(skB[],skB[])).

21. The attacker has some term Ns2_8449.
attacker(Ns2_8449).

22. The attacker has some term SSC_8448.
attacker(SSC_8448).

23. By 22, the attacker may know SSC_8448.
By 21, the attacker may know Ns2_8449.
Using the function 2-tuple the attacker may obtain (SSC_8448,Ns2_8449).
attacker((SSC_8448,Ns2_8449)).

24. By 23, the attacker may know (SSC_8448,Ns2_8449).
Using the function h the attacker may obtain h((SSC_8448,Ns2_8449)).
attacker(h((SSC_8448,Ns2_8449))).

25. By 24, the attacker may know h((SSC_8448,Ns2_8449)).
By 9, the attacker may know sk(Sess_8555).
Using the function sign the attacker may obtain sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555)).
attacker(sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555))).

26. By 23, the attacker may know (SSC_8448,Ns2_8449).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function senc the attacker may obtain senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))).
attacker(senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555)))).

27. By 26, the attacker may know senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))).
By 25, the attacker may know sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555)).
Using the function 2-tuple the attacker may obtain (senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555))).
attacker((senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555)))).

28. The message (B[],Sess_8555) that the attacker may have by 8 may be received at input {6}.
The message (senc((SSC_8448,Ns2_8449),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8448,Ns2_8449)),sk(Sess_8555))) that the attacker may have by 27 may be received at input {14}.
The event beginCli(B[],Sess_8555,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_8555 <> B[] & Sess_8555 <> A[].
So the message (senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8579,Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8579,Login(skB[]),Passwd(skB[]))),skB[]))).

29. By 28, the attacker may know (senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8579,Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
attacker(senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555)))).

30. By 29, the attacker may know senc((CSC_8579,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function sdec the attacker may obtain (CSC_8579,Login(skB[]),Passwd(skB[])).
attacker((CSC_8579,Login(skB[]),Passwd(skB[]))).

31. By 30, the attacker may know (CSC_8579,Login(skB[]),Passwd(skB[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

32. The attacker has some term Ns2_8482.
attacker(Ns2_8482).

33. The attacker has some term SSC_8481.
attacker(SSC_8481).

34. By 33, the attacker may know SSC_8481.
By 32, the attacker may know Ns2_8482.
Using the function 2-tuple the attacker may obtain (SSC_8481,Ns2_8482).
attacker((SSC_8481,Ns2_8482)).

35. By 34, the attacker may know (SSC_8481,Ns2_8482).
Using the function h the attacker may obtain h((SSC_8481,Ns2_8482)).
attacker(h((SSC_8481,Ns2_8482))).

36. By 35, the attacker may know h((SSC_8481,Ns2_8482)).
By 9, the attacker may know sk(Sess_8555).
Using the function sign the attacker may obtain sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555)).
attacker(sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555))).

37. By 34, the attacker may know (SSC_8481,Ns2_8482).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function senc the attacker may obtain senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))).
attacker(senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555)))).

38. By 37, the attacker may know senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))).
By 36, the attacker may know sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555)).
Using the function 2-tuple the attacker may obtain (senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555))).
attacker((senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555)))).

39. The message (B[],Sess_8555) that the attacker may have by 8 may be received at input {6}.
The message (senc((SSC_8481,Ns2_8482),Skey(skB[],sk(Sess_8555))),sign(h((SSC_8481,Ns2_8482)),sk(Sess_8555))) that the attacker may have by 38 may be received at input {14}.
The event beginCli(B[],Sess_8555,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_8555 <> B[] & Sess_8555 <> A[].
So the message (senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8578,Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8578,Login(skB[]),Passwd(skB[]))),skB[]))).

40. By 39, the attacker may know (senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8578,Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
attacker(senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555)))).

41. By 40, the attacker may know senc((CSC_8578,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function sdec the attacker may obtain (CSC_8578,Login(skB[]),Passwd(skB[])).
attacker((CSC_8578,Login(skB[]),Passwd(skB[]))).

42. By 41, the attacker may know (CSC_8578,Login(skB[]),Passwd(skB[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

43. By 18, the attacker may know (senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
attacker(senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555)))).

44. By 43, the attacker may know senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_8555))).
By 15, the attacker may know Skey(skB[],sk(Sess_8555)).
Using the function sdec the attacker may obtain (CSC_8577,Login(skB[]),Passwd(skB[])).
attacker((CSC_8577,Login(skB[]),Passwd(skB[]))).

45. By 44, the attacker may know (CSC_8577,Login(skB[]),Passwd(skB[])).
Using the function 1-proj-3-tuple the attacker may obtain CSC_8577.
attacker(CSC_8577).

46. By 45, the attacker may know CSC_8577.
By 42, the attacker may know Login(skB[]).
By 31, the attacker may know Passwd(skB[]).
Using the function 3-tuple the attacker may obtain (CSC_8577,Login(skB[]),Passwd(skB[])).
attacker((CSC_8577,Login(skB[]),Passwd(skB[]))).

47. By 46, the attacker may know (CSC_8577,Login(skB[]),Passwd(skB[])).
By 20, the attacker may know Skey(skB[],skB[]).
Using the function senc the attacker may obtain senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[])).
attacker(senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[]))).

48. By 47, the attacker may know senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[])).
By 19, the attacker may know sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[]).
Using the function 2-tuple the attacker may obtain (senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[])),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])).
attacker((senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[])),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[]))).

49. The message (B[],B[]) that the attacker may have by 2 may be received at input {27}.
The message (senc(CreateSessionRequest,Skey(skB[],skB[])),sign(h(CreateSessionRequest),skB[])) that the attacker may have by 6 may be received at input {33}.
The message (senc((CSC_8577,Login(skB[]),Passwd(skB[])),Skey(skB[],skB[])),sign(h((CSC_8577,Login(skB[]),Passwd(skB[]))),skB[])) that the attacker may have by 48 may be received at input {41}.
So event endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))) may be executed at {45}.
end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a_8581)) at {6} in copy a_8585

out(c, (senc(CreateSessionRequest,Skey(skB,sk(a_8581))),sign(h(CreateSessionRequest),skB))) at {13} in copy a_8585

in(c, (B,a_8581)) at {6} in copy a_8588

out(c, (senc(CreateSessionRequest,Skey(skB,sk(a_8581))),sign(h(CreateSessionRequest),skB))) at {13} in copy a_8588

in(c, (B,a_8581)) at {6} in copy a_8582

out(c, (senc(CreateSessionRequest,Skey(skB,sk(a_8581))),sign(h(CreateSessionRequest),skB))) at {13} in copy a_8582

in(c, (B,B)) at {6} in copy a_8591

out(c, (senc(CreateSessionRequest,Skey(skB,skB)),sign(h(CreateSessionRequest),skB))) at {13} in copy a_8591

in(c, (B,B)) at {27} in copy a_8592

in(c, (senc(CreateSessionRequest,Skey(skB,skB)),sign(h(CreateSessionRequest),skB))) at {33} in copy a_8592

new SSC_67 creating SSC_9336 at {37} in copy a_8592

new Ns2_68 creating Ns2_9337 at {38} in copy a_8592

out(c, (senc((SSC_9336,Ns2_9337),Skey(skB,skB)),sign(h((SSC_9336,Ns2_9337)),skB))) at {40} in copy a_8592

in(c, (B,B)) at {49} in copy a_8589

out(c, Skey(skB,skB)) at {54} in copy a_8589

in(c, (B,a_8581)) at {49} in copy a_8590

out(c, Skey(skB,sk(a_8581))) at {54} in copy a_8590

in(c, (senc((a_8583,a_8584),Skey(skB,sk(a_8581))),sign(h((a_8583,a_8584)),sk(a_8581)))) at {14} in copy a_8585

new CSC creating CSC_8594 at {18} in copy a_8585

event(beginCli(B,a_8581,(Login(skB),Passwd(skB)))) at {19} in copy a_8585

out(c, (senc((CSC_8594,Login(skB),Passwd(skB)),Skey(skB,sk(a_8581))),sign(h((CSC_8594,Login(skB),Passwd(skB))),skB))) at {21} in copy a_8585

in(c, (senc((a_8586,a_8587),Skey(skB,sk(a_8581))),sign(h((a_8586,a_8587)),sk(a_8581)))) at {14} in copy a_8588

new CSC creating CSC_8595 at {18} in copy a_8588

event(beginCli(B,a_8581,(Login(skB),Passwd(skB)))) at {19} in copy a_8588

out(c, (senc((CSC_8595,Login(skB),Passwd(skB)),Skey(skB,sk(a_8581))),sign(h((CSC_8595,Login(skB),Passwd(skB))),skB))) at {21} in copy a_8588

in(c, (senc((a,a_8580),Skey(skB,sk(a_8581))),sign(h((a,a_8580)),sk(a_8581)))) at {14} in copy a_8582

new CSC creating CSC_8593 at {18} in copy a_8582

event(beginCli(B,a_8581,(Login(skB),Passwd(skB)))) at {19} in copy a_8582

out(c, (senc((CSC_8593,Login(skB),Passwd(skB)),Skey(skB,sk(a_8581))),sign(h((CSC_8593,Login(skB),Passwd(skB))),skB))) at {21} in copy a_8582

in(c, (senc((CSC_8593,Login(skB),Passwd(skB)),Skey(skB,skB)),sign(h((CSC_8593,Login(skB),Passwd(skB))),skB))) at {41} in copy a_8592

event(endSrv(B,B,(Login(skB),Passwd(skB)))) at {45} in copy a_8592

The event endSrv(B,B,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 111 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 135 rules. 18 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 111 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 135 rules. 18 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 111 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 135 rules. 18 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_30319 = CSC[sigM2 = sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310)),em2 = senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))),Sess = Sess_30310,Cli = A[],!1 = @sid_30311]

1. The attacker has some term Sess_30310.
attacker(Sess_30310).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_30310.
Using the function 2-tuple the attacker may obtain (A[],Sess_30310).
attacker((A[],Sess_30310)).

4. The message (A[],Sess_30310) that the attacker may have by 3 may be received at input {49}.
We have Sess_30310 <> B[] & Sess_30310 <> A[].
So the message Skey(skA[],sk(Sess_30310)) may be sent to the attacker at output {54}.
attacker(Skey(skA[],sk(Sess_30310))).

5. By 1, the attacker may know Sess_30310.
Using the function sk the attacker may obtain sk(Sess_30310).
attacker(sk(Sess_30310)).

6. The attacker has some term Ns2_30309.
attacker(Ns2_30309).

7. The attacker has some term SSC_30308.
attacker(SSC_30308).

8. By 7, the attacker may know SSC_30308.
By 6, the attacker may know Ns2_30309.
Using the function 2-tuple the attacker may obtain (SSC_30308,Ns2_30309).
attacker((SSC_30308,Ns2_30309)).

9. By 8, the attacker may know (SSC_30308,Ns2_30309).
Using the function h the attacker may obtain h((SSC_30308,Ns2_30309)).
attacker(h((SSC_30308,Ns2_30309))).

10. By 9, the attacker may know h((SSC_30308,Ns2_30309)).
By 5, the attacker may know sk(Sess_30310).
Using the function sign the attacker may obtain sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310)).
attacker(sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310))).

11. By 8, the attacker may know (SSC_30308,Ns2_30309).
By 4, the attacker may know Skey(skA[],sk(Sess_30310)).
Using the function senc the attacker may obtain senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))).
attacker(senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310)))).

12. By 11, the attacker may know senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))).
By 10, the attacker may know sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310)).
Using the function 2-tuple the attacker may obtain (senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))),sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310))).
attacker((senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))),sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310)))).

13. The message (A[],Sess_30310) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_30308,Ns2_30309),Skey(skA[],sk(Sess_30310))),sign(h((SSC_30308,Ns2_30309)),sk(Sess_30310))) that the attacker may have by 12 may be received at input {14}.
We have Sess_30310 <> B[] & Sess_30310 <> A[].
So the message (senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310))),sign(h((CSC_30319,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310))),sign(h((CSC_30319,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310))),sign(h((CSC_30319,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310))).
attacker(senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310)))).

15. By 14, the attacker may know senc((CSC_30319,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_30310))).
By 4, the attacker may know Skey(skA[],sk(Sess_30310)).
Using the function sdec the attacker may obtain (CSC_30319,Login(skA[]),Passwd(skA[])).
attacker((CSC_30319,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_30319,Login(skA[]),Passwd(skA[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_30322)) at {6} in copy a_30323

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_30322))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_30323

in(c, (A,a_30322)) at {49} in copy a_30324

out(c, Skey(skA,sk(a_30322))) at {54} in copy a_30324

in(c, (senc((a_30320,a_30321),Skey(skA,sk(a_30322))),sign(h((a_30320,a_30321)),sk(a_30322)))) at {14} in copy a_30323

new CSC creating CSC_30325 at {18} in copy a_30323

event(beginCli(A,a_30322,(Login(skA),Passwd(skA)))) at {19} in copy a_30323

out(c, (senc((CSC_30325,Login(skA),Passwd(skA)),Skey(skA,sk(a_30322))),sign(h((CSC_30325,Login(skA),Passwd(skA))),skA))) at {21} in copy a_30323

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 111 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 135 rules. 18 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_37562 = CSC[sigM2 = sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553)),em2 = senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))),Sess = Sess_37553,Cli = A[],!1 = @sid_37554]

1. The attacker has some term Sess_37553.
attacker(Sess_37553).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_37553.
Using the function 2-tuple the attacker may obtain (A[],Sess_37553).
attacker((A[],Sess_37553)).

4. The message (A[],Sess_37553) that the attacker may have by 3 may be received at input {49}.
We have Sess_37553 <> B[] & Sess_37553 <> A[].
So the message Skey(skA[],sk(Sess_37553)) may be sent to the attacker at output {54}.
attacker(Skey(skA[],sk(Sess_37553))).

5. By 1, the attacker may know Sess_37553.
Using the function sk the attacker may obtain sk(Sess_37553).
attacker(sk(Sess_37553)).

6. The attacker has some term Ns2_37552.
attacker(Ns2_37552).

7. The attacker has some term SSC_37551.
attacker(SSC_37551).

8. By 7, the attacker may know SSC_37551.
By 6, the attacker may know Ns2_37552.
Using the function 2-tuple the attacker may obtain (SSC_37551,Ns2_37552).
attacker((SSC_37551,Ns2_37552)).

9. By 8, the attacker may know (SSC_37551,Ns2_37552).
Using the function h the attacker may obtain h((SSC_37551,Ns2_37552)).
attacker(h((SSC_37551,Ns2_37552))).

10. By 9, the attacker may know h((SSC_37551,Ns2_37552)).
By 5, the attacker may know sk(Sess_37553).
Using the function sign the attacker may obtain sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553)).
attacker(sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553))).

11. By 8, the attacker may know (SSC_37551,Ns2_37552).
By 4, the attacker may know Skey(skA[],sk(Sess_37553)).
Using the function senc the attacker may obtain senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))).
attacker(senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553)))).

12. By 11, the attacker may know senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))).
By 10, the attacker may know sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553)).
Using the function 2-tuple the attacker may obtain (senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))),sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553))).
attacker((senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))),sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553)))).

13. The message (A[],Sess_37553) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_37551,Ns2_37552),Skey(skA[],sk(Sess_37553))),sign(h((SSC_37551,Ns2_37552)),sk(Sess_37553))) that the attacker may have by 12 may be received at input {14}.
We have Sess_37553 <> B[] & Sess_37553 <> A[].
So the message (senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553))),sign(h((CSC_37562,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553))),sign(h((CSC_37562,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553))),sign(h((CSC_37562,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553))).
attacker(senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553)))).

15. By 14, the attacker may know senc((CSC_37562,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_37553))).
By 4, the attacker may know Skey(skA[],sk(Sess_37553)).
Using the function sdec the attacker may obtain (CSC_37562,Login(skA[]),Passwd(skA[])).
attacker((CSC_37562,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_37562,Login(skA[]),Passwd(skA[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_37565)) at {6} in copy a_37566

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_37565))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_37566

in(c, (A,a_37565)) at {49} in copy a_37567

out(c, Skey(skA,sk(a_37565))) at {54} in copy a_37567

in(c, (senc((a_37563,a_37564),Skey(skA,sk(a_37565))),sign(h((a_37563,a_37564)),sk(a_37565)))) at {14} in copy a_37566

new CSC creating CSC_37568 at {18} in copy a_37566

event(beginCli(A,a_37565,(Login(skA),Passwd(skA)))) at {19} in copy a_37566

out(c, (senc((CSC_37568,Login(skA),Passwd(skA)),Skey(skA,sk(a_37565))),sign(h((CSC_37568,Login(skA),Passwd(skA))),skA))) at {21} in copy a_37566

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
