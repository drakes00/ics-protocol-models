File "opcua_session_sign_encrypt_sign_encrypt.pv", line 70, character 9 - line 70, character 10:
Warning: identifier K rebound
File "opcua_session_sign_encrypt_sign_encrypt.pv", line 109, character 41 - line 109, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}new K_59: bitstring;
    {15}out(ch, (Cli,Sess,K_59));
    {16}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K_59 else CreateSessionRequest) in
    {17}out(c, tmp);
    {18}new Nc: bitstring;
    {19}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {20}out(c, (senc(m1,K_59),sign(h(m1),skCli)));
    {21}in(c, (em2: bitstring,sigM2: bitstring));
    {22}let m2: bitstring = sdec(em2,K_59) in
    {23}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {24}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {25}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
        {26}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli)) in
        {27}out(c, (senc(m3,K_59),sign(h(m3),skCli)));
        {28}in(c, (em4: bitstring,sigM4: bitstring));
        {29}let m4: bitstring = sdec(em4,K_59) in
        {30}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {31}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {32}if ((Sess = A) || (Sess = B)) then
            {33}event endCli(Sess,Cli,Ns)
) | (
    {34}in(ch, (Cli_60: host,Sess_61: host,K_62: bitstring));
    {35}let skCli_63: bitstring = (if (Cli_60 = A) then skA else (if (Cli_60 = B) then skB else sk(Cli_60))) in
    {36}let pkCli_64: bitstring = pub(skCli_63) in
    {37}let skSess_65: bitstring = (if (Sess_61 = A) then skA else (if (Sess_61 = B) then skB else fail-any)) in
    {38}let pkSess_66: bitstring = pub(skSess_65) in
    {39}let tmp_67: bitstring = (if ((Cli_60 <> A) && (Cli_60 <> B)) then K_62 else CreateSessionRequest) in
    {40}out(c, tmp_67);
    {41}in(c, (em1: bitstring,sigM1: bitstring));
    {42}new Nc_68: bitstring;
    {43}let m1_69: bitstring = sdec(em1,K_62) in
    {44}if (verify(h(m1_69),sigM1,pkCli_64) <> true) then
        0
    else
        {45}let (=CreateSessionRequest,=pkCli_64,Nc_70: bitstring) = m1_69 in
        {46}new Ns_71: bitstring;
        {47}event beginSrv(Sess_61,Cli_60,Ns_71);
        {48}let m2_72: bitstring = (CreateSessionResponse,pkSess_66,Nc_70,Ns_71) in
        {49}out(c, (senc(m2_72,K_62),sign(h(m2_72),skSess_65)));
        {50}in(c, (em3: bitstring,sigM3: bitstring));
        {51}let m3_73: bitstring = sdec(em3,K_62) in
        {52}if (verify(h(m3_73),sigM3,pkCli_64) <> true) then
            0
        else
            {53}let (=ActivateSessionRequest,=pkCli_64,=Login(pkCli_64),=Passwd(skCli_63)) = m3_73 in
            {54}new Ns2_74: bitstring;
            {55}let m4_75: bitstring = (ActivateSessionResponse,Ns2_74) in
            {56}out(c, (senc(m4_75,K_62),sign(h(m4_75),skSess_65)));
            {57}if ((Cli_60 = A) || (Cli_60 = B)) then
            {58}event endSrv(Cli_60,Sess_61,(Login(pkCli_64),Passwd(skCli_63)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 157 rules. 96 rules in the queue.
400 rules inserted. The rule base contains 312 rules. 146 rules in the queue.
600 rules inserted. The rule base contains 432 rules. 158 rules in the queue.
800 rules inserted. The rule base contains 466 rules. 160 rules in the queue.
1000 rules inserted. The rule base contains 511 rules. 65 rules in the queue.
1200 rules inserted. The rule base contains 550 rules. 166 rules in the queue.
1400 rules inserted. The rule base contains 630 rules. 265 rules in the queue.
1600 rules inserted. The rule base contains 649 rules. 296 rules in the queue.
1800 rules inserted. The rule base contains 775 rules. 236 rules in the queue.
2000 rules inserted. The rule base contains 854 rules. 188 rules in the queue.
2200 rules inserted. The rule base contains 865 rules. 99 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: begin(beginSrv(A[],B[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_25321])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_25321]),K_59[Sess = A[],Cli = B[],!1 = @sid_25321]),K_62 = K_59[Sess = A[],Cli = B[],!1 = @sid_25321],Sess_61 = A[],Cli_60 = B[],!1 = @sid_25321])) -> end(endCli(A[],B[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_25321])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_25321]),K_59[Sess = A[],Cli = B[],!1 = @sid_25321]),K_62 = K_59[Sess = A[],Cli = B[],!1 = @sid_25321],Sess_61 = A[],Cli_60 = B[],!1 = @sid_25321]))
goal reachable: begin(beginSrv(B[],A[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_25322])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_25322]),K_59[Sess = B[],Cli = A[],!1 = @sid_25322]),K_62 = K_59[Sess = B[],Cli = A[],!1 = @sid_25322],Sess_61 = B[],Cli_60 = A[],!1 = @sid_25322])) -> end(endCli(B[],A[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_25322])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_25322]),K_59[Sess = B[],Cli = A[],!1 = @sid_25322]),K_62 = K_59[Sess = B[],Cli = A[],!1 = @sid_25322],Sess_61 = B[],Cli_60 = A[],!1 = @sid_25322]))
goal reachable: begin(beginSrv(B[],B[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_25323])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_25323]),K_59[Sess = B[],Cli = B[],!1 = @sid_25323]),K_62 = K_59[Sess = B[],Cli = B[],!1 = @sid_25323],Sess_61 = B[],Cli_60 = B[],!1 = @sid_25323])) -> end(endCli(B[],B[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_25323])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_25323]),K_59[Sess = B[],Cli = B[],!1 = @sid_25323]),K_62 = K_59[Sess = B[],Cli = B[],!1 = @sid_25323],Sess_61 = B[],Cli_60 = B[],!1 = @sid_25323]))
goal reachable: begin(beginSrv(A[],A[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_25324])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_25324]),K_59[Sess = A[],Cli = A[],!1 = @sid_25324]),K_62 = K_59[Sess = A[],Cli = A[],!1 = @sid_25324],Sess_61 = A[],Cli_60 = A[],!1 = @sid_25324])) -> end(endCli(A[],A[],Ns_71[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_25324])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_25324]),K_59[Sess = A[],Cli = A[],!1 = @sid_25324]),K_62 = K_59[Sess = A[],Cli = A[],!1 = @sid_25324],Sess_61 = A[],Cli_60 = A[],!1 = @sid_25324]))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_25328,Y_25329,N_25330)) ==> event(beginCli(X_25328,Y_25329,N_25330))
Completing...
200 rules inserted. The rule base contains 160 rules. 96 rules in the queue.
400 rules inserted. The rule base contains 310 rules. 152 rules in the queue.
600 rules inserted. The rule base contains 430 rules. 164 rules in the queue.
800 rules inserted. The rule base contains 462 rules. 190 rules in the queue.
1000 rules inserted. The rule base contains 495 rules. 122 rules in the queue.
1200 rules inserted. The rule base contains 565 rules. 182 rules in the queue.
1400 rules inserted. The rule base contains 661 rules. 230 rules in the queue.
1600 rules inserted. The rule base contains 797 rules. 321 rules in the queue.
1800 rules inserted. The rule base contains 891 rules. 373 rules in the queue.
2000 rules inserted. The rule base contains 1002 rules. 331 rules in the queue.
2200 rules inserted. The rule base contains 1155 rules. 333 rules in the queue.
2400 rules inserted. The rule base contains 1251 rules. 314 rules in the queue.
2600 rules inserted. The rule base contains 1294 rules. 262 rules in the queue.
2800 rules inserted. The rule base contains 1450 rules. 110 rules in the queue.
3000 rules inserted. The rule base contains 1535 rules. 12 rules in the queue.
Starting query event(endSrv(X_25328,Y_25329,N_25330)) ==> event(beginCli(X_25328,Y_25329,N_25330))
goal reachable: begin(beginCli(B[],A[],(Login(pub(skB[])),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(pub(skB[])),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(pub(skA[])),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(pub(skA[])),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(pub(skB[])),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(pub(skB[])),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(pub(skA[])),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(pub(skA[])),Passwd(skA[]))))
RESULT event(endSrv(X_25328,Y_25329,N_25330)) ==> event(beginCli(X_25328,Y_25329,N_25330)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 152 rules. 92 rules in the queue.
400 rules inserted. The rule base contains 308 rules. 133 rules in the queue.
600 rules inserted. The rule base contains 398 rules. 150 rules in the queue.
800 rules inserted. The rule base contains 424 rules. 128 rules in the queue.
1000 rules inserted. The rule base contains 452 rules. 100 rules in the queue.
1200 rules inserted. The rule base contains 521 rules. 216 rules in the queue.
1400 rules inserted. The rule base contains 640 rules. 180 rules in the queue.
1600 rules inserted. The rule base contains 773 rules. 51 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_67206 = K_59[Sess = Sess_67195,Cli = A[],!1 = @sid_67196]
Nc_67207 = Nc[Sess = Sess_67195,Cli = A[],!1 = @sid_67196]

1. The attacker has some term Sess_67195.
attacker(Sess_67195).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_67195.
Using the function 2-tuple the attacker may obtain (A[],Sess_67195).
attacker((A[],Sess_67195)).

4. The message (A[],Sess_67195) that the attacker may have by 3 may be received at input {7}.
We have Sess_67195 <> B[] & Sess_67195 <> A[].
So the message K_67206 may be sent to the attacker at output {17}.
attacker(K_67206).

5. By 1, the attacker may know Sess_67195.
Using the function sk the attacker may obtain sk(Sess_67195).
attacker(sk(Sess_67195)).

6. The attacker has some term Ns_67197.
attacker(Ns_67197).

7. The message (A[],Sess_67195) that the attacker may have by 3 may be received at input {7}.
We have Sess_67195 <> B[] & Sess_67195 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206),sign(h((CreateSessionRequest,pub(skA[]),Nc_67207)),skA[])) may be sent to the attacker at output {20}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206),sign(h((CreateSessionRequest,pub(skA[]),Nc_67207)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206),sign(h((CreateSessionRequest,pub(skA[]),Nc_67207)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_67207),K_67206).
By 4, the attacker may know K_67206.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_67207).
attacker((CreateSessionRequest,pub(skA[]),Nc_67207)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_67207).
Using the function 3-proj-3-tuple the attacker may obtain Nc_67207.
attacker(Nc_67207).

11. By 5, the attacker may know sk(Sess_67195).
Using the function pub the attacker may obtain pub(sk(Sess_67195)).
attacker(pub(sk(Sess_67195))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 11, the attacker may know pub(sk(Sess_67195)).
By 10, the attacker may know Nc_67207.
By 6, the attacker may know Ns_67197.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197).
attacker((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)).

14. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)).
attacker(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197))).

15. By 14, the attacker may know h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)).
By 5, the attacker may know sk(Sess_67195).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195))).

16. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197).
By 4, the attacker may know K_67206.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206).
attacker(senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206)).

17. By 16, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206).
By 15, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206),sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206),sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195)))).

18. The message (A[],Sess_67195) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197),K_67206),sign(h((CreateSessionResponse,pub(sk(Sess_67195)),Nc_67207,Ns_67197)),sk(Sess_67195))) that the attacker may have by 17 may be received at input {21}.
We have Sess_67195 <> B[] & Sess_67195 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])) may be sent to the attacker at output {27}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206)).

20. By 19, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_67206).
By 4, the attacker may know K_67206.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


Could not find a trace corresponding to this derivation.
RESULT not attacker(Passwd(skA[])) cannot be proved.
