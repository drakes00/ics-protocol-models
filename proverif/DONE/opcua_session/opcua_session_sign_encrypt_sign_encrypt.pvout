File "opcua_session_sign_encrypt_sign_encrypt.pv", line 103, character 41 - line 103, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, (em1: bitstring,sigM1: bitstring));
    {36}new Nc_66: bitstring;
    {37}let m1_67: bitstring = sdec(em1,K_61) in
    {38}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {39}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {40}new Ns_69: bitstring;
        {41}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {42}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {43}in(c, (em3: bitstring,sigM3: bitstring));
        {44}let m3_71: bitstring = sdec(em3,K_61) in
        {45}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {47}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {48}new Ns2_72: bitstring;
            {49}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {50}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 158 rules. 96 rules in the queue.
400 rules inserted. The rule base contains 304 rules. 140 rules in the queue.
600 rules inserted. The rule base contains 414 rules. 153 rules in the queue.
800 rules inserted. The rule base contains 468 rules. 76 rules in the queue.
1000 rules inserted. The rule base contains 620 rules. 188 rules in the queue.
1200 rules inserted. The rule base contains 756 rules. 336 rules in the queue.
1400 rules inserted. The rule base contains 894 rules. 364 rules in the queue.
1600 rules inserted. The rule base contains 1040 rules. 366 rules in the queue.
1800 rules inserted. The rule base contains 1154 rules. 286 rules in the queue.
2000 rules inserted. The rule base contains 1267 rules. 187 rules in the queue.
2200 rules inserted. The rule base contains 1384 rules. 60 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 146 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 130 rules in the queue.
600 rules inserted. The rule base contains 372 rules. 92 rules in the queue.
800 rules inserted. The rule base contains 438 rules. 95 rules in the queue.
1000 rules inserted. The rule base contains 559 rules. 166 rules in the queue.
1200 rules inserted. The rule base contains 675 rules. 82 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_36546 = K[Sess = Sess_36535,Cli = A[],!1 = @sid_36537]

1. The attacker has some term Sess_36535.
attacker(Sess_36535).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36535.
Using the function 2-tuple the attacker may obtain (A[],Sess_36535).
attacker((A[],Sess_36535)).

4. The message (A[],Sess_36535) that the attacker may have by 3 may be received at input {7}.
We have Sess_36535 <> B[] & Sess_36535 <> A[].
So the message K_36546 may be sent to the attacker at output {15}.
attacker(K_36546).

5. By 1, the attacker may know Sess_36535.
Using the function sk the attacker may obtain sk(Sess_36535).
attacker(sk(Sess_36535)).

6. The attacker has some term Ns_36536.
attacker(Ns_36536).

7. By 5, the attacker may know sk(Sess_36535).
Using the function pub the attacker may obtain pub(sk(Sess_36535)).
attacker(pub(sk(Sess_36535))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_36535)).
By 6, the attacker may know Ns_36536.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536).
attacker((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)).
By 5, the attacker may know sk(Sess_36535).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536).
By 4, the attacker may know K_36546.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546).
attacker(senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546),sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546),sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535)))).

14. The message (A[],Sess_36535) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536),K_36546),sign(h((CreateSessionResponse,pub(sk(Sess_36535)),Ns_36536)),sk(Sess_36535))) that the attacker may have by 13 may be received at input {19}.
We have Sess_36535 <> B[] & Sess_36535 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546)).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36546).
By 4, the attacker may know K_36546.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_36650 at {6} in copy a_36547

in(c, (A,a)) at {7} in copy a_36547

new K creating K_36549 at {12} in copy a_36547

out(ch_36650, (A,a,K_36549)) at {13} in copy a_36547 received at {30} in copy a_36547

out(c, K_36549) at {15} in copy a_36547

new Nc creating Nc_36832 at {16} in copy a_36547

out(c, (senc((CreateSessionRequest,pub(skA),Nc_36832),K_36549),sign(h((CreateSessionRequest,pub(skA),Nc_36832)),skA))) at {18} in copy a_36547

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_36548),K_36549),sign(h((CreateSessionResponse,pub(sk(a)),a_36548)),sk(a)))) at {19} in copy a_36547

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {23} in copy a_36547

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_36549),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_36547

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 146 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 130 rules in the queue.
600 rules inserted. The rule base contains 372 rules. 92 rules in the queue.
800 rules inserted. The rule base contains 438 rules. 95 rules in the queue.
1000 rules inserted. The rule base contains 559 rules. 166 rules in the queue.
1200 rules inserted. The rule base contains 675 rules. 82 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_48551 = K[Sess = Sess_48540,Cli = A[],!1 = @sid_48542]

1. The attacker has some term Sess_48540.
attacker(Sess_48540).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_48540.
Using the function 2-tuple the attacker may obtain (A[],Sess_48540).
attacker((A[],Sess_48540)).

4. The message (A[],Sess_48540) that the attacker may have by 3 may be received at input {7}.
We have Sess_48540 <> B[] & Sess_48540 <> A[].
So the message K_48551 may be sent to the attacker at output {15}.
attacker(K_48551).

5. By 1, the attacker may know Sess_48540.
Using the function sk the attacker may obtain sk(Sess_48540).
attacker(sk(Sess_48540)).

6. The attacker has some term Ns_48541.
attacker(Ns_48541).

7. By 5, the attacker may know sk(Sess_48540).
Using the function pub the attacker may obtain pub(sk(Sess_48540)).
attacker(pub(sk(Sess_48540))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_48540)).
By 6, the attacker may know Ns_48541.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541).
attacker((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)).
attacker(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)).
By 5, the attacker may know sk(Sess_48540).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541).
By 4, the attacker may know K_48551.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551).
attacker(senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551),sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551),sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540)))).

14. The message (A[],Sess_48540) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541),K_48551),sign(h((CreateSessionResponse,pub(sk(Sess_48540)),Ns_48541)),sk(Sess_48540))) that the attacker may have by 13 may be received at input {19}.
We have Sess_48540 <> B[] & Sess_48540 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551)).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_48551).
By 4, the attacker may know K_48551.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_48657 at {6} in copy a_48553

in(c, (A,a_48552)) at {7} in copy a_48553

new K creating K_48555 at {12} in copy a_48553

out(ch_48657, (A,a_48552,K_48555)) at {13} in copy a_48553 received at {30} in copy a_48553

out(c, K_48555) at {15} in copy a_48553

new Nc creating Nc_48839 at {16} in copy a_48553

out(c, (senc((CreateSessionRequest,pub(skA),Nc_48839),K_48555),sign(h((CreateSessionRequest,pub(skA),Nc_48839)),skA))) at {18} in copy a_48553

in(c, (senc((CreateSessionResponse,pub(sk(a_48552)),a_48554),K_48555),sign(h((CreateSessionResponse,pub(sk(a_48552)),a_48554)),sk(a_48552)))) at {19} in copy a_48553

event(beginCli(A,a_48552,(Login(skA),Passwd(skA)))) at {23} in copy a_48553

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_48555),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_48553

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
