Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else sk(Cli))) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(pkCli,pkSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {14}in(c, (em2: bitstring,sigM2: bitstring));
    {15}let m2: bitstring = sdec(em2,K) in
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {18}new CSC: bitstring;
        {19}event beginCli(Cli,Sess,(Login(pkCli,pkSess),Passwd(pkCli,pkSess)));
        {20}let m3: bitstring = (CSC,Login(pkCli,pkSess),Passwd(pkCli,pkSess)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else sk(Sess_60))) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(pkCli_62,pkSess_64) in
    {33}in(c, m1_66: bitstring);
    {34}if (m1_66 <> CreateSessionRequest) then
        0
    else
        {35}new SSC_67: bitstring;
        {36}new Ns2_68: bitstring;
        {37}let m2_69: bitstring = (SSC_67,Ns2_68) in
        {38}out(c, m2_69);
        {39}in(c, m3_70: bitstring);
        {40}let (CSC_71: bitstring,=Login(pkCli_62,pkSess_64),=Passwd(pkCli_62,pkSess_64)) = m3_70 in
        {41}event endSrv(Cli_59,Sess_60,(Login(pkCli_62,pkSess_64),Passwd(pkCli_62,pkSess_64)));
        {42}let m4_72: bitstring = ActivateSessionResponse in
        {43}out(c, m4_72)
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {47}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {48}if ((X,Y) = (A,B)) then
        0
    else
        {49}if ((X,Y) = (B,A)) then
            0
        else
            {50}out(c, Skey(pub(skX),pub(skY)))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 107 rules. 12 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Y_8880 <> B[] && Y_8880 <> A[] && begin(beginCli(B[],Y_8880,(Login(pub(skB[]),pub(sk(Y_8880))),Passwd(pub(skB[]),pub(sk(Y_8880)))))) && attacker(Y_8880) -> end(endSrv(B[],Y_8880,(Login(pub(skB[]),pub(sk(Y_8880))),Passwd(pub(skB[]),pub(sk(Y_8880))))))
goal reachable: Y_8881 <> B[] && Y_8881 <> A[] && begin(beginCli(A[],Y_8881,(Login(pub(skA[]),pub(sk(Y_8881))),Passwd(pub(skA[]),pub(sk(Y_8881)))))) && attacker(Y_8881) -> end(endSrv(A[],Y_8881,(Login(pub(skA[]),pub(sk(Y_8881))),Passwd(pub(skA[]),pub(sk(Y_8881))))))
goal reachable: Y_8883 <> B[] && Y_8883 <> A[] && X_8882 <> B[] && X_8882 <> A[] && begin(beginCli(X_8882,Y_8883,(Login(pub(sk(X_8882)),pub(sk(Y_8883))),Passwd(pub(sk(X_8882)),pub(sk(Y_8883)))))) && attacker(X_8882) && attacker(Y_8883) -> end(endSrv(X_8882,Y_8883,(Login(pub(sk(X_8882)),pub(sk(Y_8883))),Passwd(pub(sk(X_8882)),pub(sk(Y_8883))))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(pub(skB[]),pub(skA[])))
Completing...
200 rules inserted. The rule base contains 103 rules. 5 rules in the queue.
Starting query not attacker(Skey(pub(skB[]),pub(skA[])))
RESULT not attacker(Skey(pub(skB[]),pub(skA[]))) is true.
-- Query not attacker(Skey(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 103 rules. 5 rules in the queue.
Starting query not attacker(Skey(pub(skA[]),pub(skB[])))
RESULT not attacker(Skey(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Passwd(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 103 rules. 5 rules in the queue.
Starting query not attacker(Passwd(pub(skA[]),pub(skB[])))
RESULT not attacker(Passwd(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Login(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 103 rules. 5 rules in the queue.
Starting query not attacker(Login(pub(skA[]),pub(skB[])))
RESULT not attacker(Login(pub(skA[]),pub(skB[]))) is true.
