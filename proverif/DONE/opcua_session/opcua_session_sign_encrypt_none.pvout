Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {33}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {34}let pkCli_63: bitstring = pub(skCli_62) in
    {35}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {36}let pkSess_65: bitstring = pub(skSess_64) in
    {37}in(c, m1_66: bitstring);
    {38}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
    {39}new Ns_68: bitstring;
    {40}event beginSrv(Sess_60,Cli_59,Ns_68);
    {41}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Nc_67,Ns_68) in
    {42}out(c, m2_69);
    {43}in(c, m3_70: bitstring);
    {44}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
    {45}new Ns2_71: bitstring;
    {46}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {47}out(c, m4_72);
    {48}if ((Cli_59 = A) || (Cli_59 = B)) then
    {49}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 136 rules. 14 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_6073,Y_6074,N_6075)) ==> event(beginCli(X_6073,Y_6074,N_6075))
Completing...
200 rules inserted. The rule base contains 127 rules. 9 rules in the queue.
Starting query event(endSrv(X_6073,Y_6074,N_6075)) ==> event(beginCli(X_6073,Y_6074,N_6075))
goal reachable: Sess_12126 <> B[] && Sess_12126 <> A[] && begin(beginCli(B[],Sess_12126,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_12126) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
K_12255 = K[Sess = Sess_12175,Cli = B[],!1 = @sid_12176]
Nc_12256 = Nc[Sess = Sess_12175,Cli = B[],!1 = @sid_12176]
ch_12257 = ch[!1 = @sid_12250]
K_12258 = K[Sess = B[],Cli = B[],!1 = @sid_12250]

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. The message (B[],B[]) that the attacker may have by 2 may be received at input {7}.
So the message (B[],B[],K_12258) may be sent on channel ch_12257 at output {13}.
mess(ch_12257,(B[],B[],K_12258)).

4. The attacker has some term Nc_12249.
attacker(Nc_12249).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_12249.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_12249).
attacker((CreateSessionRequest,pub(skB[]),Nc_12249)).

8. We assume as hypothesis that
attacker(Sess_12175).

9. By 1, the attacker may know B[].
By 8, the attacker may know Sess_12175.
Using the function 2-tuple the attacker may obtain (B[],Sess_12175).
attacker((B[],Sess_12175)).

10. The message (B[],Sess_12175) that the attacker may have by 9 may be received at input {7}.
We have Sess_12175 <> B[] & Sess_12175 <> A[].
So the message K_12255 may be sent to the attacker at output {15}.
attacker(K_12255).

11. By 8, the attacker may know Sess_12175.
Using the function sk the attacker may obtain sk(Sess_12175).
attacker(sk(Sess_12175)).

12. The attacker has some term Ns_12177.
attacker(Ns_12177).

13. The message (B[],Sess_12175) that the attacker may have by 9 may be received at input {7}.
We have Sess_12175 <> B[] & Sess_12175 <> A[].
So the message (senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255),sign(h((CreateSessionRequest,pub(skB[]),Nc_12256)),skB[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255),sign(h((CreateSessionRequest,pub(skB[]),Nc_12256)),skB[]))).

14. By 13, the attacker may know (senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255),sign(h((CreateSessionRequest,pub(skB[]),Nc_12256)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255).
attacker(senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255)).

15. By 14, the attacker may know senc((CreateSessionRequest,pub(skB[]),Nc_12256),K_12255).
By 10, the attacker may know K_12255.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_12256).
attacker((CreateSessionRequest,pub(skB[]),Nc_12256)).

16. By 15, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_12256).
Using the function 3-proj-3-tuple the attacker may obtain Nc_12256.
attacker(Nc_12256).

17. By 11, the attacker may know sk(Sess_12175).
Using the function pub the attacker may obtain pub(sk(Sess_12175)).
attacker(pub(sk(Sess_12175))).

18. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

19. By 18, the attacker may know CreateSessionResponse.
By 17, the attacker may know pub(sk(Sess_12175)).
By 16, the attacker may know Nc_12256.
By 12, the attacker may know Ns_12177.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177).
attacker((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)).

20. By 19, the attacker may know (CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)).
attacker(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177))).

21. By 20, the attacker may know h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)).
By 11, the attacker may know sk(Sess_12175).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175))).

22. By 19, the attacker may know (CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177).
By 10, the attacker may know K_12255.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255).
attacker(senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255)).

23. By 22, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255).
By 21, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255),sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255),sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175)))).

24. The message (B[],Sess_12175) that the attacker may have by 9 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177),K_12255),sign(h((CreateSessionResponse,pub(sk(Sess_12175)),Nc_12256,Ns_12177)),sk(Sess_12175))) that the attacker may have by 23 may be received at input {19}.
The event beginCli(B[],Sess_12175,(Login(skB[]),Passwd(skB[]))) may be executed at {23}.
We have Sess_12175 <> B[] & Sess_12175 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

25. By 24, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255).
attacker(senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255)).

26. By 25, the attacker may know senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12255).
By 10, the attacker may know K_12255.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

27. By 26, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

28. By 26, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

29. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

30. By 29, the attacker may know ActivateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 28, the attacker may know Login(skB[]).
By 27, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

31. The message (B[],B[],K_12258) that may be sent on channel ch_12257 by 3 may be received at input {32}.
The message (CreateSessionRequest,pub(skB[]),Nc_12249) that the attacker may have by 7 may be received at input {37}.
The message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 30 may be received at input {43}.
So event endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))) may be executed at {49}.
end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_12265 at {6} in copy a_12262

new ch creating ch_12384 at {6} in copy a_12259

in(c, (B,a)) at {7} in copy a_12259

new K creating K_12264 at {12} in copy a_12259

out(ch_12384, (B,a,K_12264)) at {13} in copy a_12259 received at {32} in copy a_12259

out(c, K_12264) at {15} in copy a_12259

new Nc creating Nc_12263 at {16} in copy a_12259

out(c, (senc((CreateSessionRequest,pub(skB),Nc_12263),K_12264),sign(h((CreateSessionRequest,pub(skB),Nc_12263)),skB))) at {18} in copy a_12259

in(c, (senc((CreateSessionResponse,pub(sk(a)),Nc_12263,a_12260),K_12264),sign(h((CreateSessionResponse,pub(sk(a)),Nc_12263,a_12260)),sk(a)))) at {19} in copy a_12259

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {23} in copy a_12259

out(c, (senc((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB)),K_12264),sign(h((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))),skB))) at {25} in copy a_12259

in(c, (B,B)) at {7} in copy a_12262

new K creating K_12266 at {12} in copy a_12262

out(ch_12265, (B,B,K_12266)) at {13} in copy a_12262 received at {32} in copy a_12262

out(c, CreateSessionRequest) at {15} in copy a_12262

new Nc creating Nc_12769 at {16} in copy a_12262

out(c, (senc((CreateSessionRequest,pub(skB),Nc_12769),K_12266),sign(h((CreateSessionRequest,pub(skB),Nc_12769)),skB))) at {18} in copy a_12262

in(c, (CreateSessionRequest,pub(skB),a_12261)) at {37} in copy a_12262

new Ns_68 creating Ns_12791 at {39} in copy a_12262

event(beginSrv(B,B,Ns_12791)) at {40} in copy a_12262

out(c, (CreateSessionResponse,pub(skB),a_12261,Ns_12791)) at {42} in copy a_12262

in(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {43} in copy a_12262

new Ns2_71 creating Ns2_12801 at {45} in copy a_12262

out(c, (ActivateSessionResponse,Ns2_12801)) at {47} in copy a_12262

event(endSrv(B,B,(Login(skB),Passwd(skB)))) at {49} in copy a_12262

The event endSrv(B,B,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_6073,Y_6074,N_6075)) ==> event(beginCli(X_6073,Y_6074,N_6075)) is false.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 128 rules. 4 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_18259 = K[Sess = Sess_18248,Cli = A[],!1 = @sid_18249]
Nc_18260 = Nc[Sess = Sess_18248,Cli = A[],!1 = @sid_18249]

1. The attacker has some term Sess_18248.
attacker(Sess_18248).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_18248.
Using the function 2-tuple the attacker may obtain (A[],Sess_18248).
attacker((A[],Sess_18248)).

4. The message (A[],Sess_18248) that the attacker may have by 3 may be received at input {7}.
We have Sess_18248 <> B[] & Sess_18248 <> A[].
So the message K_18259 may be sent to the attacker at output {15}.
attacker(K_18259).

5. By 1, the attacker may know Sess_18248.
Using the function sk the attacker may obtain sk(Sess_18248).
attacker(sk(Sess_18248)).

6. The attacker has some term Ns_18250.
attacker(Ns_18250).

7. The message (A[],Sess_18248) that the attacker may have by 3 may be received at input {7}.
We have Sess_18248 <> B[] & Sess_18248 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259),sign(h((CreateSessionRequest,pub(skA[]),Nc_18260)),skA[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259),sign(h((CreateSessionRequest,pub(skA[]),Nc_18260)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259),sign(h((CreateSessionRequest,pub(skA[]),Nc_18260)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_18260),K_18259).
By 4, the attacker may know K_18259.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_18260).
attacker((CreateSessionRequest,pub(skA[]),Nc_18260)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_18260).
Using the function 3-proj-3-tuple the attacker may obtain Nc_18260.
attacker(Nc_18260).

11. By 5, the attacker may know sk(Sess_18248).
Using the function pub the attacker may obtain pub(sk(Sess_18248)).
attacker(pub(sk(Sess_18248))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 11, the attacker may know pub(sk(Sess_18248)).
By 10, the attacker may know Nc_18260.
By 6, the attacker may know Ns_18250.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250).
attacker((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)).

14. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)).
attacker(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250))).

15. By 14, the attacker may know h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)).
By 5, the attacker may know sk(Sess_18248).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248))).

16. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250).
By 4, the attacker may know K_18259.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259).
attacker(senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259)).

17. By 16, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259).
By 15, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259),sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259),sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248)))).

18. The message (A[],Sess_18248) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250),K_18259),sign(h((CreateSessionResponse,pub(sk(Sess_18248)),Nc_18260,Ns_18250)),sk(Sess_18248))) that the attacker may have by 17 may be received at input {19}.
We have Sess_18248 <> B[] & Sess_18248 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259)).

20. By 19, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_18259).
By 4, the attacker may know K_18259.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_18355 at {6} in copy a_18262

in(c, (A,a_18261)) at {7} in copy a_18262

new K creating K_18265 at {12} in copy a_18262

out(ch_18355, (A,a_18261,K_18265)) at {13} in copy a_18262 received at {32} in copy a_18262

out(c, K_18265) at {15} in copy a_18262

new Nc creating Nc_18264 at {16} in copy a_18262

out(c, (senc((CreateSessionRequest,pub(skA),Nc_18264),K_18265),sign(h((CreateSessionRequest,pub(skA),Nc_18264)),skA))) at {18} in copy a_18262

in(c, (senc((CreateSessionResponse,pub(sk(a_18261)),Nc_18264,a_18263),K_18265),sign(h((CreateSessionResponse,pub(sk(a_18261)),Nc_18264,a_18263)),sk(a_18261)))) at {19} in copy a_18262

event(beginCli(A,a_18261,(Login(skA),Passwd(skA)))) at {23} in copy a_18262

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_18265),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_18262

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 128 rules. 4 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_24018 = K[Sess = Sess_24007,Cli = A[],!1 = @sid_24008]
Nc_24019 = Nc[Sess = Sess_24007,Cli = A[],!1 = @sid_24008]

1. The attacker has some term Sess_24007.
attacker(Sess_24007).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_24007.
Using the function 2-tuple the attacker may obtain (A[],Sess_24007).
attacker((A[],Sess_24007)).

4. The message (A[],Sess_24007) that the attacker may have by 3 may be received at input {7}.
We have Sess_24007 <> B[] & Sess_24007 <> A[].
So the message K_24018 may be sent to the attacker at output {15}.
attacker(K_24018).

5. By 1, the attacker may know Sess_24007.
Using the function sk the attacker may obtain sk(Sess_24007).
attacker(sk(Sess_24007)).

6. The attacker has some term Ns_24009.
attacker(Ns_24009).

7. The message (A[],Sess_24007) that the attacker may have by 3 may be received at input {7}.
We have Sess_24007 <> B[] & Sess_24007 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018),sign(h((CreateSessionRequest,pub(skA[]),Nc_24019)),skA[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018),sign(h((CreateSessionRequest,pub(skA[]),Nc_24019)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018),sign(h((CreateSessionRequest,pub(skA[]),Nc_24019)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_24019),K_24018).
By 4, the attacker may know K_24018.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_24019).
attacker((CreateSessionRequest,pub(skA[]),Nc_24019)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_24019).
Using the function 3-proj-3-tuple the attacker may obtain Nc_24019.
attacker(Nc_24019).

11. By 5, the attacker may know sk(Sess_24007).
Using the function pub the attacker may obtain pub(sk(Sess_24007)).
attacker(pub(sk(Sess_24007))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 11, the attacker may know pub(sk(Sess_24007)).
By 10, the attacker may know Nc_24019.
By 6, the attacker may know Ns_24009.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009).
attacker((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)).

14. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)).
attacker(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009))).

15. By 14, the attacker may know h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)).
By 5, the attacker may know sk(Sess_24007).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007))).

16. By 13, the attacker may know (CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009).
By 4, the attacker may know K_24018.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018).
attacker(senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018)).

17. By 16, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018).
By 15, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018),sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018),sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007)))).

18. The message (A[],Sess_24007) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009),K_24018),sign(h((CreateSessionResponse,pub(sk(Sess_24007)),Nc_24019,Ns_24009)),sk(Sess_24007))) that the attacker may have by 17 may be received at input {19}.
We have Sess_24007 <> B[] & Sess_24007 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018)).

20. By 19, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24018).
By 4, the attacker may know K_24018.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_24114 at {6} in copy a_24021

in(c, (A,a_24020)) at {7} in copy a_24021

new K creating K_24024 at {12} in copy a_24021

out(ch_24114, (A,a_24020,K_24024)) at {13} in copy a_24021 received at {32} in copy a_24021

out(c, K_24024) at {15} in copy a_24021

new Nc creating Nc_24023 at {16} in copy a_24021

out(c, (senc((CreateSessionRequest,pub(skA),Nc_24023),K_24024),sign(h((CreateSessionRequest,pub(skA),Nc_24023)),skA))) at {18} in copy a_24021

in(c, (senc((CreateSessionResponse,pub(sk(a_24020)),Nc_24023,a_24022),K_24024),sign(h((CreateSessionResponse,pub(sk(a_24020)),Nc_24023,a_24022)),sk(a_24020)))) at {19} in copy a_24021

event(beginCli(A,a_24020,(Login(skA),Passwd(skA)))) at {23} in copy a_24021

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_24024),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_24021

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
