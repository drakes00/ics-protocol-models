Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {33}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {34}let pkCli_63: bitstring = pub(skCli_62) in
    {35}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {36}let pkSess_65: bitstring = pub(skSess_64) in
    {37}in(c, m1_66: bitstring);
    {38}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
    {39}new Ns_68: bitstring;
    {40}event beginSrv(Sess_60,Cli_59,Ns_68);
    {41}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
    {42}out(c, m2_69);
    {43}in(c, m3_70: bitstring);
    {44}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
    {45}new Ns2_71: bitstring;
    {46}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {47}out(c, m4_72);
    {48}if ((Cli_59 = A) || (Cli_59 = B)) then
    {49}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 140 rules. 14 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_5969,Y_5970,N_5971)) ==> event(beginCli(X_5969,Y_5970,N_5971))
Completing...
200 rules inserted. The rule base contains 127 rules. 9 rules in the queue.
Starting query event(endSrv(X_5969,Y_5970,N_5971)) ==> event(beginCli(X_5969,Y_5970,N_5971))
goal reachable: Sess_11912 <> B[] && Sess_11912 <> A[] && begin(beginCli(B[],Sess_11912,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_11912) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
K_12007 = K[Sess = Sess_11944,Cli = B[],!1 = @sid_11946]
ch_12008 = ch[!1 = @sid_12002]
K_12009 = K[Sess = B[],Cli = B[],!1 = @sid_12002]

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. The message (B[],B[]) that the attacker may have by 2 may be received at input {7}.
So the message (B[],B[],K_12009) may be sent on channel ch_12008 at output {13}.
mess(ch_12008,(B[],B[],K_12009)).

4. The attacker has some term Nc_12001.
attacker(Nc_12001).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_12001.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_12001).
attacker((CreateSessionRequest,pub(skB[]),Nc_12001)).

8. We assume as hypothesis that
attacker(Sess_11944).

9. By 1, the attacker may know B[].
By 8, the attacker may know Sess_11944.
Using the function 2-tuple the attacker may obtain (B[],Sess_11944).
attacker((B[],Sess_11944)).

10. The message (B[],Sess_11944) that the attacker may have by 9 may be received at input {7}.
We have Sess_11944 <> B[] & Sess_11944 <> A[].
So the message K_12007 may be sent to the attacker at output {15}.
attacker(K_12007).

11. By 8, the attacker may know Sess_11944.
Using the function sk the attacker may obtain sk(Sess_11944).
attacker(sk(Sess_11944)).

12. The attacker has some term Ns_11945.
attacker(Ns_11945).

13. By 11, the attacker may know sk(Sess_11944).
Using the function pub the attacker may obtain pub(sk(Sess_11944)).
attacker(pub(sk(Sess_11944))).

14. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

15. By 14, the attacker may know CreateSessionResponse.
By 13, the attacker may know pub(sk(Sess_11944)).
By 12, the attacker may know Ns_11945.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945).
attacker((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)).

16. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)).
attacker(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945))).

17. By 16, the attacker may know h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)).
By 11, the attacker may know sk(Sess_11944).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944))).

18. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945).
By 10, the attacker may know K_12007.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007).
attacker(senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007)).

19. By 18, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007).
By 17, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007),sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007),sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944)))).

20. The message (B[],Sess_11944) that the attacker may have by 9 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945),K_12007),sign(h((CreateSessionResponse,pub(sk(Sess_11944)),Ns_11945)),sk(Sess_11944))) that the attacker may have by 19 may be received at input {19}.
The event beginCli(B[],Sess_11944,(Login(skB[]),Passwd(skB[]))) may be executed at {23}.
We have Sess_11944 <> B[] & Sess_11944 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

21. By 20, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007).
attacker(senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007)).

22. By 21, the attacker may know senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),K_12007).
By 10, the attacker may know K_12007.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

23. By 22, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

24. By 22, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

25. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

26. By 25, the attacker may know ActivateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 24, the attacker may know Login(skB[]).
By 23, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

27. The message (B[],B[],K_12009) that may be sent on channel ch_12008 by 3 may be received at input {32}.
The message (CreateSessionRequest,pub(skB[]),Nc_12001) that the attacker may have by 7 may be received at input {37}.
The message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 26 may be received at input {43}.
So event endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))) may be executed at {49}.
end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_12015 at {6} in copy a_12013

new ch creating ch_12134 at {6} in copy a_12010

in(c, (B,a)) at {7} in copy a_12010

new K creating K_12014 at {12} in copy a_12010

out(ch_12134, (B,a,K_12014)) at {13} in copy a_12010 received at {32} in copy a_12010

out(c, K_12014) at {15} in copy a_12010

new Nc creating Nc_12304 at {16} in copy a_12010

out(c, (senc((CreateSessionRequest,pub(skB),Nc_12304),K_12014),sign(h((CreateSessionRequest,pub(skB),Nc_12304)),skB))) at {18} in copy a_12010

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_12011),K_12014),sign(h((CreateSessionResponse,pub(sk(a)),a_12011)),sk(a)))) at {19} in copy a_12010

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {23} in copy a_12010

out(c, (senc((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB)),K_12014),sign(h((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))),skB))) at {25} in copy a_12010

in(c, (B,B)) at {7} in copy a_12013

new K creating K_12016 at {12} in copy a_12013

out(ch_12015, (B,B,K_12016)) at {13} in copy a_12013 received at {32} in copy a_12013

out(c, CreateSessionRequest) at {15} in copy a_12013

new Nc creating Nc_12519 at {16} in copy a_12013

out(c, (senc((CreateSessionRequest,pub(skB),Nc_12519),K_12016),sign(h((CreateSessionRequest,pub(skB),Nc_12519)),skB))) at {18} in copy a_12013

in(c, (CreateSessionRequest,pub(skB),a_12012)) at {37} in copy a_12013

new Ns_68 creating Ns_12541 at {39} in copy a_12013

event(beginSrv(B,B,Ns_12541)) at {40} in copy a_12013

out(c, (CreateSessionResponse,pub(skB),Ns_12541)) at {42} in copy a_12013

in(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {43} in copy a_12013

new Ns2_71 creating Ns2_12551 at {45} in copy a_12013

out(c, (ActivateSessionResponse,Ns2_12551)) at {47} in copy a_12013

event(endSrv(B,B,(Login(skB),Passwd(skB)))) at {49} in copy a_12013

The event endSrv(B,B,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_5969,Y_5970,N_5971)) ==> event(beginCli(X_5969,Y_5970,N_5971)) is false.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 128 rules. 4 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_17892 = K[Sess = Sess_17881,Cli = A[],!1 = @sid_17883]

1. The attacker has some term Sess_17881.
attacker(Sess_17881).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_17881.
Using the function 2-tuple the attacker may obtain (A[],Sess_17881).
attacker((A[],Sess_17881)).

4. The message (A[],Sess_17881) that the attacker may have by 3 may be received at input {7}.
We have Sess_17881 <> B[] & Sess_17881 <> A[].
So the message K_17892 may be sent to the attacker at output {15}.
attacker(K_17892).

5. By 1, the attacker may know Sess_17881.
Using the function sk the attacker may obtain sk(Sess_17881).
attacker(sk(Sess_17881)).

6. The attacker has some term Ns_17882.
attacker(Ns_17882).

7. By 5, the attacker may know sk(Sess_17881).
Using the function pub the attacker may obtain pub(sk(Sess_17881)).
attacker(pub(sk(Sess_17881))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_17881)).
By 6, the attacker may know Ns_17882.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882).
attacker((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)).
attacker(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)).
By 5, the attacker may know sk(Sess_17881).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882).
By 4, the attacker may know K_17892.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892).
attacker(senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892),sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892),sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881)))).

14. The message (A[],Sess_17881) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882),K_17892),sign(h((CreateSessionResponse,pub(sk(Sess_17881)),Ns_17882)),sk(Sess_17881))) that the attacker may have by 13 may be received at input {19}.
We have Sess_17881 <> B[] & Sess_17881 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892)).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_17892).
By 4, the attacker may know K_17892.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_17986 at {6} in copy a_17894

in(c, (A,a_17893)) at {7} in copy a_17894

new K creating K_17896 at {12} in copy a_17894

out(ch_17986, (A,a_17893,K_17896)) at {13} in copy a_17894 received at {32} in copy a_17894

out(c, K_17896) at {15} in copy a_17894

new Nc creating Nc_18156 at {16} in copy a_17894

out(c, (senc((CreateSessionRequest,pub(skA),Nc_18156),K_17896),sign(h((CreateSessionRequest,pub(skA),Nc_18156)),skA))) at {18} in copy a_17894

in(c, (senc((CreateSessionResponse,pub(sk(a_17893)),a_17895),K_17896),sign(h((CreateSessionResponse,pub(sk(a_17893)),a_17895)),sk(a_17893)))) at {19} in copy a_17894

event(beginCli(A,a_17893,(Login(skA),Passwd(skA)))) at {23} in copy a_17894

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_17896),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_17894

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 128 rules. 4 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_23532 = K[Sess = Sess_23521,Cli = A[],!1 = @sid_23523]

1. The attacker has some term Sess_23521.
attacker(Sess_23521).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_23521.
Using the function 2-tuple the attacker may obtain (A[],Sess_23521).
attacker((A[],Sess_23521)).

4. The message (A[],Sess_23521) that the attacker may have by 3 may be received at input {7}.
We have Sess_23521 <> B[] & Sess_23521 <> A[].
So the message K_23532 may be sent to the attacker at output {15}.
attacker(K_23532).

5. By 1, the attacker may know Sess_23521.
Using the function sk the attacker may obtain sk(Sess_23521).
attacker(sk(Sess_23521)).

6. The attacker has some term Ns_23522.
attacker(Ns_23522).

7. By 5, the attacker may know sk(Sess_23521).
Using the function pub the attacker may obtain pub(sk(Sess_23521)).
attacker(pub(sk(Sess_23521))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_23521)).
By 6, the attacker may know Ns_23522.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522).
attacker((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)).
attacker(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)).
By 5, the attacker may know sk(Sess_23521).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522).
By 4, the attacker may know K_23532.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532).
attacker(senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532),sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532),sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521)))).

14. The message (A[],Sess_23521) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522),K_23532),sign(h((CreateSessionResponse,pub(sk(Sess_23521)),Ns_23522)),sk(Sess_23521))) that the attacker may have by 13 may be received at input {19}.
We have Sess_23521 <> B[] & Sess_23521 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532)).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),K_23532).
By 4, the attacker may know K_23532.
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_23626 at {6} in copy a_23534

in(c, (A,a_23533)) at {7} in copy a_23534

new K creating K_23536 at {12} in copy a_23534

out(ch_23626, (A,a_23533,K_23536)) at {13} in copy a_23534 received at {32} in copy a_23534

out(c, K_23536) at {15} in copy a_23534

new Nc creating Nc_23796 at {16} in copy a_23534

out(c, (senc((CreateSessionRequest,pub(skA),Nc_23796),K_23536),sign(h((CreateSessionRequest,pub(skA),Nc_23796)),skA))) at {18} in copy a_23534

in(c, (senc((CreateSessionResponse,pub(sk(a_23533)),a_23535),K_23536),sign(h((CreateSessionResponse,pub(sk(a_23533)),a_23535)),sk(a_23533)))) at {19} in copy a_23534

event(beginCli(A,a_23533,(Login(skA),Passwd(skA)))) at {23} in copy a_23534

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),K_23536),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_23534

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
