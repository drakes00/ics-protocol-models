Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {15}in(c, (em2: bitstring,sigM2: bitstring));
    {16}let m2: bitstring = sdec(em2,K) in
    {17}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {18}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, m1_66: bitstring);
    {34}let (=CreateSessionRequest,=pkCli_62,Nc_67: bitstring) = m1_66 in
    {35}new Ns_68: bitstring;
    {36}let m2_69: bitstring = (CreateSessionResponse,pkSess_64,Ns_68) in
    {37}out(c, m2_69);
    {38}in(c, m3_70: bitstring);
    {39}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
    {40}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
    {41}new Ns2_71: bitstring;
    {42}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {43}out(c, m4_72)
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}if (X = Y) then
        0
    else
        {47}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {48}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {49}if ((X,Y) = (A,B)) then
            0
        else
            {50}if ((X,Y) = (B,A)) then
                0
            else
                {51}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 108 rules. 8 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Sess_6092 <> B[] && Sess_6092 <> A[] && begin(beginCli(B[],Sess_6092,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_6092) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The attacker has some term Nc_6180.
attacker(Nc_6180).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_6180.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_6180).
attacker((CreateSessionRequest,pub(skB[]),Nc_6180)).

8. We assume as hypothesis that
attacker(Sess_6124).

9. By 2, the attacker may know B[].
By 8, the attacker may know Sess_6124.
Using the function 2-tuple the attacker may obtain (B[],Sess_6124).
attacker((B[],Sess_6124)).

10. The message (B[],Sess_6124) that the attacker may have by 9 may be received at input {45}.
We have Sess_6124 <> A[] & Sess_6124 <> B[].
So the message Skey(skB[],sk(Sess_6124)) may be sent to the attacker at output {51}.
attacker(Skey(skB[],sk(Sess_6124))).

11. By 8, the attacker may know Sess_6124.
Using the function sk the attacker may obtain sk(Sess_6124).
attacker(sk(Sess_6124)).

12. The attacker has some term Ns_6125.
attacker(Ns_6125).

13. By 11, the attacker may know sk(Sess_6124).
Using the function pub the attacker may obtain pub(sk(Sess_6124)).
attacker(pub(sk(Sess_6124))).

14. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

15. By 14, the attacker may know CreateSessionResponse.
By 13, the attacker may know pub(sk(Sess_6124)).
By 12, the attacker may know Ns_6125.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125).
attacker((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)).

16. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)).
attacker(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125))).

17. By 16, the attacker may know h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)).
By 11, the attacker may know sk(Sess_6124).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124))).

18. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125).
By 10, the attacker may know Skey(skB[],sk(Sess_6124)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124)))).

19. By 18, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124))).
By 17, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124))),sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124))),sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124)))).

20. The message (B[],Sess_6124) that the attacker may have by 9 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125),Skey(skB[],sk(Sess_6124))),sign(h((CreateSessionResponse,pub(sk(Sess_6124)),Ns_6125)),sk(Sess_6124))) that the attacker may have by 19 may be received at input {15}.
The event beginCli(B[],Sess_6124,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_6124 <> B[] & Sess_6124 <> A[].
So the message (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

21. By 20, the attacker may know (senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124))),sign(h((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124))).
attacker(senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124)))).

22. By 21, the attacker may know senc((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6124))).
By 10, the attacker may know Skey(skB[],sk(Sess_6124)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

23. By 22, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

24. By 22, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

25. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

26. By 25, the attacker may know ActivateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 24, the attacker may know Login(skB[]).
By 23, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

27. The message (B[],A[]) that the attacker may have by 3 may be received at input {27}.
The message (CreateSessionRequest,pub(skB[]),Nc_6180) that the attacker may have by 7 may be received at input {33}.
The message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 26 may be received at input {38}.
So event endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))) may be executed at {40}.
end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a)) at {6} in copy a_6186

new Nc creating Nc_6397 at {12} in copy a_6186

out(c, (senc((CreateSessionRequest,pub(skB),Nc_6397),Skey(skB,sk(a))),sign(h((CreateSessionRequest,pub(skB),Nc_6397)),skB))) at {14} in copy a_6186

in(c, (B,A)) at {27} in copy a_6189

in(c, (CreateSessionRequest,pub(skB),a_6188)) at {33} in copy a_6189

new Ns_68 creating Ns_6489 at {35} in copy a_6189

out(c, (CreateSessionResponse,pub(skA),Ns_6489)) at {37} in copy a_6189

in(c, (B,a)) at {45} in copy a_6187

out(c, Skey(skB,sk(a))) at {51} in copy a_6187

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_6185),Skey(skB,sk(a))),sign(h((CreateSessionResponse,pub(sk(a)),a_6185)),sk(a)))) at {15} in copy a_6186

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {19} in copy a_6186

out(c, (senc((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB)),Skey(skB,sk(a))),sign(h((ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))),skB))) at {21} in copy a_6186

in(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {38} in copy a_6189

event(endSrv(B,A,(Login(skB),Passwd(skB)))) at {40} in copy a_6189

The event endSrv(B,A,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 86 rules. 4 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 86 rules. 4 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 86 rules. 4 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_22784.
attacker(Sess_22784).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_22784.
Using the function 2-tuple the attacker may obtain (A[],Sess_22784).
attacker((A[],Sess_22784)).

4. The message (A[],Sess_22784) that the attacker may have by 3 may be received at input {45}.
We have Sess_22784 <> B[] & Sess_22784 <> A[].
So the message Skey(skA[],sk(Sess_22784)) may be sent to the attacker at output {51}.
attacker(Skey(skA[],sk(Sess_22784))).

5. By 1, the attacker may know Sess_22784.
Using the function sk the attacker may obtain sk(Sess_22784).
attacker(sk(Sess_22784)).

6. The attacker has some term Ns_22785.
attacker(Ns_22785).

7. By 5, the attacker may know sk(Sess_22784).
Using the function pub the attacker may obtain pub(sk(Sess_22784)).
attacker(pub(sk(Sess_22784))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_22784)).
By 6, the attacker may know Ns_22785.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785).
attacker((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)).
attacker(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)).
By 5, the attacker may know sk(Sess_22784).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785).
By 4, the attacker may know Skey(skA[],sk(Sess_22784)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784))),sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784))),sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784)))).

14. The message (A[],Sess_22784) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785),Skey(skA[],sk(Sess_22784))),sign(h((CreateSessionResponse,pub(sk(Sess_22784)),Ns_22785)),sk(Sess_22784))) that the attacker may have by 13 may be received at input {15}.
We have Sess_22784 <> B[] & Sess_22784 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784))).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_22784))).
By 4, the attacker may know Skey(skA[],sk(Sess_22784)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_22795)) at {6} in copy a_22797

new Nc creating Nc_22995 at {12} in copy a_22797

out(c, (senc((CreateSessionRequest,pub(skA),Nc_22995),Skey(skA,sk(a_22795))),sign(h((CreateSessionRequest,pub(skA),Nc_22995)),skA))) at {14} in copy a_22797

in(c, (A,a_22795)) at {45} in copy a_22798

out(c, Skey(skA,sk(a_22795))) at {51} in copy a_22798

in(c, (senc((CreateSessionResponse,pub(sk(a_22795)),a_22796),Skey(skA,sk(a_22795))),sign(h((CreateSessionResponse,pub(sk(a_22795)),a_22796)),sk(a_22795)))) at {15} in copy a_22797

event(beginCli(A,a_22795,(Login(skA),Passwd(skA)))) at {19} in copy a_22797

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_22795))),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_22797

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 86 rules. 4 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_28500.
attacker(Sess_28500).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_28500.
Using the function 2-tuple the attacker may obtain (A[],Sess_28500).
attacker((A[],Sess_28500)).

4. The message (A[],Sess_28500) that the attacker may have by 3 may be received at input {45}.
We have Sess_28500 <> B[] & Sess_28500 <> A[].
So the message Skey(skA[],sk(Sess_28500)) may be sent to the attacker at output {51}.
attacker(Skey(skA[],sk(Sess_28500))).

5. By 1, the attacker may know Sess_28500.
Using the function sk the attacker may obtain sk(Sess_28500).
attacker(sk(Sess_28500)).

6. The attacker has some term Ns_28501.
attacker(Ns_28501).

7. By 5, the attacker may know sk(Sess_28500).
Using the function pub the attacker may obtain pub(sk(Sess_28500)).
attacker(pub(sk(Sess_28500))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_28500)).
By 6, the attacker may know Ns_28501.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501).
attacker((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)).
attacker(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)).
By 5, the attacker may know sk(Sess_28500).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501).
By 4, the attacker may know Skey(skA[],sk(Sess_28500)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500))),sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500))),sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500)))).

14. The message (A[],Sess_28500) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501),Skey(skA[],sk(Sess_28500))),sign(h((CreateSessionResponse,pub(sk(Sess_28500)),Ns_28501)),sk(Sess_28500))) that the attacker may have by 13 may be received at input {15}.
We have Sess_28500 <> B[] & Sess_28500 <> A[].
So the message (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500))),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500))).
attacker(senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28500))).
By 4, the attacker may know Skey(skA[],sk(Sess_28500)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_28511)) at {6} in copy a_28513

new Nc creating Nc_28711 at {12} in copy a_28513

out(c, (senc((CreateSessionRequest,pub(skA),Nc_28711),Skey(skA,sk(a_28511))),sign(h((CreateSessionRequest,pub(skA),Nc_28711)),skA))) at {14} in copy a_28513

in(c, (A,a_28511)) at {45} in copy a_28514

out(c, Skey(skA,sk(a_28511))) at {51} in copy a_28514

in(c, (senc((CreateSessionResponse,pub(sk(a_28511)),a_28512),Skey(skA,sk(a_28511))),sign(h((CreateSessionResponse,pub(sk(a_28511)),a_28512)),sk(a_28511)))) at {15} in copy a_28513

event(beginCli(A,a_28511,(Login(skA),Passwd(skA)))) at {19} in copy a_28513

out(c, (senc((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_28511))),sign(h((ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_28513

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
