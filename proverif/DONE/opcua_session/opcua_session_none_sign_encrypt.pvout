Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else fail-any)) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {18}let m3: bitstring = (CSC,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else fail-any)) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, (em1: bitstring,sigM1: bitstring));
    {30}let m1_66: bitstring = sdec(em1,K_65) in
    {31}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {32}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {33}new SSC_67: bitstring;
            {34}new Ns2_68: bitstring;
            {35}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {36}out(c, (senc(m2_69,K_65),sign(h(m2_69),skSess_63)));
            {37}in(c, (em3: bitstring,sigM3: bitstring));
            {38}let m3_70: bitstring = sdec(em3,K_65) in
            {39}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {40}let (CSC_71: bitstring,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_70 in
                {41}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
                {42}let m4_72: bitstring = ActivateSessionResponse in
                {43}out(c, (senc(m4_72,K_65),sign(h(m4_72),skSess_63)))
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {47}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {48}if ((X,Y) = (A,B)) then
        0
    else
        {49}if ((X,Y) = (B,A)) then
            0
        else
            {50}out(c, Skey(skX,skY))
) | (
    {51}!
    {52}in(c, (X_73: host,Y_74: host));
    {53}let skX_75: bitstring = (if (X_73 = A) then skA else (if (X_73 = B) then skB else sk(X_73))) in
    {54}let skY_76: bitstring = (if (Y_74 = A) then skA else (if (Y_74 = B) then skB else sk(Y_74))) in
    {55}if ((X_73,Y_74) = (A,B)) then
        0
    else
        {56}if ((X_73,Y_74) = (B,A)) then
            0
        else
            {57}out(c, (Login(skX_75,skY_76),Passwd(skX_75,skY_76)))
)

-- Query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
Completing...
200 rules inserted. The rule base contains 135 rules. 12 rules in the queue.
Starting query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
RESULT event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 1 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 1 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 1 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))
Abbreviations:
CSC_22304 = CSC[m2 = (SSC_22298,Ns2_22299),Sess = B[],Cli = A[],!1 = @sid_22300]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_22299.
attacker(Ns2_22299).

5. The attacker has some term SSC_22298.
attacker(SSC_22298).

6. By 5, the attacker may know SSC_22298.
By 4, the attacker may know Ns2_22299.
Using the function 2-tuple the attacker may obtain (SSC_22298,Ns2_22299).
attacker((SSC_22298,Ns2_22299)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_22298,Ns2_22299) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_22304,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_22304,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_22304,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_22306

out(c, CreateSessionRequest) at {13} in copy a_22306

in(c, (a,a_22305)) at {14} in copy a_22306

new CSC creating CSC_22307 at {16} in copy a_22306

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_22306

out(c, (CSC_22307,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_22306

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 1 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))
Abbreviations:
CSC_27982 = CSC[m2 = (SSC_27976,Ns2_27977),Sess = B[],Cli = A[],!1 = @sid_27978]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_27977.
attacker(Ns2_27977).

5. The attacker has some term SSC_27976.
attacker(SSC_27976).

6. By 5, the attacker may know SSC_27976.
By 4, the attacker may know Ns2_27977.
Using the function 2-tuple the attacker may obtain (SSC_27976,Ns2_27977).
attacker((SSC_27976,Ns2_27977)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_27976,Ns2_27977) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_27982,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_27982,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_27982,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_27985

out(c, CreateSessionRequest) at {13} in copy a_27985

in(c, (a_27983,a_27984)) at {14} in copy a_27985

new CSC creating CSC_27986 at {16} in copy a_27985

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_27985

out(c, (CSC_27986,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_27985

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
