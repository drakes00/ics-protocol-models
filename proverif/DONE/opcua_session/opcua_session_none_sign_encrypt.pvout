File "opcua_session_none_sign_encrypt.pv", line 70, character 9 - line 70, character 10:
Warning: identifier K rebound
File "opcua_session_none_sign_encrypt.pv", line 105, character 41 - line 105, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}new K_59: bitstring;
    {15}out(ch, (Cli,Sess,K_59));
    {16}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K_59 else CreateSessionRequest) in
    {17}out(c, tmp);
    {18}new Nc: bitstring;
    {19}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {20}out(c, m1);
    {21}in(c, m2: bitstring);
    {22}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
    {23}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
    {24}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli)) in
    {25}out(c, m3);
    {26}in(c, m4: bitstring);
    {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {28}if ((Sess = A) || (Sess = B)) then
    {29}event endCli(Sess,Cli,Ns)
) | (
    {30}in(ch, (Cli_60: host,Sess_61: host,K_62: bitstring));
    {31}let skCli_63: bitstring = (if (Cli_60 = A) then skA else (if (Cli_60 = B) then skB else sk(Cli_60))) in
    {32}let pkCli_64: bitstring = pub(skCli_63) in
    {33}let skSess_65: bitstring = (if (Sess_61 = A) then skA else (if (Sess_61 = B) then skB else fail-any)) in
    {34}let pkSess_66: bitstring = pub(skSess_65) in
    {35}let tmp_67: bitstring = (if ((Cli_60 <> A) && (Cli_60 <> B)) then K_62 else CreateSessionRequest) in
    {36}out(c, tmp_67);
    {37}in(c, (em1: bitstring,sigM1: bitstring));
    {38}new Nc_68: bitstring;
    {39}let m1_69: bitstring = sdec(em1,K_62) in
    {40}if (verify(h(m1_69),sigM1,pkCli_64) <> true) then
        0
    else
        {41}let (=CreateSessionRequest,=pkCli_64,Nc_70: bitstring) = m1_69 in
        {42}new Ns_71: bitstring;
        {43}event beginSrv(Sess_61,Cli_60,Ns_71);
        {44}let m2_72: bitstring = (CreateSessionResponse,pkSess_66,Nc_70,Ns_71) in
        {45}out(c, (senc(m2_72,K_62),sign(h(m2_72),skSess_65)));
        {46}in(c, (em3: bitstring,sigM3: bitstring));
        {47}let m3_73: bitstring = sdec(em3,K_62) in
        {48}if (verify(h(m3_73),sigM3,pkCli_64) <> true) then
            0
        else
            {49}let (=ActivateSessionRequest,=pkCli_64,=Login(pkCli_64),=Passwd(skCli_63)) = m3_73 in
            {50}new Ns2_74: bitstring;
            {51}let m4_75: bitstring = (ActivateSessionResponse,Ns2_74) in
            {52}out(c, (senc(m4_75,K_62),sign(h(m4_75),skSess_65)));
            {53}if ((Cli_60 = A) || (Cli_60 = B)) then
            {54}event endSrv(Cli_60,Sess_61,(Login(pkCli_64),Passwd(skCli_63)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 122 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 206 rules. 20 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_8045) -> end(endCli(A[],B[],N_8045))
Abbreviations:
Nc_8072 = Nc[Sess = A[],Cli = B[],!1 = @sid_8067]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_8071).

5. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skB[]),Nc_8072) may be sent to the attacker at output {20}.
attacker((CreateSessionRequest,pub(skB[]),Nc_8072)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_8072).
Using the function 3-proj-3-tuple the attacker may obtain Nc_8072.
attacker(Nc_8072).

7. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skA[]).
By 6, the attacker may know Nc_8072.
By 4, the attacker may know N_8071.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_8072,N_8071).
attacker((CreateSessionResponse,pub(skA[]),Nc_8072,N_8071)).

10. The attacker has some term Ns2_8066.
attacker(Ns2_8066).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_8066.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_8066).
attacker((ActivateSessionResponse,Ns2_8066)).

13. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_8072,N_8071) that the attacker may have by 9 may be received at input {21}.
The message (ActivateSessionResponse,Ns2_8066) that the attacker may have by 12 may be received at input {26}.
So event endCli(A[],B[],N_8071) may be executed at {29}.
end(endCli(A[],B[],N_8071)).


Could not find a trace corresponding to this derivation.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) cannot be proved.
-- Query event(endSrv(X_8347,Y_8348,N_8349)) ==> event(beginCli(X_8347,Y_8348,N_8349))
Completing...
200 rules inserted. The rule base contains 122 rules. 44 rules in the queue.
400 rules inserted. The rule base contains 203 rules. 47 rules in the queue.
Starting query event(endSrv(X_8347,Y_8348,N_8349)) ==> event(beginCli(X_8347,Y_8348,N_8349))
RESULT event(endSrv(X_8347,Y_8348,N_8349)) ==> event(beginCli(X_8347,Y_8348,N_8349)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 132 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 206 rules. 18 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_22020 = Nc[Sess = A[],Cli = A[],!1 = @sid_22014]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_22015.
attacker(Ns_22015).

4. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_22020) may be sent to the attacker at output {20}.
attacker((CreateSessionRequest,pub(skA[]),Nc_22020)).

5. By 4, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_22020).
Using the function 3-proj-3-tuple the attacker may obtain Nc_22020.
attacker(Nc_22020).

6. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(skA[]).
By 5, the attacker may know Nc_22020.
By 3, the attacker may know Ns_22015.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_22020,Ns_22015).
attacker((CreateSessionResponse,pub(skA[]),Nc_22020,Ns_22015)).

9. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_22020,Ns_22015) that the attacker may have by 8 may be received at input {21}.
So the message (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])) may be sent to the attacker at output {25}.
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

10. By 9, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


Could not find a trace corresponding to this derivation.
RESULT not attacker(Passwd(skA[])) cannot be proved.
