File "opcua_session_none_sign_encrypt.pv", line 104, character 41 - line 104, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}new Nc_66: bitstring;
    {35}let m1_67: bitstring = sdec(em1,K_61) in
    {36}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {38}new Ns_69: bitstring;
        {39}event beginSrv(Sess_60,Cli_59,Ns_69);
        {40}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {41}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {42}in(c, (em3: bitstring,sigM3: bitstring));
        {43}let m3_71: bitstring = sdec(em3,K_61) in
        {44}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {45}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {46}new Ns2_72: bitstring;
            {47}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {48}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)));
            {49}if ((Cli_59 = A) || (Cli_59 = B)) then
            {50}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 128 rules. 36 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_6665) -> end(endCli(A[],B[],N_6665))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_6684).

5. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skA[]).
By 4, the attacker may know N_6684.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),N_6684).
attacker((CreateSessionResponse,pub(skA[]),N_6684)).

8. The attacker has some term Ns2_6679.
attacker(Ns2_6679).

9. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

10. By 9, the attacker may know ActivateSessionResponse.
By 8, the attacker may know Ns2_6679.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_6679).
attacker((ActivateSessionResponse,Ns2_6679)).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),N_6684) that the attacker may have by 7 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_6679) that the attacker may have by 10 may be received at input {24}.
So event endCli(A[],B[],N_6684) may be executed at {27}.
end(endCli(A[],B[],N_6684)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_6775 at {6} in copy a_6686

in(c, (B,A)) at {7} in copy a_6686

new K creating K_6846 at {12} in copy a_6686

out(ch_6775, (B,A,K_6846)) at {13} in copy a_6686 received at {28} in copy a_6686

out(c, CreateSessionRequest) at {15} in copy a_6686

new Nc creating Nc_6946 at {16} in copy a_6686

out(c, (CreateSessionRequest,pub(skB),Nc_6946)) at {18} in copy a_6686

in(c, (CreateSessionResponse,pub(skA),a)) at {19} in copy a_6686

event(beginCli(B,A,(Login(skB),Passwd(skB)))) at {21} in copy a_6686

out(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_6686

in(c, (ActivateSessionResponse,a_6685)) at {24} in copy a_6686

event(endCli(A,B,a)) at {27} in copy a_6686

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_6974,Y_6975,N_6976)) ==> event(beginCli(X_6974,Y_6975,N_6976))
Completing...
200 rules inserted. The rule base contains 112 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 228 rules. 36 rules in the queue.
Starting query event(endSrv(X_6974,Y_6975,N_6976)) ==> event(beginCli(X_6974,Y_6975,N_6976))
RESULT event(endSrv(X_6974,Y_6975,N_6976)) ==> event(beginCli(X_6974,Y_6975,N_6976)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 26 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_19954.
attacker(Ns_19954).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_19954.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_19954).
attacker((CreateSessionResponse,pub(skA[]),Ns_19954)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_19954) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_20051 at {6} in copy a_19961

in(c, (A,A)) at {7} in copy a_19961

new K creating K_20122 at {12} in copy a_19961

out(ch_20051, (A,A,K_20122)) at {13} in copy a_19961 received at {28} in copy a_19961

out(c, CreateSessionRequest) at {15} in copy a_19961

new Nc creating Nc_20222 at {16} in copy a_19961

out(c, (CreateSessionRequest,pub(skA),Nc_20222)) at {18} in copy a_19961

in(c, (CreateSessionResponse,pub(skA),a_19960)) at {19} in copy a_19961

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_19961

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_19961

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 138 rules. 26 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_25833.
attacker(Ns_25833).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_25833.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_25833).
attacker((CreateSessionResponse,pub(skA[]),Ns_25833)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_25833) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_25930 at {6} in copy a_25840

in(c, (A,A)) at {7} in copy a_25840

new K creating K_26001 at {12} in copy a_25840

out(ch_25930, (A,A,K_26001)) at {13} in copy a_25840 received at {28} in copy a_25840

out(c, CreateSessionRequest) at {15} in copy a_25840

new Nc creating Nc_26101 at {16} in copy a_25840

out(c, (CreateSessionRequest,pub(skA),Nc_26101)) at {18} in copy a_25840

in(c, (CreateSessionResponse,pub(skA),a_25839)) at {19} in copy a_25840

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_25840

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_25840

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
