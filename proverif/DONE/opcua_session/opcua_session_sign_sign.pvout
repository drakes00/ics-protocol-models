Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else sk(Cli))) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(pkCli,pkSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (m1,sign(h(m1),skCli)));
    {14}in(c, (m2: bitstring,sigM2: bitstring));
    {15}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {16}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {17}new CSC: bitstring;
        {18}event beginCli(Cli,Sess,(Login(pkCli,pkSess),Passwd(pkCli,pkSess)));
        {19}let m3: bitstring = (CSC,Login(pkCli,pkSess),Passwd(pkCli,pkSess)) in
        {20}out(c, (m3,sign(h(m3),skCli)));
        {21}in(c, (m4: bitstring,sigM4: bitstring));
        {22}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {23}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {24}!
    {25}in(c, (Cli_59: host,Sess_60: host));
    {26}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {27}let pkCli_62: bitstring = pub(skCli_61) in
    {28}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else sk(Sess_60))) in
    {29}let pkSess_64: bitstring = pub(skSess_63) in
    {30}let K_65: bitstring = Skey(pkCli_62,pkSess_64) in
    {31}in(c, (m1_66: bitstring,sigM1: bitstring));
    {32}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {33}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {34}new SSC_67: bitstring;
            {35}new Ns2_68: bitstring;
            {36}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {37}out(c, (m2_69,sign(h(m2_69),skSess_63)));
            {38}in(c, (m3_70: bitstring,sigM3: bitstring));
            {39}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {40}let (CSC_71: bitstring,=Login(pkCli_62,pkSess_64),=Passwd(pkCli_62,pkSess_64)) = m3_70 in
                {41}event endSrv(Cli_59,Sess_60,(Login(pkCli_62,pkSess_64),Passwd(pkCli_62,pkSess_64)));
                {42}let m4_72: bitstring = ActivateSessionResponse in
                {43}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {47}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {48}if ((X,Y) = (A,B)) then
        0
    else
        {49}if ((X,Y) = (B,A)) then
            0
        else
            {50}out(c, Skey(pub(skX),pub(skY)))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 101 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 160 rules. 84 rules in the queue.
600 rules inserted. The rule base contains 155 rules. 47 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(A[],B[],(Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))))) -> end(endSrv(A[],B[],(Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))))
goal reachable: begin(beginCli(B[],A[],(Login(pub(skB[]),pub(skA[])),Passwd(pub(skB[]),pub(skA[]))))) -> end(endSrv(B[],A[],(Login(pub(skB[]),pub(skA[])),Passwd(pub(skB[]),pub(skA[])))))
goal reachable: begin(beginCli(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[]))))) -> end(endSrv(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[])))))
goal reachable: X_11871 <> B[] && X_11871 <> A[] && begin(beginCli(X_11871,B[],(Login(pub(sk(X_11871)),pub(skB[])),Passwd(pub(sk(X_11871)),pub(skB[]))))) && attacker(X_11871) -> end(endSrv(X_11871,B[],(Login(pub(sk(X_11871)),pub(skB[])),Passwd(pub(sk(X_11871)),pub(skB[])))))
goal reachable: begin(beginCli(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[]))))) -> end(endSrv(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[])))))
goal reachable: X_11872 <> B[] && X_11872 <> A[] && begin(beginCli(X_11872,A[],(Login(pub(sk(X_11872)),pub(skA[])),Passwd(pub(sk(X_11872)),pub(skA[]))))) && attacker(X_11872) -> end(endSrv(X_11872,A[],(Login(pub(sk(X_11872)),pub(skA[])),Passwd(pub(sk(X_11872)),pub(skA[])))))
goal reachable: Y_11873 <> B[] && Y_11873 <> A[] && begin(beginCli(B[],Y_11873,(Login(pub(skB[]),pub(sk(Y_11873))),Passwd(pub(skB[]),pub(sk(Y_11873)))))) && attacker(Y_11873) -> end(endSrv(B[],Y_11873,(Login(pub(skB[]),pub(sk(Y_11873))),Passwd(pub(skB[]),pub(sk(Y_11873))))))
goal reachable: Y_11874 <> B[] && Y_11874 <> A[] && begin(beginCli(A[],Y_11874,(Login(pub(skA[]),pub(sk(Y_11874))),Passwd(pub(skA[]),pub(sk(Y_11874)))))) && attacker(Y_11874) -> end(endSrv(A[],Y_11874,(Login(pub(skA[]),pub(sk(Y_11874))),Passwd(pub(skA[]),pub(sk(Y_11874))))))
goal reachable: Y_11876 <> B[] && Y_11876 <> A[] && X_11875 <> B[] && X_11875 <> A[] && begin(beginCli(X_11875,Y_11876,(Login(pub(sk(X_11875)),pub(sk(Y_11876))),Passwd(pub(sk(X_11875)),pub(sk(Y_11876)))))) && attacker(X_11875) && attacker(Y_11876) -> end(endSrv(X_11875,Y_11876,(Login(pub(sk(X_11875)),pub(sk(Y_11876))),Passwd(pub(sk(X_11875)),pub(sk(Y_11876))))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(pub(skB[]),pub(skA[])))
Completing...
200 rules inserted. The rule base contains 99 rules. 60 rules in the queue.
400 rules inserted. The rule base contains 111 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 140 rules. 4 rules in the queue.
Starting query not attacker(Skey(pub(skB[]),pub(skA[])))
RESULT not attacker(Skey(pub(skB[]),pub(skA[]))) is true.
-- Query not attacker(Skey(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 99 rules. 60 rules in the queue.
400 rules inserted. The rule base contains 111 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 140 rules. 4 rules in the queue.
Starting query not attacker(Skey(pub(skA[]),pub(skB[])))
RESULT not attacker(Skey(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Passwd(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 99 rules. 60 rules in the queue.
400 rules inserted. The rule base contains 111 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 140 rules. 4 rules in the queue.
Starting query not attacker(Passwd(pub(skA[]),pub(skB[])))
goal reachable: attacker(Passwd(pub(skA[]),pub(skB[])))
Abbreviations:
SSC_42012 = SSC_67[sigM1 = sign(h(CreateSessionRequest),skB[]),m1_66 = CreateSessionRequest,Sess_60 = B[],Cli_59 = B[],!1 = @sid_41995]
Ns2_42013 = Ns2_68[sigM1 = sign(h(CreateSessionRequest),skB[]),m1_66 = CreateSessionRequest,Sess_60 = B[],Cli_59 = B[],!1 = @sid_41995]
CSC_42014 = CSC[sigM2 = sign(h((SSC_42012,Ns2_42013)),skB[]),m2 = (SSC_42012,Ns2_42013),Sess = B[],Cli = A[],!1 = @sid_42006]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

5. The message (B[],B[]) that the attacker may have by 4 may be received at input {6}.
So the message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) may be sent to the attacker at output {13}.
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

6. By 5, the attacker may know (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(CreateSessionRequest),skB[]).
attacker(sign(h(CreateSessionRequest),skB[])).

7. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

8. By 7, the attacker may know CreateSessionRequest.
By 6, the attacker may know sign(h(CreateSessionRequest),skB[]).
Using the function 2-tuple the attacker may obtain (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

9. The message (B[],B[]) that the attacker may have by 4 may be received at input {25}.
The message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) that the attacker may have by 8 may be received at input {31}.
So the message ((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[])) may be sent to the attacker at output {37}.
attacker(((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[]))).

10. By 9, the attacker may know ((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((SSC_42012,Ns2_42013)),skB[]).
attacker(sign(h((SSC_42012,Ns2_42013)),skB[])).

11. By 9, the attacker may know ((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (SSC_42012,Ns2_42013).
attacker((SSC_42012,Ns2_42013)).

12. By 11, the attacker may know (SSC_42012,Ns2_42013).
Using the function 2-proj-2-tuple the attacker may obtain Ns2_42013.
attacker(Ns2_42013).

13. By 11, the attacker may know (SSC_42012,Ns2_42013).
Using the function 1-proj-2-tuple the attacker may obtain SSC_42012.
attacker(SSC_42012).

14. By 13, the attacker may know SSC_42012.
By 12, the attacker may know Ns2_42013.
Using the function 2-tuple the attacker may obtain (SSC_42012,Ns2_42013).
attacker((SSC_42012,Ns2_42013)).

15. By 14, the attacker may know (SSC_42012,Ns2_42013).
By 10, the attacker may know sign(h((SSC_42012,Ns2_42013)),skB[]).
Using the function 2-tuple the attacker may obtain ((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[])).
attacker(((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[]))).

16. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_42012,Ns2_42013),sign(h((SSC_42012,Ns2_42013)),skB[])) that the attacker may have by 15 may be received at input {14}.
So the message ((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[]))).

17. By 16, the attacker may know ((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
attacker((CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))).

18. By 17, the attacker may know (CSC_42014,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(pub(skA[]),pub(skB[])).
attacker(Passwd(pub(skA[]),pub(skB[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,B)) at {6} in copy a_42016

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {13} in copy a_42016

in(c, (A,B)) at {6} in copy a_42015

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_42015

in(c, (B,B)) at {25} in copy a

in(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {31} in copy a

new SSC_67 creating SSC_42017 at {34} in copy a

new Ns2_68 creating Ns2_42018 at {35} in copy a

out(c, ((SSC_42017,Ns2_42018),sign(h((SSC_42017,Ns2_42018)),skB))) at {37} in copy a

in(c, ((SSC_42017,Ns2_42018),sign(h((SSC_42017,Ns2_42018)),skB))) at {14} in copy a_42015

new CSC creating CSC_42019 at {17} in copy a_42015

event(beginCli(A,B,(Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))))) at {18} in copy a_42015

out(c, ((CSC_42019,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))),sign(h((CSC_42019,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB)))),skA))) at {20} in copy a_42015

The attacker has the message Passwd(pub(skA),pub(skB)).
A trace has been found.
RESULT not attacker(Passwd(pub(skA[]),pub(skB[]))) is false.
-- Query not attacker(Login(pub(skA[]),pub(skB[])))
Completing...
200 rules inserted. The rule base contains 99 rules. 60 rules in the queue.
400 rules inserted. The rule base contains 111 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 140 rules. 4 rules in the queue.
Starting query not attacker(Login(pub(skA[]),pub(skB[])))
goal reachable: attacker(Login(pub(skA[]),pub(skB[])))
Abbreviations:
SSC_52520 = SSC_67[sigM1 = sign(h(CreateSessionRequest),skB[]),m1_66 = CreateSessionRequest,Sess_60 = B[],Cli_59 = B[],!1 = @sid_52503]
Ns2_52521 = Ns2_68[sigM1 = sign(h(CreateSessionRequest),skB[]),m1_66 = CreateSessionRequest,Sess_60 = B[],Cli_59 = B[],!1 = @sid_52503]
CSC_52522 = CSC[sigM2 = sign(h((SSC_52520,Ns2_52521)),skB[]),m2 = (SSC_52520,Ns2_52521),Sess = B[],Cli = A[],!1 = @sid_52514]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

5. The message (B[],B[]) that the attacker may have by 4 may be received at input {6}.
So the message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) may be sent to the attacker at output {13}.
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

6. By 5, the attacker may know (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(CreateSessionRequest),skB[]).
attacker(sign(h(CreateSessionRequest),skB[])).

7. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

8. By 7, the attacker may know CreateSessionRequest.
By 6, the attacker may know sign(h(CreateSessionRequest),skB[]).
Using the function 2-tuple the attacker may obtain (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])).
attacker((CreateSessionRequest,sign(h(CreateSessionRequest),skB[]))).

9. The message (B[],B[]) that the attacker may have by 4 may be received at input {25}.
The message (CreateSessionRequest,sign(h(CreateSessionRequest),skB[])) that the attacker may have by 8 may be received at input {31}.
So the message ((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[])) may be sent to the attacker at output {37}.
attacker(((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[]))).

10. By 9, the attacker may know ((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((SSC_52520,Ns2_52521)),skB[]).
attacker(sign(h((SSC_52520,Ns2_52521)),skB[])).

11. By 9, the attacker may know ((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (SSC_52520,Ns2_52521).
attacker((SSC_52520,Ns2_52521)).

12. By 11, the attacker may know (SSC_52520,Ns2_52521).
Using the function 2-proj-2-tuple the attacker may obtain Ns2_52521.
attacker(Ns2_52521).

13. By 11, the attacker may know (SSC_52520,Ns2_52521).
Using the function 1-proj-2-tuple the attacker may obtain SSC_52520.
attacker(SSC_52520).

14. By 13, the attacker may know SSC_52520.
By 12, the attacker may know Ns2_52521.
Using the function 2-tuple the attacker may obtain (SSC_52520,Ns2_52521).
attacker((SSC_52520,Ns2_52521)).

15. By 14, the attacker may know (SSC_52520,Ns2_52521).
By 10, the attacker may know sign(h((SSC_52520,Ns2_52521)),skB[]).
Using the function 2-tuple the attacker may obtain ((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[])).
attacker(((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[]))).

16. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_52520,Ns2_52521),sign(h((SSC_52520,Ns2_52521)),skB[])) that the attacker may have by 15 may be received at input {14}.
So the message ((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[]))).

17. By 16, the attacker may know ((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))),sign(h((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
attacker((CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))).

18. By 17, the attacker may know (CSC_52522,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
Using the function 2-proj-3-tuple the attacker may obtain Login(pub(skA[]),pub(skB[])).
attacker(Login(pub(skA[]),pub(skB[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,B)) at {6} in copy a_52525

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {13} in copy a_52525

in(c, (A,B)) at {6} in copy a_52524

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_52524

in(c, (B,B)) at {25} in copy a_52523

in(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skB))) at {31} in copy a_52523

new SSC_67 creating SSC_52526 at {34} in copy a_52523

new Ns2_68 creating Ns2_52527 at {35} in copy a_52523

out(c, ((SSC_52526,Ns2_52527),sign(h((SSC_52526,Ns2_52527)),skB))) at {37} in copy a_52523

in(c, ((SSC_52526,Ns2_52527),sign(h((SSC_52526,Ns2_52527)),skB))) at {14} in copy a_52524

new CSC creating CSC_52528 at {17} in copy a_52524

event(beginCli(A,B,(Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))))) at {18} in copy a_52524

out(c, ((CSC_52528,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))),sign(h((CSC_52528,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB)))),skA))) at {20} in copy a_52524

The attacker has the message Login(pub(skA),pub(skB)).
A trace has been found.
RESULT not attacker(Login(pub(skA[]),pub(skB[]))) is false.
