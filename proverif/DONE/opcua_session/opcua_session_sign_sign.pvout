File "opcua_session_sign_sign.pv", line 70, character 9 - line 70, character 10:
Warning: identifier K rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}new K_59: bitstring;
    {15}out(ch, (Cli,Sess,K_59));
    {16}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K_59 else CreateSessionRequest) in
    {17}out(c, tmp);
    {18}new Nc: bitstring;
    {19}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {20}out(c, (m1,sign(h(m1),skCli)));
    {21}in(c, (m2: bitstring,sigM2: bitstring));
    {22}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {23}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {24}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
        {25}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli)) in
        {26}out(c, (m3,sign(h(m3),skCli)));
        {27}in(c, (m4: bitstring,sigM4: bitstring));
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_60: host,Sess_61: host,K_62: bitstring));
    {33}let skCli_63: bitstring = (if (Cli_60 = A) then skA else (if (Cli_60 = B) then skB else sk(Cli_60))) in
    {34}let pkCli_64: bitstring = pub(skCli_63) in
    {35}let skSess_65: bitstring = (if (Sess_61 = A) then skA else (if (Sess_61 = B) then skB else fail-any)) in
    {36}let pkSess_66: bitstring = pub(skSess_65) in
    {37}let tmp_67: bitstring = (if ((Cli_60 <> A) && (Cli_60 <> B)) then K_62 else CreateSessionRequest) in
    {38}out(c, tmp_67);
    {39}in(c, (m1_68: bitstring,sigM1: bitstring));
    {40}if (verify(h(m1_68),sigM1,pkCli_64) <> true) then
        0
    else
        {41}let (=CreateSessionRequest,=pkCli_64,Nc_69: bitstring) = m1_68 in
        {42}new Ns_70: bitstring;
        {43}event beginSrv(Sess_61,Cli_60,Ns_70);
        {44}let m2_71: bitstring = (CreateSessionResponse,pkSess_66,Nc_69,Ns_70) in
        {45}out(c, (m2_71,sign(h(m2_71),skSess_65)));
        {46}in(c, (m3_72: bitstring,sigM3: bitstring));
        {47}if (verify(h(m3_72),sigM3,pkCli_64) <> true) then
            0
        else
            {48}let (=ActivateSessionRequest,=pkCli_64,=Login(pkCli_64),=Passwd(skCli_63)) = m3_72 in
            {49}new Ns2_73: bitstring;
            {50}let m4_74: bitstring = (ActivateSessionResponse,Ns2_73) in
            {51}out(c, (m4_74,sign(h(m4_74),skSess_65)));
            {52}if ((Cli_60 = A) || (Cli_60 = B)) then
            {53}event endSrv(Cli_60,Sess_61,(Login(pkCli_64),Passwd(skCli_63)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 120 rules. 92 rules in the queue.
400 rules inserted. The rule base contains 146 rules. 206 rules in the queue.
600 rules inserted. The rule base contains 155 rules. 221 rules in the queue.
800 rules inserted. The rule base contains 162 rules. 190 rules in the queue.
1000 rules inserted. The rule base contains 202 rules. 160 rules in the queue.
1200 rules inserted. The rule base contains 252 rules. 142 rules in the queue.
1400 rules inserted. The rule base contains 331 rules. 141 rules in the queue.
1600 rules inserted. The rule base contains 385 rules. 92 rules in the queue.
1800 rules inserted. The rule base contains 396 rules. 94 rules in the queue.
2000 rules inserted. The rule base contains 328 rules. 86 rules in the queue.
2200 rules inserted. The rule base contains 388 rules. 64 rules in the queue.
2400 rules inserted. The rule base contains 396 rules. 27 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: Cli_24819 <> B[] && Cli_24819 <> A[] && begin(beginSrv(B[],Cli_24819,Ns_70[sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_24819)),Nc[Sess = B[],Cli = A[],!1 = @sid_24820])),sk(Cli_24819)),m1_68 = (CreateSessionRequest,pub(sk(Cli_24819)),Nc[Sess = B[],Cli = A[],!1 = @sid_24820]),K_62 = K[Sess = B[],Cli = Cli_24819,!1 = @sid_24821],Sess_61 = B[],Cli_60 = Cli_24819,!1 = @sid_24821])) && attacker(Cli_24819) -> end(endCli(B[],A[],Ns_70[sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_24819)),Nc[Sess = B[],Cli = A[],!1 = @sid_24820])),sk(Cli_24819)),m1_68 = (CreateSessionRequest,pub(sk(Cli_24819)),Nc[Sess = B[],Cli = A[],!1 = @sid_24820]),K_62 = K[Sess = B[],Cli = Cli_24819,!1 = @sid_24821],Sess_61 = B[],Cli_60 = Cli_24819,!1 = @sid_24821]))
Abbreviations:
Nc_24992 = Nc[Sess = B[],Cli = A[],!1 = @sid_24987]
K_24993 = K[Sess = B[],Cli = Cli_24968,!1 = @sid_24971]
Ns_24994 = Ns_70[sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968)),m1_68 = (CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),K_62 = K_24993,Sess_61 = B[],Cli_60 = Cli_24968,!1 = @sid_24971]
Ns2_24995 = Ns2_73[sigM3 = sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968)),m3_72 = (ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))),sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968)),m1_68 = (CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),K_62 = K_24993,Sess_61 = B[],Cli_60 = Cli_24968,!1 = @sid_24971]
ch_24996 = ch[!1 = @sid_24971]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. We assume as hypothesis that
attacker(Cli_24968).

5. By 4, the attacker may know Cli_24968.
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (Cli_24968,B[]).
attacker((Cli_24968,B[])).

6. The message (Cli_24968,B[]) that the attacker may have by 5 may be received at input {7}.
So the message (Cli_24968,B[],K_24993) may be sent on channel ch_24996 at output {9}.
mess(ch_24996,(Cli_24968,B[],K_24993)).

7. By 4, the attacker may know Cli_24968.
Using the function sk the attacker may obtain sk(Cli_24968).
attacker(sk(Cli_24968)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
So the message ((CreateSessionRequest,pub(skA[]),Nc_24992),sign(h((CreateSessionRequest,pub(skA[]),Nc_24992)),skA[])) may be sent to the attacker at output {20}.
attacker(((CreateSessionRequest,pub(skA[]),Nc_24992),sign(h((CreateSessionRequest,pub(skA[]),Nc_24992)),skA[]))).

9. By 8, the attacker may know ((CreateSessionRequest,pub(skA[]),Nc_24992),sign(h((CreateSessionRequest,pub(skA[]),Nc_24992)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_24992).
attacker((CreateSessionRequest,pub(skA[]),Nc_24992)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_24992).
Using the function 3-proj-3-tuple the attacker may obtain Nc_24992.
attacker(Nc_24992).

11. By 7, the attacker may know sk(Cli_24968).
Using the function pub the attacker may obtain pub(sk(Cli_24968)).
attacker(pub(sk(Cli_24968))).

12. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

13. By 12, the attacker may know CreateSessionRequest.
By 11, the attacker may know pub(sk(Cli_24968)).
By 10, the attacker may know Nc_24992.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992).
attacker((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)).

14. By 13, the attacker may know (CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992).
Using the function h the attacker may obtain h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)).
attacker(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992))).

15. By 14, the attacker may know h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)).
By 7, the attacker may know sk(Cli_24968).
Using the function sign the attacker may obtain sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968)).
attacker(sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968))).

16. By 13, the attacker may know (CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992).
By 15, the attacker may know sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968)).
Using the function 2-tuple the attacker may obtain ((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968))).
attacker(((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968)))).

17. The message (Cli_24968,B[],K_24993) that may be sent on channel ch_24996 by 6 may be received at input {32}.
The message ((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968))) that the attacker may have by 16 may be received at input {39}.
The event beginSrv(B[],Cli_24968,Ns_24994) may be executed at {43}.
We have Cli_24968 <> B[] & Cli_24968 <> A[].
So the message ((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])) may be sent to the attacker at output {45}.
attacker(((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[]))).

18. By 17, the attacker may know ((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[]).
attacker(sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])).

19. By 17, the attacker may know ((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994).
attacker((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)).

20. By 19, the attacker may know (CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994).
Using the function 4-proj-4-tuple the attacker may obtain Ns_24994.
attacker(Ns_24994).

21. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

22. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

23. By 22, the attacker may know CreateSessionResponse.
By 21, the attacker may know pub(skB[]).
By 10, the attacker may know Nc_24992.
By 20, the attacker may know Ns_24994.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994).
attacker((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)).

24. By 23, the attacker may know (CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994).
By 18, the attacker may know sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])).
attacker(((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[]))).

25. By 7, the attacker may know sk(Cli_24968).
Using the function Passwd the attacker may obtain Passwd(sk(Cli_24968)).
attacker(Passwd(sk(Cli_24968))).

26. By 11, the attacker may know pub(sk(Cli_24968)).
Using the function Login the attacker may obtain Login(pub(sk(Cli_24968))).
attacker(Login(pub(sk(Cli_24968)))).

27. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

28. By 27, the attacker may know ActivateSessionRequest.
By 11, the attacker may know pub(sk(Cli_24968)).
By 26, the attacker may know Login(pub(sk(Cli_24968))).
By 25, the attacker may know Passwd(sk(Cli_24968)).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))).
attacker((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))).

29. By 28, the attacker may know (ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))).
Using the function h the attacker may obtain h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))).
attacker(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))))).

30. By 29, the attacker may know h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))).
By 7, the attacker may know sk(Cli_24968).
Using the function sign the attacker may obtain sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968)).
attacker(sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968))).

31. By 28, the attacker may know (ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))).
By 30, the attacker may know sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968)).
Using the function 2-tuple the attacker may obtain ((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))),sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968))).
attacker(((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))),sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968)))).

32. The message (Cli_24968,B[],K_24993) that may be sent on channel ch_24996 by 6 may be received at input {32}.
The message ((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992),sign(h((CreateSessionRequest,pub(sk(Cli_24968)),Nc_24992)),sk(Cli_24968))) that the attacker may have by 16 may be received at input {39}.
The event beginSrv(B[],Cli_24968,Ns_24994) may be executed at {43}.
The message ((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968))),sign(h((ActivateSessionRequest,pub(sk(Cli_24968)),Login(pub(sk(Cli_24968))),Passwd(sk(Cli_24968)))),sk(Cli_24968))) that the attacker may have by 31 may be received at input {46}.
We have Cli_24968 <> B[] & Cli_24968 <> A[].
So the message ((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[])) may be sent to the attacker at output {51}.
attacker(((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[]))).

33. By 32, the attacker may know ((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((ActivateSessionResponse,Ns2_24995)),skB[]).
attacker(sign(h((ActivateSessionResponse,Ns2_24995)),skB[])).

34. By 32, the attacker may know ((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_24995).
attacker((ActivateSessionResponse,Ns2_24995)).

35. By 34, the attacker may know (ActivateSessionResponse,Ns2_24995).
Using the function 2-proj-2-tuple the attacker may obtain Ns2_24995.
attacker(Ns2_24995).

36. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

37. By 36, the attacker may know ActivateSessionResponse.
By 35, the attacker may know Ns2_24995.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_24995).
attacker((ActivateSessionResponse,Ns2_24995)).

38. By 37, the attacker may know (ActivateSessionResponse,Ns2_24995).
By 33, the attacker may know sign(h((ActivateSessionResponse,Ns2_24995)),skB[]).
Using the function 2-tuple the attacker may obtain ((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[])).
attacker(((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[]))).

39. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994),sign(h((CreateSessionResponse,pub(skB[]),Nc_24992,Ns_24994)),skB[])) that the attacker may have by 24 may be received at input {21}.
The message ((ActivateSessionResponse,Ns2_24995),sign(h((ActivateSessionResponse,Ns2_24995)),skB[])) that the attacker may have by 38 may be received at input {27}.
So event endCli(B[],A[],Ns_24994) may be executed at {31}.
end(endCli(B[],A[],Ns_24994)).


Could not find a trace corresponding to this derivation.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) cannot be proved.
-- Query event(endSrv(X_26177,Y_26178,N_26179)) ==> event(beginCli(X_26177,Y_26178,N_26179))
Completing...
200 rules inserted. The rule base contains 119 rules. 96 rules in the queue.
400 rules inserted. The rule base contains 146 rules. 218 rules in the queue.
600 rules inserted. The rule base contains 154 rules. 234 rules in the queue.
800 rules inserted. The rule base contains 180 rules. 193 rules in the queue.
1000 rules inserted. The rule base contains 216 rules. 166 rules in the queue.
1200 rules inserted. The rule base contains 250 rules. 144 rules in the queue.
1400 rules inserted. The rule base contains 307 rules. 189 rules in the queue.
1600 rules inserted. The rule base contains 382 rules. 112 rules in the queue.
1800 rules inserted. The rule base contains 392 rules. 96 rules in the queue.
2000 rules inserted. The rule base contains 434 rules. 172 rules in the queue.
2200 rules inserted. The rule base contains 445 rules. 194 rules in the queue.
2400 rules inserted. The rule base contains 518 rules. 184 rules in the queue.
2600 rules inserted. The rule base contains 529 rules. 170 rules in the queue.
2800 rules inserted. The rule base contains 538 rules. 152 rules in the queue.
3000 rules inserted. The rule base contains 538 rules. 152 rules in the queue.
3200 rules inserted. The rule base contains 596 rules. 94 rules in the queue.
3400 rules inserted. The rule base contains 688 rules. 2 rules in the queue.
Starting query event(endSrv(X_26177,Y_26178,N_26179)) ==> event(beginCli(X_26177,Y_26178,N_26179))
goal reachable: begin(beginCli(B[],A[],(Login(pub(skB[])),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(pub(skB[])),Passwd(skB[]))))
Abbreviations:
Nc_58635 = Nc[Sess = A[],Cli = B[],!1 = @sid_58614]
K_58636 = K_59[Sess = A[],Cli = B[],!1 = @sid_58602]
Ns_58637 = Ns_70[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[]),m1_68 = (CreateSessionRequest,pub(skB[]),Nc_58635),K_62 = K_58636,Sess_61 = A[],Cli_60 = B[],!1 = @sid_58602]
ch_58638 = ch[!1 = @sid_58602]
Nc_58639 = Nc[Sess = A[],Cli = B[],!1 = @sid_58539]
ch_58640 = ch[!1 = @sid_58630]
K_58641 = K_59[Sess = B[],Cli = B[],!1 = @sid_58630]

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. The message (B[],B[]) that the attacker may have by 2 may be received at input {7}.
So the message (B[],B[],K_58641) may be sent on channel ch_58640 at output {15}.
mess(ch_58640,(B[],B[],K_58641)).

4. The attacker initially knows A[].
attacker(A[]).

5. By 1, the attacker may know B[].
By 4, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

6. The message (B[],A[]) that the attacker may have by 5 may be received at input {7}.
So the message ((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])) may be sent to the attacker at output {20}.
attacker(((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[]))).

7. By 6, the attacker may know ((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[]).
attacker(sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])).

8. By 6, the attacker may know ((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_58639).
attacker((CreateSessionRequest,pub(skB[]),Nc_58639)).

9. By 8, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_58639).
Using the function 3-proj-3-tuple the attacker may obtain Nc_58639.
attacker(Nc_58639).

10. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

11. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

12. By 11, the attacker may know CreateSessionRequest.
By 10, the attacker may know pub(skB[]).
By 9, the attacker may know Nc_58639.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_58639).
attacker((CreateSessionRequest,pub(skB[]),Nc_58639)).

13. By 12, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_58639).
By 7, the attacker may know sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])).
attacker(((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[]))).

14. The message (B[],A[]) that the attacker may have by 5 may be received at input {7}.
So the message (B[],A[],K_58636) may be sent on channel ch_58638 at output {15}.
mess(ch_58638,(B[],A[],K_58636)).

15. The message (B[],A[]) that the attacker may have by 5 may be received at input {7}.
So the message ((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])) may be sent to the attacker at output {20}.
attacker(((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[]))).

16. By 15, the attacker may know ((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[]).
attacker(sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])).

17. By 15, the attacker may know ((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_58635).
attacker((CreateSessionRequest,pub(skB[]),Nc_58635)).

18. By 17, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_58635).
Using the function 3-proj-3-tuple the attacker may obtain Nc_58635.
attacker(Nc_58635).

19. By 11, the attacker may know CreateSessionRequest.
By 10, the attacker may know pub(skB[]).
By 18, the attacker may know Nc_58635.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_58635).
attacker((CreateSessionRequest,pub(skB[]),Nc_58635)).

20. By 19, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_58635).
By 16, the attacker may know sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])).
attacker(((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[]))).

21. The message (B[],A[],K_58636) that may be sent on channel ch_58638 by 14 may be received at input {32}.
The message ((CreateSessionRequest,pub(skB[]),Nc_58635),sign(h((CreateSessionRequest,pub(skB[]),Nc_58635)),skB[])) that the attacker may have by 20 may be received at input {39}.
So the message ((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])) may be sent to the attacker at output {45}.
attacker(((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[]))).

22. By 21, the attacker may know ((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[]).
attacker(sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])).

23. By 21, the attacker may know ((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637).
attacker((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)).

24. By 23, the attacker may know (CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637).
Using the function 4-proj-4-tuple the attacker may obtain Ns_58637.
attacker(Ns_58637).

25. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

26. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

27. By 26, the attacker may know CreateSessionResponse.
By 25, the attacker may know pub(skA[]).
By 18, the attacker may know Nc_58635.
By 24, the attacker may know Ns_58637.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637).
attacker((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)).

28. By 27, the attacker may know (CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637).
By 22, the attacker may know sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])).
attacker(((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[]))).

29. The message (B[],A[]) that the attacker may have by 5 may be received at input {7}.
The message ((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637),sign(h((CreateSessionResponse,pub(skA[]),Nc_58635,Ns_58637)),skA[])) that the attacker may have by 28 may be received at input {21}.
The event beginCli(B[],A[],(Login(pub(skB[])),Passwd(skB[]))) may be executed at {24}.
So the message ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])) may be sent to the attacker at output {26}.
attacker(((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]))).

30. By 29, the attacker may know ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]).
attacker(sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).

31. By 29, the attacker may know ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))).

32. By 31, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

33. By 10, the attacker may know pub(skB[]).
Using the function Login the attacker may obtain Login(pub(skB[])).
attacker(Login(pub(skB[]))).

34. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

35. By 34, the attacker may know ActivateSessionRequest.
By 10, the attacker may know pub(skB[]).
By 33, the attacker may know Login(pub(skB[])).
By 32, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))).

36. By 35, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])).
By 30, the attacker may know sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]).
Using the function 2-tuple the attacker may obtain ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])).
attacker(((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[]))).

37. The message (B[],B[],K_58641) that may be sent on channel ch_58640 by 3 may be received at input {32}.
The message ((CreateSessionRequest,pub(skB[]),Nc_58639),sign(h((CreateSessionRequest,pub(skB[]),Nc_58639)),skB[])) that the attacker may have by 13 may be received at input {39}.
The message ((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[])),sign(h((ActivateSessionRequest,pub(skB[]),Login(pub(skB[])),Passwd(skB[]))),skB[])) that the attacker may have by 36 may be received at input {46}.
So event endSrv(B[],B[],(Login(pub(skB[])),Passwd(skB[]))) may be executed at {53}.
end(endSrv(B[],B[],(Login(pub(skB[])),Passwd(skB[])))).


Could not find a trace corresponding to this derivation.
RESULT event(endSrv(X_26177,Y_26178,N_26179)) ==> event(beginCli(X_26177,Y_26178,N_26179)) cannot be proved.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 120 rules. 102 rules in the queue.
400 rules inserted. The rule base contains 142 rules. 202 rules in the queue.
600 rules inserted. The rule base contains 154 rules. 214 rules in the queue.
800 rules inserted. The rule base contains 170 rules. 182 rules in the queue.
1000 rules inserted. The rule base contains 210 rules. 141 rules in the queue.
1200 rules inserted. The rule base contains 242 rules. 132 rules in the queue.
1400 rules inserted. The rule base contains 342 rules. 104 rules in the queue.
1600 rules inserted. The rule base contains 370 rules. 76 rules in the queue.
1800 rules inserted. The rule base contains 302 rules. 72 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_134287 = Nc[Sess = Sess_134278,Cli = A[],!1 = @sid_134279]

1. The attacker has some term Sess_134278.
attacker(Sess_134278).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_134278.
Using the function 2-tuple the attacker may obtain (A[],Sess_134278).
attacker((A[],Sess_134278)).

4. By 1, the attacker may know Sess_134278.
Using the function sk the attacker may obtain sk(Sess_134278).
attacker(sk(Sess_134278)).

5. The attacker has some term Ns_134280.
attacker(Ns_134280).

6. The message (A[],Sess_134278) that the attacker may have by 3 may be received at input {7}.
We have Sess_134278 <> B[] & Sess_134278 <> A[].
So the message ((CreateSessionRequest,pub(skA[]),Nc_134287),sign(h((CreateSessionRequest,pub(skA[]),Nc_134287)),skA[])) may be sent to the attacker at output {20}.
attacker(((CreateSessionRequest,pub(skA[]),Nc_134287),sign(h((CreateSessionRequest,pub(skA[]),Nc_134287)),skA[]))).

7. By 6, the attacker may know ((CreateSessionRequest,pub(skA[]),Nc_134287),sign(h((CreateSessionRequest,pub(skA[]),Nc_134287)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_134287).
attacker((CreateSessionRequest,pub(skA[]),Nc_134287)).

8. By 7, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_134287).
Using the function 3-proj-3-tuple the attacker may obtain Nc_134287.
attacker(Nc_134287).

9. By 4, the attacker may know sk(Sess_134278).
Using the function pub the attacker may obtain pub(sk(Sess_134278)).
attacker(pub(sk(Sess_134278))).

10. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

11. By 10, the attacker may know CreateSessionResponse.
By 9, the attacker may know pub(sk(Sess_134278)).
By 8, the attacker may know Nc_134287.
By 5, the attacker may know Ns_134280.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280).
attacker((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)).

12. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)).
attacker(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280))).

13. By 12, the attacker may know h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)).
By 4, the attacker may know sk(Sess_134278).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278))).

14. By 11, the attacker may know (CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280).
By 13, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280),sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278))).
attacker(((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280),sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278)))).

15. The message (A[],Sess_134278) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280),sign(h((CreateSessionResponse,pub(sk(Sess_134278)),Nc_134287,Ns_134280)),sk(Sess_134278))) that the attacker may have by 14 may be received at input {21}.
We have Sess_134278 <> B[] & Sess_134278 <> A[].
So the message ((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])) may be sent to the attacker at output {26}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[]))).

16. By 15, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


Could not find a trace corresponding to this derivation.
RESULT not attacker(Passwd(skA[])) cannot be proved.
