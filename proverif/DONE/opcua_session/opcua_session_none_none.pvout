Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, m1_66: bitstring);
    {34}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
    {35}new Ns_68: bitstring;
    {36}event beginSrv(Sess_60,Cli_59,Ns_68);
    {37}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
    {38}out(c, m2_69);
    {39}in(c, m3_70: bitstring);
    {40}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
    {41}new Ns2_71: bitstring;
    {42}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {43}out(c, m4_72);
    {44}if ((Cli_59 = A) || (Cli_59 = B)) then
    {45}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 88 rules. 4 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_4586) -> end(endCli(A[],B[],N_4586))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_4605).

5. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skA[]).
By 4, the attacker may know N_4605.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),N_4605).
attacker((CreateSessionResponse,pub(skA[]),N_4605)).

8. The attacker has some term Ns2_4600.
attacker(Ns2_4600).

9. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

10. By 9, the attacker may know ActivateSessionResponse.
By 8, the attacker may know Ns2_4600.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_4600).
attacker((ActivateSessionResponse,Ns2_4600)).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),N_4605) that the attacker may have by 7 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_4600) that the attacker may have by 10 may be received at input {24}.
So event endCli(A[],B[],N_4605) may be executed at {27}.
end(endCli(A[],B[],N_4605)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_4684 at {6} in copy a_4607

in(c, (B,A)) at {7} in copy a_4607

new K creating K_4755 at {12} in copy a_4607

out(ch_4684, (B,A,K_4755)) at {13} in copy a_4607 received at {28} in copy a_4607

out(c, CreateSessionRequest) at {15} in copy a_4607

new Nc creating Nc_4835 at {16} in copy a_4607

out(c, (CreateSessionRequest,pub(skB),Nc_4835)) at {18} in copy a_4607

in(c, (CreateSessionResponse,pub(skA),a)) at {19} in copy a_4607

event(beginCli(B,A,(Login(skB),Passwd(skB)))) at {21} in copy a_4607

out(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_4607

in(c, (ActivateSessionResponse,a_4606)) at {24} in copy a_4607

event(endCli(A,B,a)) at {27} in copy a_4607

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_4863,Y_4864,N_4865)) ==> event(beginCli(X_4863,Y_4864,N_4865))
Completing...
200 rules inserted. The rule base contains 98 rules. 38 rules in the queue.
Starting query event(endSrv(X_4863,Y_4864,N_4865)) ==> event(beginCli(X_4863,Y_4864,N_4865))
goal reachable: Sess_10124 <> B[] && Sess_10124 <> A[] && begin(beginCli(B[],Sess_10124,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_10124) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
ch_10183 = ch[!1 = @sid_10178]
K_10184 = K[Sess = B[],Cli = B[],!1 = @sid_10178]

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. The message (B[],B[]) that the attacker may have by 2 may be received at input {7}.
So the message (B[],B[],K_10184) may be sent on channel ch_10183 at output {13}.
mess(ch_10183,(B[],B[],K_10184)).

4. The attacker has some term Nc_10177.
attacker(Nc_10177).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_10177.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_10177).
attacker((CreateSessionRequest,pub(skB[]),Nc_10177)).

8. We assume as hypothesis that
attacker(Sess_10146).

9. By 1, the attacker may know B[].
By 8, the attacker may know Sess_10146.
Using the function 2-tuple the attacker may obtain (B[],Sess_10146).
attacker((B[],Sess_10146)).

10. The attacker has some term Ns_10147.
attacker(Ns_10147).

11. By 8, the attacker may know Sess_10146.
Using the function sk the attacker may obtain sk(Sess_10146).
attacker(sk(Sess_10146)).

12. By 11, the attacker may know sk(Sess_10146).
Using the function pub the attacker may obtain pub(sk(Sess_10146)).
attacker(pub(sk(Sess_10146))).

13. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

14. By 13, the attacker may know CreateSessionResponse.
By 12, the attacker may know pub(sk(Sess_10146)).
By 10, the attacker may know Ns_10147.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_10146)),Ns_10147).
attacker((CreateSessionResponse,pub(sk(Sess_10146)),Ns_10147)).

15. The message (B[],Sess_10146) that the attacker may have by 9 may be received at input {7}.
The message (CreateSessionResponse,pub(sk(Sess_10146)),Ns_10147) that the attacker may have by 14 may be received at input {19}.
The event beginCli(B[],Sess_10146,(Login(skB[]),Passwd(skB[]))) may be executed at {21}.
We have Sess_10146 <> B[] & Sess_10146 <> A[].
So the message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

16. By 15, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

17. By 15, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

18. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

19. By 18, the attacker may know ActivateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 17, the attacker may know Login(skB[]).
By 16, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

20. The message (B[],B[],K_10184) that may be sent on channel ch_10183 by 3 may be received at input {28}.
The message (CreateSessionRequest,pub(skB[]),Nc_10177) that the attacker may have by 7 may be received at input {33}.
The message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 19 may be received at input {39}.
So event endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))) may be executed at {45}.
end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_10190 at {6} in copy a_10189

new ch creating ch_10294 at {6} in copy a_10187

in(c, (B,a_10185)) at {7} in copy a_10187

new K creating K_10370 at {12} in copy a_10187

out(ch_10294, (B,a_10185,K_10370)) at {13} in copy a_10187 received at {28} in copy a_10187

out(c, K_10370) at {15} in copy a_10187

new Nc creating Nc_10441 at {16} in copy a_10187

out(c, (CreateSessionRequest,pub(skB),Nc_10441)) at {18} in copy a_10187

in(c, (CreateSessionResponse,pub(sk(a_10185)),a_10186)) at {19} in copy a_10187

event(beginCli(B,a_10185,(Login(skB),Passwd(skB)))) at {21} in copy a_10187

out(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_10187

in(c, (B,B)) at {7} in copy a_10189

new K creating K_10191 at {12} in copy a_10189

out(ch_10190, (B,B,K_10191)) at {13} in copy a_10189 received at {28} in copy a_10189

out(c, CreateSessionRequest) at {15} in copy a_10189

new Nc creating Nc_10608 at {16} in copy a_10189

out(c, (CreateSessionRequest,pub(skB),Nc_10608)) at {18} in copy a_10189

in(c, (CreateSessionRequest,pub(skB),a_10188)) at {33} in copy a_10189

new Ns_68 creating Ns_10626 at {35} in copy a_10189

event(beginSrv(B,B,Ns_10626)) at {36} in copy a_10189

out(c, (CreateSessionResponse,pub(skB),Ns_10626)) at {38} in copy a_10189

in(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {39} in copy a_10189

new Ns2_71 creating Ns2_10636 at {41} in copy a_10189

out(c, (ActivateSessionResponse,Ns2_10636)) at {43} in copy a_10189

event(endSrv(B,B,(Login(skB),Passwd(skB)))) at {45} in copy a_10189

The event endSrv(B,B,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_4863,Y_4864,N_4865)) ==> event(beginCli(X_4863,Y_4864,N_4865)) is false.
-- Query not attacker(Passwd(skA[]))
Completing...
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_14620.
attacker(Ns_14620).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_14620.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_14620).
attacker((CreateSessionResponse,pub(skA[]),Ns_14620)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_14620) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_14705 at {6} in copy a_14627

in(c, (A,A)) at {7} in copy a_14627

new K creating K_14776 at {12} in copy a_14627

out(ch_14705, (A,A,K_14776)) at {13} in copy a_14627 received at {28} in copy a_14627

out(c, CreateSessionRequest) at {15} in copy a_14627

new Nc creating Nc_14856 at {16} in copy a_14627

out(c, (CreateSessionRequest,pub(skA),Nc_14856)) at {18} in copy a_14627

in(c, (CreateSessionResponse,pub(skA),a_14626)) at {19} in copy a_14627

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_14627

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_14627

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_18851.
attacker(Ns_18851).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_18851.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_18851).
attacker((CreateSessionResponse,pub(skA[]),Ns_18851)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Ns_18851) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_18936 at {6} in copy a_18858

in(c, (A,A)) at {7} in copy a_18858

new K creating K_19007 at {12} in copy a_18858

out(ch_18936, (A,A,K_19007)) at {13} in copy a_18858 received at {28} in copy a_18858

out(c, CreateSessionRequest) at {15} in copy a_18858

new Nc creating Nc_19087 at {16} in copy a_18858

out(c, (CreateSessionRequest,pub(skA),Nc_19087)) at {18} in copy a_18858

in(c, (CreateSessionResponse,pub(skA),a_18857)) at {19} in copy a_18858

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_18858

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_18858

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
