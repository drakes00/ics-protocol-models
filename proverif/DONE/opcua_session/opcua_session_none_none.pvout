Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else sk(Cli))) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(pkCli,pkSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(pkCli,pkSess),Passwd(pkCli,pkSess)));
    {18}let m3: bitstring = (CSC,Login(pkCli,pkSess),Passwd(pkCli,pkSess)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else sk(Sess_60))) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(pkCli_62,pkSess_64) in
    {29}in(c, m1_66: bitstring);
    {30}if (m1_66 <> CreateSessionRequest) then
        0
    else
        {31}new SSC_67: bitstring;
        {32}new Ns2_68: bitstring;
        {33}let m2_69: bitstring = (SSC_67,Ns2_68) in
        {34}out(c, m2_69);
        {35}in(c, m3_70: bitstring);
        {36}let (CSC_71: bitstring,=Login(pkCli_62,pkSess_64),=Passwd(pkCli_62,pkSess_64)) = m3_70 in
        {37}event endSrv(Cli_59,Sess_60,(Login(pkCli_62,pkSess_64),Passwd(pkCli_62,pkSess_64)));
        {38}let m4_72: bitstring = ActivateSessionResponse in
        {39}out(c, m4_72)
) | (
    {40}!
    {41}in(c, (X: host,Y: host));
    {42}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {43}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {44}if ((X,Y) = (A,B)) then
        0
    else
        {45}if ((X,Y) = (B,A)) then
            0
        else
            {46}out(c, Skey(pub(skX),pub(skY)))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 98 rules. 0 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(B[],A[],(Login(pub(skB[]),pub(skA[])),Passwd(pub(skB[]),pub(skA[]))))) -> end(endSrv(B[],A[],(Login(pub(skB[]),pub(skA[])),Passwd(pub(skB[]),pub(skA[])))))
goal reachable: begin(beginCli(A[],B[],(Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))))) -> end(endSrv(A[],B[],(Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))))
goal reachable: X_6608 <> B[] && X_6608 <> A[] && begin(beginCli(X_6608,B[],(Login(pub(sk(X_6608)),pub(skB[])),Passwd(pub(sk(X_6608)),pub(skB[]))))) && attacker(X_6608) -> end(endSrv(X_6608,B[],(Login(pub(sk(X_6608)),pub(skB[])),Passwd(pub(sk(X_6608)),pub(skB[])))))
goal reachable: X_6609 <> B[] && X_6609 <> A[] && begin(beginCli(X_6609,A[],(Login(pub(sk(X_6609)),pub(skA[])),Passwd(pub(sk(X_6609)),pub(skA[]))))) && attacker(X_6609) -> end(endSrv(X_6609,A[],(Login(pub(sk(X_6609)),pub(skA[])),Passwd(pub(sk(X_6609)),pub(skA[])))))
goal reachable: Y_6610 <> B[] && Y_6610 <> A[] && begin(beginCli(B[],Y_6610,(Login(pub(skB[]),pub(sk(Y_6610))),Passwd(pub(skB[]),pub(sk(Y_6610)))))) && attacker(Y_6610) -> end(endSrv(B[],Y_6610,(Login(pub(skB[]),pub(sk(Y_6610))),Passwd(pub(skB[]),pub(sk(Y_6610))))))
goal reachable: begin(beginCli(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[]))))) -> end(endSrv(B[],B[],(Login(pub(skB[]),pub(skB[])),Passwd(pub(skB[]),pub(skB[])))))
goal reachable: Y_6611 <> B[] && Y_6611 <> A[] && begin(beginCli(A[],Y_6611,(Login(pub(skA[]),pub(sk(Y_6611))),Passwd(pub(skA[]),pub(sk(Y_6611)))))) && attacker(Y_6611) -> end(endSrv(A[],Y_6611,(Login(pub(skA[]),pub(sk(Y_6611))),Passwd(pub(skA[]),pub(sk(Y_6611))))))
goal reachable: begin(beginCli(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[]))))) -> end(endSrv(A[],A[],(Login(pub(skA[]),pub(skA[])),Passwd(pub(skA[]),pub(skA[])))))
goal reachable: Y_6613 <> B[] && Y_6613 <> A[] && X_6612 <> B[] && X_6612 <> A[] && begin(beginCli(X_6612,Y_6613,(Login(pub(sk(X_6612)),pub(sk(Y_6613))),Passwd(pub(sk(X_6612)),pub(sk(Y_6613)))))) && attacker(X_6612) && attacker(Y_6613) -> end(endSrv(X_6612,Y_6613,(Login(pub(sk(X_6612)),pub(sk(Y_6613))),Passwd(pub(sk(X_6612)),pub(sk(Y_6613))))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(pub(skB[]),pub(skA[])))
Completing...
Starting query not attacker(Skey(pub(skB[]),pub(skA[])))
RESULT not attacker(Skey(pub(skB[]),pub(skA[]))) is true.
-- Query not attacker(Skey(pub(skA[]),pub(skB[])))
Completing...
Starting query not attacker(Skey(pub(skA[]),pub(skB[])))
RESULT not attacker(Skey(pub(skA[]),pub(skB[]))) is true.
-- Query not attacker(Passwd(pub(skA[]),pub(skB[])))
Completing...
Starting query not attacker(Passwd(pub(skA[]),pub(skB[])))
goal reachable: attacker(Passwd(pub(skA[]),pub(skB[])))
Abbreviations:
CSC_24234 = CSC[m2 = (SSC_24228,Ns2_24229),Sess = B[],Cli = A[],!1 = @sid_24230]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_24229.
attacker(Ns2_24229).

5. The attacker has some term SSC_24228.
attacker(SSC_24228).

6. By 5, the attacker may know SSC_24228.
By 4, the attacker may know Ns2_24229.
Using the function 2-tuple the attacker may obtain (SSC_24228,Ns2_24229).
attacker((SSC_24228,Ns2_24229)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_24228,Ns2_24229) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_24234,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))) may be sent to the attacker at output {19}.
attacker((CSC_24234,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))).

8. By 7, the attacker may know (CSC_24234,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(pub(skA[]),pub(skB[])).
attacker(Passwd(pub(skA[]),pub(skB[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_24236

out(c, CreateSessionRequest) at {13} in copy a_24236

in(c, (a,a_24235)) at {14} in copy a_24236

new CSC creating CSC_24237 at {16} in copy a_24236

event(beginCli(A,B,(Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))))) at {17} in copy a_24236

out(c, (CSC_24237,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB)))) at {19} in copy a_24236

The attacker has the message Passwd(pub(skA),pub(skB)).
A trace has been found.
RESULT not attacker(Passwd(pub(skA[]),pub(skB[]))) is false.
-- Query not attacker(Login(pub(skA[]),pub(skB[])))
Completing...
Starting query not attacker(Login(pub(skA[]),pub(skB[])))
goal reachable: attacker(Login(pub(skA[]),pub(skB[])))
Abbreviations:
CSC_30282 = CSC[m2 = (SSC_30276,Ns2_30277),Sess = B[],Cli = A[],!1 = @sid_30278]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_30277.
attacker(Ns2_30277).

5. The attacker has some term SSC_30276.
attacker(SSC_30276).

6. By 5, the attacker may know SSC_30276.
By 4, the attacker may know Ns2_30277.
Using the function 2-tuple the attacker may obtain (SSC_30276,Ns2_30277).
attacker((SSC_30276,Ns2_30277)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_30276,Ns2_30277) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_30282,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))) may be sent to the attacker at output {19}.
attacker((CSC_30282,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[])))).

8. By 7, the attacker may know (CSC_30282,Login(pub(skA[]),pub(skB[])),Passwd(pub(skA[]),pub(skB[]))).
Using the function 2-proj-3-tuple the attacker may obtain Login(pub(skA[]),pub(skB[])).
attacker(Login(pub(skA[]),pub(skB[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_30285

out(c, CreateSessionRequest) at {13} in copy a_30285

in(c, (a_30283,a_30284)) at {14} in copy a_30285

new CSC creating CSC_30286 at {16} in copy a_30285

event(beginCli(A,B,(Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB))))) at {17} in copy a_30285

out(c, (CSC_30286,Login(pub(skA),pub(skB)),Passwd(pub(skA),pub(skB)))) at {19} in copy a_30285

The attacker has the message Login(pub(skA),pub(skB)).
A trace has been found.
RESULT not attacker(Login(pub(skA[]),pub(skB[]))) is false.
