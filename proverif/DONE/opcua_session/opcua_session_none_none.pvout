Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else fail-any)) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {18}let m3: bitstring = (CSC,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else fail-any)) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, m1_66: bitstring);
    {30}if (m1_66 <> CreateSessionRequest) then
        0
    else
        {31}new SSC_67: bitstring;
        {32}new Ns2_68: bitstring;
        {33}let m2_69: bitstring = (SSC_67,Ns2_68) in
        {34}out(c, m2_69);
        {35}in(c, m3_70: bitstring);
        {36}let (CSC_71: bitstring,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_70 in
        {37}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
        {38}let m4_72: bitstring = ActivateSessionResponse in
        {39}out(c, m4_72)
) | (
    {40}!
    {41}in(c, (X: host,Y: host));
    {42}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {43}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {44}if ((X,Y) = (A,B)) then
        0
    else
        {45}if ((X,Y) = (B,A)) then
            0
        else
            {46}out(c, Skey(skX,skY))
) | (
    {47}!
    {48}in(c, (X_73: host,Y_74: host));
    {49}let skX_75: bitstring = (if (X_73 = A) then skA else (if (X_73 = B) then skB else sk(X_73))) in
    {50}let skY_76: bitstring = (if (Y_74 = A) then skA else (if (Y_74 = B) then skB else sk(Y_74))) in
    {51}if ((X_73,Y_74) = (A,B)) then
        0
    else
        {52}if ((X_73,Y_74) = (B,A)) then
            0
        else
            {53}out(c, (Login(skX_75,skY_76),Passwd(skX_75,skY_76)))
)

-- Query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
Completing...
Starting query event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N))
goal reachable: end(endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[]))))

1. The attacker initially knows B[].
attacker(B[]).

2. By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (B[],B[]).
attacker((B[],B[])).

3. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

4. The message (B[],B[]) that the attacker may have by 2 may be received at input {48}.
So the message (Login(skB[],skB[]),Passwd(skB[],skB[])) may be sent to the attacker at output {53}.
attacker((Login(skB[],skB[]),Passwd(skB[],skB[]))).

5. By 4, the attacker may know (Login(skB[],skB[]),Passwd(skB[],skB[])).
Using the function 2-proj-2-tuple the attacker may obtain Passwd(skB[],skB[]).
attacker(Passwd(skB[],skB[])).

6. By 4, the attacker may know (Login(skB[],skB[]),Passwd(skB[],skB[])).
Using the function 1-proj-2-tuple the attacker may obtain Login(skB[],skB[]).
attacker(Login(skB[],skB[])).

7. The attacker has some term CSC_5147.
attacker(CSC_5147).

8. By 7, the attacker may know CSC_5147.
By 6, the attacker may know Login(skB[],skB[]).
By 5, the attacker may know Passwd(skB[],skB[]).
Using the function 3-tuple the attacker may obtain (CSC_5147,Login(skB[],skB[]),Passwd(skB[],skB[])).
attacker((CSC_5147,Login(skB[],skB[]),Passwd(skB[],skB[]))).

9. The message (B[],B[]) that the attacker may have by 2 may be received at input {23}.
The message CreateSessionRequest that the attacker may have by 3 may be received at input {29}.
The message (CSC_5147,Login(skB[],skB[]),Passwd(skB[],skB[])) that the attacker may have by 8 may be received at input {35}.
So event endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[]))) may be executed at {37}.
end(endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,B)) at {23} in copy a_5153

in(c, CreateSessionRequest) at {29} in copy a_5153

new SSC_67 creating SSC_5316 at {31} in copy a_5153

new Ns2_68 creating Ns2_5317 at {32} in copy a_5153

out(c, (SSC_5316,Ns2_5317)) at {34} in copy a_5153

in(c, (B,B)) at {48} in copy a_5152

out(c, (Login(skB,skB),Passwd(skB,skB))) at {53} in copy a_5152

in(c, (a,Login(skB,skB),Passwd(skB,skB))) at {35} in copy a_5153

event(endSrv(B,B,(Login(skB,skB),Passwd(skB,skB)))) at {37} in copy a_5153

The event endSrv(B,B,(Login(skB,skB),Passwd(skB,skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_77,Y_78,N)) ==> event(beginCli(X_77,Y_78,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))
Abbreviations:
CSC_19706 = CSC[m2 = (SSC_19700,Ns2_19701),Sess = B[],Cli = A[],!1 = @sid_19702]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_19701.
attacker(Ns2_19701).

5. The attacker has some term SSC_19700.
attacker(SSC_19700).

6. By 5, the attacker may know SSC_19700.
By 4, the attacker may know Ns2_19701.
Using the function 2-tuple the attacker may obtain (SSC_19700,Ns2_19701).
attacker((SSC_19700,Ns2_19701)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_19700,Ns2_19701) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_19706,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_19706,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_19706,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_19709

out(c, CreateSessionRequest) at {13} in copy a_19709

in(c, (a_19707,a_19708)) at {14} in copy a_19709

new CSC creating CSC_19710 at {16} in copy a_19709

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_19709

out(c, (CSC_19710,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_19709

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))
Abbreviations:
CSC_24674 = CSC[m2 = (SSC_24668,Ns2_24669),Sess = B[],Cli = A[],!1 = @sid_24670]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_24669.
attacker(Ns2_24669).

5. The attacker has some term SSC_24668.
attacker(SSC_24668).

6. By 5, the attacker may know SSC_24668.
By 4, the attacker may know Ns2_24669.
Using the function 2-tuple the attacker may obtain (SSC_24668,Ns2_24669).
attacker((SSC_24668,Ns2_24669)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_24668,Ns2_24669) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_24674,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_24674,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_24674,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_24677

out(c, CreateSessionRequest) at {13} in copy a_24677

in(c, (a_24675,a_24676)) at {14} in copy a_24677

new CSC creating CSC_24678 at {16} in copy a_24677

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_24677

out(c, (CSC_24678,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_24677

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
