Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, m1);
    {15}in(c, m2: bitstring);
    {16}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {17}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {18}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli),Passwd(skCli)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {22}!
    {23}in(c, (Cli_56: host,Sess_57: host));
    {24}let skCli_58: bitstring = (if (Cli_56 = A) then skA else (if (Cli_56 = B) then skB else sk(Cli_56))) in
    {25}let pkCli_59: bitstring = pub(skCli_58) in
    {26}let skSess_60: bitstring = (if (Sess_57 = A) then skA else (if (Sess_57 = B) then skB else fail-any)) in
    {27}let pkSess_61: bitstring = pub(skSess_60) in
    {28}let K_62: bitstring = Skey(skCli_58,skSess_60) in
    {29}in(c, m1_63: bitstring);
    {30}let (=CreateSessionRequest,=pkCli_59,Nc_64: bitstring) = m1_63 in
    {31}new Ns_65: bitstring;
    {32}let m2_66: bitstring = (CreateSessionResponse,pkSess_61,Ns_65) in
    {33}out(c, m2_66);
    {34}in(c, m3_67: bitstring);
    {35}let (=ActivateSessionRequest,=pkCli_59,=Login(skCli_58),=Passwd(skCli_58)) = m3_67 in
    {36}event endSrv(Cli_56,Sess_57,(Login(skCli_58),Passwd(skCli_58)));
    {37}new Ns2_68: bitstring;
    {38}let m4_69: bitstring = (ActivateSessionResponse,Ns2_68) in
    {39}out(c, m4_69)
) | (
    {40}!
    {41}in(c, (X: host,Y: host));
    {42}if (X = Y) then
        0
    else
        {43}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {44}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {45}if ((X,Y) = (A,B)) then
            0
        else
            {46}if ((X,Y) = (B,A)) then
                0
            else
                {47}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_70,Y_71,N)) ==> event(beginCli(X_70,Y_71,N))
Completing...
200 rules inserted. The rule base contains 76 rules. 24 rules in the queue.
Starting query event(endSrv(X_70,Y_71,N)) ==> event(beginCli(X_70,Y_71,N))
goal reachable: Sess_5217 <> B[] && Sess_5217 <> A[] && begin(beginCli(B[],Sess_5217,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_5217) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The attacker has some term Nc_5269.
attacker(Nc_5269).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_5269.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_5269).
attacker((CreateSessionRequest,pub(skB[]),Nc_5269)).

8. We assume as hypothesis that
attacker(Sess_5239).

9. By 2, the attacker may know B[].
By 8, the attacker may know Sess_5239.
Using the function 2-tuple the attacker may obtain (B[],Sess_5239).
attacker((B[],Sess_5239)).

10. The attacker has some term Ns_5240.
attacker(Ns_5240).

11. By 8, the attacker may know Sess_5239.
Using the function sk the attacker may obtain sk(Sess_5239).
attacker(sk(Sess_5239)).

12. By 11, the attacker may know sk(Sess_5239).
Using the function pub the attacker may obtain pub(sk(Sess_5239)).
attacker(pub(sk(Sess_5239))).

13. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

14. By 13, the attacker may know CreateSessionResponse.
By 12, the attacker may know pub(sk(Sess_5239)).
By 10, the attacker may know Ns_5240.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_5239)),Ns_5240).
attacker((CreateSessionResponse,pub(sk(Sess_5239)),Ns_5240)).

15. The message (B[],Sess_5239) that the attacker may have by 9 may be received at input {6}.
The message (CreateSessionResponse,pub(sk(Sess_5239)),Ns_5240) that the attacker may have by 14 may be received at input {15}.
The event beginCli(B[],Sess_5239,(Login(skB[]),Passwd(skB[]))) may be executed at {17}.
We have Sess_5239 <> B[] & Sess_5239 <> A[].
So the message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

16. By 15, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

17. By 15, the attacker may know (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

18. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

19. By 18, the attacker may know ActivateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 17, the attacker may know Login(skB[]).
By 16, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[]))).

20. The message (B[],A[]) that the attacker may have by 3 may be received at input {23}.
The message (CreateSessionRequest,pub(skB[]),Nc_5269) that the attacker may have by 7 may be received at input {29}.
The message (ActivateSessionRequest,pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 19 may be received at input {34}.
So event endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))) may be executed at {36}.
end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a)) at {6} in copy a_5275

new Nc creating Nc_5445 at {12} in copy a_5275

out(c, (CreateSessionRequest,pub(skB),Nc_5445)) at {14} in copy a_5275

in(c, (CreateSessionResponse,pub(sk(a)),a_5274)) at {15} in copy a_5275

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {17} in copy a_5275

out(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {19} in copy a_5275

in(c, (B,A)) at {23} in copy a_5277

in(c, (CreateSessionRequest,pub(skB),a_5276)) at {29} in copy a_5277

new Ns_65 creating Ns_5546 at {31} in copy a_5277

out(c, (CreateSessionResponse,pub(skA),Ns_5546)) at {33} in copy a_5277

in(c, (ActivateSessionRequest,pub(skB),Login(skB),Passwd(skB))) at {34} in copy a_5277

event(endSrv(B,A,(Login(skB),Passwd(skB)))) at {36} in copy a_5277

The event endSrv(B,A,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_70,Y_71,N)) ==> event(beginCli(X_70,Y_71,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_18116.
attacker(Ns_18116).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_18116.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_18116).
attacker((CreateSessionResponse,pub(skA[]),Ns_18116)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (CreateSessionResponse,pub(skA[]),Ns_18116) that the attacker may have by 6 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_18123

new Nc creating Nc_18275 at {12} in copy a_18123

out(c, (CreateSessionRequest,pub(skA),Nc_18275)) at {14} in copy a_18123

in(c, (CreateSessionResponse,pub(skA),a_18122)) at {15} in copy a_18123

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_18123

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {19} in copy a_18123

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_22484.
attacker(Ns_22484).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_22484.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Ns_22484).
attacker((CreateSessionResponse,pub(skA[]),Ns_22484)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (CreateSessionResponse,pub(skA[]),Ns_22484) that the attacker may have by 6 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_22491

new Nc creating Nc_22643 at {12} in copy a_22491

out(c, (CreateSessionRequest,pub(skA),Nc_22643)) at {14} in copy a_22491

in(c, (CreateSessionResponse,pub(skA),a_22490)) at {15} in copy a_22491

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_22491

out(c, (ActivateSessionRequest,pub(skA),Login(skA),Passwd(skA))) at {19} in copy a_22491

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
