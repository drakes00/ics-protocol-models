(*  OpcUaClient --[CreateSessionRequest]--> SessionEndpoint
    SessionEndpoint --[SSC, Ns2]--> OpcUaClient
    OpcUaClient --[CSC, Login, Password]--> SessionEndpoint
    SessionEndpoint --[ActivateSessionResponse]--> OpcUaClient
*)

free c: channel.


(* Hosts *)
type host.
free A, B, I: host.


(* Hash function *)
fun h(bitstring): bitstring.


(* Symetric key crypto *)
fun senc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, k: bitstring ; sdec(senc(x, k), k) = x.


(* Signatures *)
fun pub(bitstring): bitstring.
fun sign(bitstring, bitstring): bitstring.
reduc forall x:bitstring, s:bitstring, k:bitstring ; verify(x, sign(x, k), pub(k)) = true.


(* Constants *)
const CreateSessionRequest: bitstring.
const ActivateSessionResponse: bitstring.


(* Private keys *)
free skA: bitstring [private].
free skB: bitstring [private].
fun Skey(bitstring, bitstring): bitstring [private].


(* Secrets *)
fun Login(bitstring, bitstring): bitstring [private].
fun Passwd(bitstring, bitstring): bitstring [private].


(* Events *)
event beginCli(host, host, bitstring).
event endSrv(host, host, bitstring).


(* Goals *)
query attacker(Login(pub(skA), pub(skB))).
query attacker(Passwd(pub(skA), pub(skB))).
query attacker(Skey(pub(skA), pub(skB))).
query attacker(Skey(pub(skB), pub(skA))).

query X: host, N: bitstring ; event(endSrv(A, X, N)) ==> event(beginCli(A, X, N)).


let client(skA: bitstring, skB: bitstring, skI: bitstring) = 
    in(c, (Cli: host, Sess: host));
    let skCli = if Cli = A then skA else if Cli = B then skB else skI in
    let pkCli = pub(skCli) in
    let skSess = if Sess = A then skA else if Sess = B then skB else skI in
    let pkSess = pub(skSess) in
    let K = Skey(pkCli, pkSess) in

    (* Role starting *)
    let m1 = CreateSessionRequest in
    out(c, (senc(m1, K), sign(h(m1), skCli)));

    in(c, (em2: bitstring, sigM2: bitstring));
    let m2 = sdec(em2, K) in
    if verify(h(m2), sigM2, pkSess) <> true then 0 else
    let (SSC: bitstring, Ns2: bitstring) = m2 in

    new CSC: bitstring;
    event beginCli(Cli, Sess, (Login(pkCli, pkSess), Passwd(pkCli, pkSess)));
    let m3 = (CSC, Login(pkCli, pkSess), Passwd(pkCli, pkSess)) in
    out(c, (senc(m3, K), sign(h(m3), skCli)));

    in(c, (em4: bitstring, sigM4: bitstring));
    let m4 = sdec(em4, K) in
    if verify(h(m4), sigM4, pkSess) <> true then 0 else
    if m4 <> ActivateSessionResponse then 0.


let sess(skA: bitstring, skB: bitstring, skI: bitstring) = 
    in(c, (Cli: host, Sess: host));
    let skCli = if Cli = A then skA else if Cli = B then skB else skI in
    let pkCli = pub(skCli) in
    let skSess = if Sess = A then skA else if Sess = B then skB else skI in
    let pkSess = pub(skSess) in
    let K = Skey(pkCli, pkSess) in

    (* Role starting *)
    in(c, (m1: bitstring, sigM1: bitstring));
    if verify(h(m1), sigM1, pkCli) <> true then 0 else
    if m1 <> CreateSessionRequest then 0 else

    new SSC: bitstring;
    new Ns2: bitstring;
    let m2 = (SSC, Ns2) in
    out(c, (m2, sign(h(m2), skSess)));

    in(c, (m3: bitstring, sigM3: bitstring));
    if verify(h(m3), sigM3, pkCli) <> true then 0 else
    let (=Login(pkCli, pkSess), =Passwd(pkCli, pkSess)) = m3 in
    event endSrv(Cli, Sess, (Login(pkCli, pkSess), Passwd(pkCli, pkSess)));
    
    let m4 = ActivateSessionResponse in
    out(c, (m4, sign(h(m4), skSess))).


process
    let pkA = pub(skA) in out(c, pkA);
    let pkB = pub(skB) in out(c, pkB);

    new skI: bitstring;
    let pkI = pub(skI) in out(c, (pkI, skI));

    out(c, Skey(pkI, pkA));
    out(c, Skey(pkI, pkB));
    out(c, Skey(pkA, pkI));
    out(c, Skey(pkB, pkI));

    (!client(skA, skB, skI) |
     !sess(skA, skB, skI)
    )
