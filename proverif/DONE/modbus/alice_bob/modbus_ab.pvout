Process:
(
    {1}in(cAO, m1: bitstring);
    {2}in(cBO, m2: bitstring);
    {3}if (m1 = m2) then
        0
    else
        {4}event different(m1,m2)
) | (
    {5}let m: bitstring = (mbap,fc,data) in
    {6}event begin(Alice,Bob,m);
    {7}out(cAO, m);
    {8}out(c, m)
) | (
    {9}in(c, x: bitstring);
    {10}out(cBO, x);
    {11}event end(Alice,Bob,x)
)

-- Query event(end(Alice[],Bob[],x_19)) ==> event(begin(Alice[],Bob[],x_19))
Completing...
Starting query event(end(Alice[],Bob[],x_19)) ==> event(begin(Alice[],Bob[],x_19))
goal reachable: attacker(x_212) -> end(end(Alice[],Bob[],x_212))

1. We assume as hypothesis that
attacker(x_215).

2. The message x_215 that the attacker may have by 1 may be received at input {9}.
So event end(Alice[],Bob[],x_215) may be executed at {11}.
end(end(Alice[],Bob[],x_215)).


Could not find a trace corresponding to this derivation.
RESULT event(end(Alice[],Bob[],x_19)) ==> event(begin(Alice[],Bob[],x_19)) cannot be proved.
-- Query not attacker(data[])
Completing...
Starting query not attacker(data[])
goal reachable: attacker(data[])

1. The message (mbap[],fc[],data[]) may be sent to the attacker at output {8}.
attacker((mbap[],fc[],data[])).

2. By 1, the attacker may know (mbap[],fc[],data[]).
Using the function 3-proj-3-tuple the attacker may obtain data[].
attacker(data[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

event(begin(Alice,Bob,(mbap,fc,data))) at {6}

out(cAO, (mbap,fc,data)) at {7} received at {1}

out(c, (mbap,fc,data)) at {8}

The attacker has the message data.
A trace has been found.
RESULT not attacker(data[]) is false.
-- Query not attacker(fc[])
Completing...
Starting query not attacker(fc[])
goal reachable: attacker(fc[])

1. The message (mbap[],fc[],data[]) may be sent to the attacker at output {8}.
attacker((mbap[],fc[],data[])).

2. By 1, the attacker may know (mbap[],fc[],data[]).
Using the function 2-proj-3-tuple the attacker may obtain fc[].
attacker(fc[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

event(begin(Alice,Bob,(mbap,fc,data))) at {6}

out(cAO, (mbap,fc,data)) at {7} received at {1}

out(c, (mbap,fc,data)) at {8}

The attacker has the message fc.
A trace has been found.
RESULT not attacker(fc[]) is false.
-- Query not attacker(mbap[])
Completing...
Starting query not attacker(mbap[])
goal reachable: attacker(mbap[])

1. The message (mbap[],fc[],data[]) may be sent to the attacker at output {8}.
attacker((mbap[],fc[],data[])).

2. By 1, the attacker may know (mbap[],fc[],data[]).
Using the function 1-proj-3-tuple the attacker may obtain mbap[].
attacker(mbap[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

event(begin(Alice,Bob,(mbap,fc,data))) at {6}

out(cAO, (mbap,fc,data)) at {7} received at {1}

out(c, (mbap,fc,data)) at {8}

The attacker has the message mbap.
A trace has been found.
RESULT not attacker(mbap[]) is false.
-- Query not event(different((mbap[],fc[],data[]),x_674))
Completing...
Starting query not event(different((mbap[],fc[],data[]),x_674))
goal reachable: x_847 <> (mbap[],fc[],data[]) && attacker(x_847) -> end(different((mbap[],fc[],data[]),x_847))

1. The message (mbap[],fc[],data[]) may be sent on channel cAO[] at output {7}.
mess(cAO[],(mbap[],fc[],data[])).

2. We assume as hypothesis that
attacker(x_852).

3. The message x_852 that the attacker may have by 2 may be received at input {9}.
So the message x_852 may be sent on channel cBO[] at output {10}.
mess(cBO[],x_852).

4. The message (mbap[],fc[],data[]) that may be sent on channel cAO[] by 1 may be received at input {1}.
The message x_852 that may be sent on channel cBO[] by 3 may be received at input {2}.
We have (mbap[],fc[],data[]) <> x_852.
So event different((mbap[],fc[],data[]),x_852) may be executed at {4}.
end(different((mbap[],fc[],data[]),x_852)).


A more detailed output of the traces is available with
  set traceDisplay = long.

event(begin(Alice,Bob,(mbap,fc,data))) at {6}

out(cAO, (mbap,fc,data)) at {7} received at {1}

out(c, (mbap,fc,data)) at {8}

in(c, a_853) at {9}

out(cBO, a_853) at {10} received at {2}

event(end(Alice,Bob,a_853)) at {11}

event(different((mbap,fc,data),a_853)) at {4}

The event different((mbap,fc,data),a_853) is executed.
A trace has been found.
RESULT not event(different((mbap[],fc[],data[]),x_674)) is false.
