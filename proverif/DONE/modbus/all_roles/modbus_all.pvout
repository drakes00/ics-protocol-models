Process:
(
    {1}in(cAO, m1: bitstring);
    {2}in(cBO, m2: bitstring);
    {3}if (m1 = m2) then
        0
    else
        {4}event different(m1,m2)
) | (
    {5}in(c, (A: host,B: host));
    {6}let m: bitstring = (mbap,fc,data) in
    {7}event begin(A,B,m);
    {8}out(cAO, m);
    {9}out(c, m)
) | (
    {10}in(c, (A_19: host,B_20: host));
    {11}in(c, x: bitstring);
    {12}out(cBO, x);
    {13}event end(A_19,B_20,x)
)

-- Query event(end(a,b,x_21)) ==> event(begin(a,b,x_21))
Completing...
Starting query event(end(a,b,x_21)) ==> event(begin(a,b,x_21))
goal reachable: attacker(x_280) && attacker(a_281) && attacker(b_282) -> end(end(a_281,b_282,x_280))

1. We assume as hypothesis that
attacker(b_292).

2. We assume as hypothesis that
attacker(a_291).

3. By 2, the attacker may know a_291.
By 1, the attacker may know b_292.
Using the function 2-tuple the attacker may obtain (a_291,b_292).
attacker((a_291,b_292)).

4. We assume as hypothesis that
attacker(x_293).

5. The message (a_291,b_292) that the attacker may have by 3 may be received at input {10}.
The message x_293 that the attacker may have by 4 may be received at input {11}.
So event end(a_291,b_292,x_293) may be executed at {13}.
end(end(a_291,b_292,x_293)).


Could not find a trace corresponding to this derivation.
RESULT event(end(a,b,x_21)) ==> event(begin(a,b,x_21)) cannot be proved.
-- Query not attacker(data[])
Completing...
Starting query not attacker(data[])
goal reachable: attacker(data[])

1. The attacker has some term B_486.
attacker(B_486).

2. The attacker has some term A_485.
attacker(A_485).

3. By 2, the attacker may know A_485.
By 1, the attacker may know B_486.
Using the function 2-tuple the attacker may obtain (A_485,B_486).
attacker((A_485,B_486)).

4. The message (A_485,B_486) that the attacker may have by 3 may be received at input {5}.
So the message (mbap[],fc[],data[]) may be sent to the attacker at output {9}.
attacker((mbap[],fc[],data[])).

5. By 4, the attacker may know (mbap[],fc[],data[]).
Using the function 3-proj-3-tuple the attacker may obtain data[].
attacker(data[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (a_490,a_491)) at {5}

event(begin(a_490,a_491,(mbap,fc,data))) at {7}

out(cAO, (mbap,fc,data)) at {8} received at {1}

out(c, (mbap,fc,data)) at {9}

The attacker has the message data.
A trace has been found.
RESULT not attacker(data[]) is false.
-- Query not attacker(fc[])
Completing...
Starting query not attacker(fc[])
goal reachable: attacker(fc[])

1. The attacker has some term B_680.
attacker(B_680).

2. The attacker has some term A_679.
attacker(A_679).

3. By 2, the attacker may know A_679.
By 1, the attacker may know B_680.
Using the function 2-tuple the attacker may obtain (A_679,B_680).
attacker((A_679,B_680)).

4. The message (A_679,B_680) that the attacker may have by 3 may be received at input {5}.
So the message (mbap[],fc[],data[]) may be sent to the attacker at output {9}.
attacker((mbap[],fc[],data[])).

5. By 4, the attacker may know (mbap[],fc[],data[]).
Using the function 2-proj-3-tuple the attacker may obtain fc[].
attacker(fc[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (a_684,a_685)) at {5}

event(begin(a_684,a_685,(mbap,fc,data))) at {7}

out(cAO, (mbap,fc,data)) at {8} received at {1}

out(c, (mbap,fc,data)) at {9}

The attacker has the message fc.
A trace has been found.
RESULT not attacker(fc[]) is false.
-- Query not attacker(mbap[])
Completing...
Starting query not attacker(mbap[])
goal reachable: attacker(mbap[])

1. The attacker has some term B_874.
attacker(B_874).

2. The attacker has some term A_873.
attacker(A_873).

3. By 2, the attacker may know A_873.
By 1, the attacker may know B_874.
Using the function 2-tuple the attacker may obtain (A_873,B_874).
attacker((A_873,B_874)).

4. The message (A_873,B_874) that the attacker may have by 3 may be received at input {5}.
So the message (mbap[],fc[],data[]) may be sent to the attacker at output {9}.
attacker((mbap[],fc[],data[])).

5. By 4, the attacker may know (mbap[],fc[],data[]).
Using the function 1-proj-3-tuple the attacker may obtain mbap[].
attacker(mbap[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (a_878,a_879)) at {5}

event(begin(a_878,a_879,(mbap,fc,data))) at {7}

out(cAO, (mbap,fc,data)) at {8} received at {1}

out(c, (mbap,fc,data)) at {9}

The attacker has the message mbap.
A trace has been found.
RESULT not attacker(mbap[]) is false.
-- Query not event(different((mbap[],fc[],data[]),x_886))
Completing...
Starting query not event(different((mbap[],fc[],data[]),x_886))
goal reachable: x_1091 <> (mbap[],fc[],data[]) && attacker(x_1091) -> end(different((mbap[],fc[],data[]),x_1091))

1. The attacker has some term B_1096.
attacker(B_1096).

2. The attacker has some term A_1095.
attacker(A_1095).

3. By 2, the attacker may know A_1095.
By 1, the attacker may know B_1096.
Using the function 2-tuple the attacker may obtain (A_1095,B_1096).
attacker((A_1095,B_1096)).

4. The message (A_1095,B_1096) that the attacker may have by 3 may be received at input {5}.
So the message (mbap[],fc[],data[]) may be sent on channel cAO[] at output {8}.
mess(cAO[],(mbap[],fc[],data[])).

5. The attacker has some term B_1101.
attacker(B_1101).

6. The attacker has some term A_1100.
attacker(A_1100).

7. By 6, the attacker may know A_1100.
By 5, the attacker may know B_1101.
Using the function 2-tuple the attacker may obtain (A_1100,B_1101).
attacker((A_1100,B_1101)).

8. We assume as hypothesis that
attacker(x_1104).

9. The message (A_1100,B_1101) that the attacker may have by 7 may be received at input {10}.
The message x_1104 that the attacker may have by 8 may be received at input {11}.
So the message x_1104 may be sent on channel cBO[] at output {12}.
mess(cBO[],x_1104).

10. The message (mbap[],fc[],data[]) that may be sent on channel cAO[] by 4 may be received at input {1}.
The message x_1104 that may be sent on channel cBO[] by 9 may be received at input {2}.
We have (mbap[],fc[],data[]) <> x_1104.
So event different((mbap[],fc[],data[]),x_1104) may be executed at {4}.
end(different((mbap[],fc[],data[]),x_1104)).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (a_1108,a_1109)) at {5}

event(begin(a_1108,a_1109,(mbap,fc,data))) at {7}

out(cAO, (mbap,fc,data)) at {8} received at {1}

out(c, (mbap,fc,data)) at {9}

in(c, (a_1106,a_1107)) at {10}

in(c, a_1105) at {11}

out(cBO, a_1105) at {12} received at {2}

event(end(a_1106,a_1107,a_1105)) at {13}

event(different((mbap,fc,data),a_1105)) at {4}

The event different((mbap,fc,data),a_1105) is executed.
A trace has been found.
RESULT not event(different((mbap[],fc[],data[]),x_886)) is false.
