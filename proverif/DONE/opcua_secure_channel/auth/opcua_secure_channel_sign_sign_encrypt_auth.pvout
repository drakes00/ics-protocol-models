Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (SPs: bitstring,=Sign,UP: bitstring,=pkSess));
    {15}new SPc: bitstring;
    {16}new Nc: bitstring;
    {17}let gNc: bitstring = exp(g,Nc) in
    {18}let m1: bitstring = (SPc,gNc) in
    {19}event beginCli(Cli,Sess,gNc);
    {20}out(c, (pkCli,m1,sign(h(m1),skCli)));
    {21}in(c, (PartS: bitstring,sigPartS: bitstring));
    {22}if (verify(h(PartS),sigPartS,pkSess) <> true) then
        0
    else
        {23}if ((Sess = A) || ((Sess = B) || (Sess = C))) then
        {24}event endCli(Sess,Cli,PartS)
) | (
    {25}!
    {26}in(c, (Cli_84: host,Disco_85: host,Sess_86: host));
    {27}let skDisco: bitstring = (if (Disco_85 = A) then skA else (if (Disco_85 = B) then skB else (if (Disco_85 = C) then skC else fail-any))) in
    {28}let pkDisco_87: bitstring = pub(skDisco) in
    {29}let pkCli_88: bitstring = (if (Cli_84 = A) then pub(skA) else (if (Cli_84 = B) then pub(skB) else (if (Cli_84 = C) then pub(skC) else pub(sk(Cli_84))))) in
    {30}let pkSess_89: bitstring = (if (Sess_86 = A) then pub(skA) else (if (Sess_86 = B) then pub(skB) else (if (Sess_86 = C) then pub(skC) else pub(sk(Sess_86))))) in
    {31}in(c, =GetEndpointRequest);
    {32}new SPs_90: bitstring;
    {33}new UP_91: bitstring;
    {34}out(c, (SPs_90,SignAndEncrypt,UP_91,pkSess_89))
) | (
    {35}!
    {36}in(c, (Cli_92: host,Disco_93: host,Sess_94: host));
    {37}let skSess: bitstring = (if (Sess_94 = A) then skA else (if (Sess_94 = B) then skB else (if (Sess_94 = C) then skC else fail-any))) in
    {38}let pkSess_95: bitstring = pub(skSess) in
    {39}let pkCli_96: bitstring = (if (Cli_92 = A) then pub(skA) else (if (Cli_92 = B) then pub(skB) else (if (Cli_92 = C) then pub(skC) else pub(sk(Cli_92))))) in
    {40}let pkDisco_97: bitstring = (if (Disco_93 = A) then pub(skA) else (if (Disco_93 = B) then pub(skB) else (if (Disco_93 = C) then pub(skC) else pub(sk(Disco_93))))) in
    {41}in(c, (=pkCli_96,em1: bitstring,sigM1: bitstring));
    {42}let m1_98: bitstring = dec(em1,skSess) in
    {43}if (verify(h(m1_98),sigM1,pkCli_96) <> true) then
        0
    else
        {44}let (SPc_99: bitstring,PartC: bitstring) = m1_98 in
        {45}new Ns: bitstring;
        {46}let gNs: bitstring = exp(g,Ns) in
        {47}let m2: bitstring = gNs in
        {48}event beginSrv(Sess_94,Cli_92,gNs);
        {49}out(c, (enc(m2,pkCli_96),sign(h(m2),skSess)));
        {50}if ((Cli_92 = A) || ((Cli_92 = B) || (Cli_92 = C))) then
        {51}event endSrv(Cli_92,Sess_94,PartC)
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 87 rules. 349 rules in the queue.
400 rules inserted. The rule base contains 183 rules. 349 rules in the queue.
600 rules inserted. The rule base contains 183 rules. 347 rules in the queue.
800 rules inserted. The rule base contains 266 rules. 346 rules in the queue.
1000 rules inserted. The rule base contains 267 rules. 321 rules in the queue.
1200 rules inserted. The rule base contains 286 rules. 414 rules in the queue.
1400 rules inserted. The rule base contains 354 rules. 402 rules in the queue.
1600 rules inserted. The rule base contains 417 rules. 899 rules in the queue.
1800 rules inserted. The rule base contains 486 rules. 1110 rules in the queue.
2000 rules inserted. The rule base contains 497 rules. 1155 rules in the queue.
2200 rules inserted. The rule base contains 509 rules. 1199 rules in the queue.
2400 rules inserted. The rule base contains 527 rules. 1293 rules in the queue.
2600 rules inserted. The rule base contains 542 rules. 1362 rules in the queue.
2800 rules inserted. The rule base contains 551 rules. 1381 rules in the queue.
3000 rules inserted. The rule base contains 576 rules. 1332 rules in the queue.
3200 rules inserted. The rule base contains 579 rules. 1329 rules in the queue.
3400 rules inserted. The rule base contains 580 rules. 1328 rules in the queue.
3600 rules inserted. The rule base contains 583 rules. 1325 rules in the queue.
3800 rules inserted. The rule base contains 584 rules. 1324 rules in the queue.
4000 rules inserted. The rule base contains 587 rules. 1321 rules in the queue.
4200 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
4400 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
4600 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
4800 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
5000 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
5200 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
5400 rules inserted. The rule base contains 588 rules. 1320 rules in the queue.
5600 rules inserted. The rule base contains 604 rules. 1336 rules in the queue.
5800 rules inserted. The rule base contains 604 rules. 1336 rules in the queue.
6000 rules inserted. The rule base contains 608 rules. 1340 rules in the queue.
6200 rules inserted. The rule base contains 612 rules. 1344 rules in the queue.
6400 rules inserted. The rule base contains 616 rules. 1348 rules in the queue.
6600 rules inserted. The rule base contains 616 rules. 1348 rules in the queue.
6800 rules inserted. The rule base contains 620 rules. 1352 rules in the queue.
7000 rules inserted. The rule base contains 675 rules. 1377 rules in the queue.
7200 rules inserted. The rule base contains 695 rules. 1397 rules in the queue.
7400 rules inserted. The rule base contains 728 rules. 1418 rules in the queue.
7600 rules inserted. The rule base contains 755 rules. 1433 rules in the queue.
7800 rules inserted. The rule base contains 790 rules. 1456 rules in the queue.
8000 rules inserted. The rule base contains 805 rules. 1470 rules in the queue.
8200 rules inserted. The rule base contains 852 rules. 1494 rules in the queue.
8400 rules inserted. The rule base contains 925 rules. 1499 rules in the queue.
8600 rules inserted. The rule base contains 989 rules. 1515 rules in the queue.
8800 rules inserted. The rule base contains 1083 rules. 1525 rules in the queue.
9000 rules inserted. The rule base contains 1161 rules. 1539 rules in the queue.
9200 rules inserted. The rule base contains 1248 rules. 1554 rules in the queue.
9400 rules inserted. The rule base contains 1312 rules. 1570 rules in the queue.
9600 rules inserted. The rule base contains 1407 rules. 1579 rules in the queue.
9800 rules inserted. The rule base contains 1495 rules. 1572 rules in the queue.
10000 rules inserted. The rule base contains 1645 rules. 1581 rules in the queue.
10200 rules inserted. The rule base contains 1791 rules. 1588 rules in the queue.
10400 rules inserted. The rule base contains 1940 rules. 1592 rules in the queue.
10600 rules inserted. The rule base contains 2105 rules. 1599 rules in the queue.
10800 rules inserted. The rule base contains 2271 rules. 1586 rules in the queue.
11000 rules inserted. The rule base contains 2403 rules. 1603 rules in the queue.
11200 rules inserted. The rule base contains 2567 rules. 1607 rules in the queue.
11400 rules inserted. The rule base contains 2723 rules. 1569 rules in the queue.
11600 rules inserted. The rule base contains 2915 rules. 1541 rules in the queue.
11800 rules inserted. The rule base contains 3107 rules. 1498 rules in the queue.
12000 rules inserted. The rule base contains 3299 rules. 1470 rules in the queue.
12200 rules inserted. The rule base contains 3495 rules. 1419 rules in the queue.
12400 rules inserted. The rule base contains 3691 rules. 1363 rules in the queue.
12600 rules inserted. The rule base contains 3879 rules. 1346 rules in the queue.
12800 rules inserted. The rule base contains 4075 rules. 1295 rules in the queue.
13000 rules inserted. The rule base contains 4239 rules. 1209 rules in the queue.
13200 rules inserted. The rule base contains 4439 rules. 1111 rules in the queue.
13400 rules inserted. The rule base contains 4639 rules. 975 rules in the queue.
13600 rules inserted. The rule base contains 4839 rules. 872 rules in the queue.
13800 rules inserted. The rule base contains 5039 rules. 744 rules in the queue.
14000 rules inserted. The rule base contains 5239 rules. 653 rules in the queue.
14200 rules inserted. The rule base contains 5409 rules. 519 rules in the queue.
14400 rules inserted. The rule base contains 5609 rules. 349 rules in the queue.
14600 rules inserted. The rule base contains 5809 rules. 180 rules in the queue.
14800 rules inserted. The rule base contains 5997 rules. 3 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: Cli_308031 <> C[] && Cli_308031 <> B[] && Cli_308031 <> A[] && begin(beginSrv(C[],Cli_308031,exp(g,Ns[sigM1 = sign(h((SPc_308032,PartC_308033)),sk(Cli_308031)),em1 = enc((SPc_308032,PartC_308033),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_308031,!1 = @sid_308034]))) && attacker(SPc_308032) && attacker(PartC_308033) && attacker(Cli_308031) -> end(endCli(C[],B[],exp(g,Ns[sigM1 = sign(h((SPc_308032,PartC_308033)),sk(Cli_308031)),em1 = enc((SPc_308032,PartC_308033),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_308031,!1 = @sid_308034])))
Abbreviations:
Ns_311348 = Ns[sigM1 = sign(h((SPc_311327,PartC_311328)),sk(Cli_311326)),em1 = enc((SPc_311327,PartC_311328),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_311326,!1 = @sid_311329]

1. The attacker initially knows C[].
attacker(C[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 2, the attacker may know B[].
By 1, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (B[],B[],C[]).
attacker((B[],B[],C[])).

4. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

5. The attacker has some term UP_311343.
attacker(UP_311343).

6. Using the function Sign the attacker may obtain Sign.
attacker(Sign).

7. The attacker has some term SPs_311342.
attacker(SPs_311342).

8. By 7, the attacker may know SPs_311342.
By 6, the attacker may know Sign.
By 5, the attacker may know UP_311343.
By 4, the attacker may know pub(skC[]).
Using the function 4-tuple the attacker may obtain (SPs_311342,Sign,UP_311343,pub(skC[])).
attacker((SPs_311342,Sign,UP_311343,pub(skC[]))).

9. We assume as hypothesis that
attacker(Cli_311326).

10. By 9, the attacker may know Cli_311326.
By 2, the attacker may know B[].
By 1, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (Cli_311326,B[],C[]).
attacker((Cli_311326,B[],C[])).

11. By 9, the attacker may know Cli_311326.
Using the function sk the attacker may obtain sk(Cli_311326).
attacker(sk(Cli_311326)).

12. We assume as hypothesis that
attacker(PartC_311328).

13. We assume as hypothesis that
attacker(SPc_311327).

14. By 13, the attacker may know SPc_311327.
By 12, the attacker may know PartC_311328.
Using the function 2-tuple the attacker may obtain (SPc_311327,PartC_311328).
attacker((SPc_311327,PartC_311328)).

15. By 14, the attacker may know (SPc_311327,PartC_311328).
Using the function h the attacker may obtain h((SPc_311327,PartC_311328)).
attacker(h((SPc_311327,PartC_311328))).

16. By 15, the attacker may know h((SPc_311327,PartC_311328)).
By 11, the attacker may know sk(Cli_311326).
Using the function sign the attacker may obtain sign(h((SPc_311327,PartC_311328)),sk(Cli_311326)).
attacker(sign(h((SPc_311327,PartC_311328)),sk(Cli_311326))).

17. By 14, the attacker may know (SPc_311327,PartC_311328).
By 4, the attacker may know pub(skC[]).
Using the function enc the attacker may obtain enc((SPc_311327,PartC_311328),pub(skC[])).
attacker(enc((SPc_311327,PartC_311328),pub(skC[]))).

18. By 11, the attacker may know sk(Cli_311326).
Using the function pub the attacker may obtain pub(sk(Cli_311326)).
attacker(pub(sk(Cli_311326))).

19. By 18, the attacker may know pub(sk(Cli_311326)).
By 17, the attacker may know enc((SPc_311327,PartC_311328),pub(skC[])).
By 16, the attacker may know sign(h((SPc_311327,PartC_311328)),sk(Cli_311326)).
Using the function 3-tuple the attacker may obtain (pub(sk(Cli_311326)),enc((SPc_311327,PartC_311328),pub(skC[])),sign(h((SPc_311327,PartC_311328)),sk(Cli_311326))).
attacker((pub(sk(Cli_311326)),enc((SPc_311327,PartC_311328),pub(skC[])),sign(h((SPc_311327,PartC_311328)),sk(Cli_311326)))).

20. The message (Cli_311326,B[],C[]) that the attacker may have by 10 may be received at input {36}.
The message (pub(sk(Cli_311326)),enc((SPc_311327,PartC_311328),pub(skC[])),sign(h((SPc_311327,PartC_311328)),sk(Cli_311326))) that the attacker may have by 19 may be received at input {41}.
The event beginSrv(C[],Cli_311326,exp(g,Ns_311348)) may be executed at {48}.
We have Cli_311326 <> C[] & Cli_311326 <> B[] & Cli_311326 <> A[].
So the message (enc(exp(g,Ns_311348),pub(sk(Cli_311326))),sign(h(exp(g,Ns_311348)),skC[])) may be sent to the attacker at output {49}.
attacker((enc(exp(g,Ns_311348),pub(sk(Cli_311326))),sign(h(exp(g,Ns_311348)),skC[]))).

21. By 20, the attacker may know (enc(exp(g,Ns_311348),pub(sk(Cli_311326))),sign(h(exp(g,Ns_311348)),skC[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(exp(g,Ns_311348)),skC[]).
attacker(sign(h(exp(g,Ns_311348)),skC[])).

22. By 20, the attacker may know (enc(exp(g,Ns_311348),pub(sk(Cli_311326))),sign(h(exp(g,Ns_311348)),skC[])).
Using the function 1-proj-2-tuple the attacker may obtain enc(exp(g,Ns_311348),pub(sk(Cli_311326))).
attacker(enc(exp(g,Ns_311348),pub(sk(Cli_311326)))).

23. By 22, the attacker may know enc(exp(g,Ns_311348),pub(sk(Cli_311326))).
By 11, the attacker may know sk(Cli_311326).
Using the function dec the attacker may obtain exp(g,Ns_311348).
attacker(exp(g,Ns_311348)).

24. By 23, the attacker may know exp(g,Ns_311348).
By 21, the attacker may know sign(h(exp(g,Ns_311348)),skC[]).
Using the function 2-tuple the attacker may obtain (exp(g,Ns_311348),sign(h(exp(g,Ns_311348)),skC[])).
attacker((exp(g,Ns_311348),sign(h(exp(g,Ns_311348)),skC[]))).

25. The message (B[],B[],C[]) that the attacker may have by 3 may be received at input {8}.
The message (SPs_311342,Sign,UP_311343,pub(skC[])) that the attacker may have by 8 may be received at input {14}.
The message (exp(g,Ns_311348),sign(h(exp(g,Ns_311348)),skC[])) that the attacker may have by 24 may be received at input {21}.
So event endCli(C[],B[],exp(g,Ns_311348)) may be executed at {24}.
end(endCli(C[],B[],exp(g,Ns_311348))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (B,B,C)) at {8} in copy a_311354

out(c, GetEndpointRequest) at {13} in copy a_311354

in(c, (a_311352,Sign,a_311353,pub(skC))) at {14} in copy a_311354

new SPc creating SPc_311600 at {15} in copy a_311354

new Nc creating Nc_311601 at {16} in copy a_311354

event(beginCli(B,C,exp(g,Nc_311601))) at {19} in copy a_311354

out(c, (pub(skB),(SPc_311600,exp(g,Nc_311601)),sign(h((SPc_311600,exp(g,Nc_311601))),skB))) at {20} in copy a_311354

in(c, (a_311350,B,C)) at {36} in copy a_311351

in(c, (pub(sk(a_311350)),enc((a,a_311349),pub(skC)),sign(h((a,a_311349)),sk(a_311350)))) at {41} in copy a_311351

new Ns creating Ns_311355 at {45} in copy a_311351

event(beginSrv(C,a_311350,exp(g,Ns_311355))) at {48} in copy a_311351

out(c, (enc(exp(g,Ns_311355),pub(sk(a_311350))),sign(h(exp(g,Ns_311355)),skC))) at {49} in copy a_311351

in(c, (exp(g,Ns_311355),sign(h(exp(g,Ns_311355)),skC))) at {21} in copy a_311354

event(endCli(C,B,exp(g,Ns_311355))) at {24} in copy a_311354

The event endCli(C,B,exp(g,Ns_311355)) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_311775,Y_311776,N_311777)) ==> event(beginCli(X_311775,Y_311776,N_311777))
Completing...
200 rules inserted. The rule base contains 78 rules. 349 rules in the queue.
400 rules inserted. The rule base contains 183 rules. 349 rules in the queue.
600 rules inserted. The rule base contains 183 rules. 347 rules in the queue.
800 rules inserted. The rule base contains 273 rules. 346 rules in the queue.
1000 rules inserted. The rule base contains 276 rules. 321 rules in the queue.
1200 rules inserted. The rule base contains 288 rules. 421 rules in the queue.
1400 rules inserted. The rule base contains 354 rules. 411 rules in the queue.
1600 rules inserted. The rule base contains 417 rules. 908 rules in the queue.
1800 rules inserted. The rule base contains 481 rules. 1124 rules in the queue.
2000 rules inserted. The rule base contains 500 rules. 1161 rules in the queue.
2200 rules inserted. The rule base contains 512 rules. 1205 rules in the queue.
2400 rules inserted. The rule base contains 530 rules. 1299 rules in the queue.
2600 rules inserted. The rule base contains 544 rules. 1369 rules in the queue.
2800 rules inserted. The rule base contains 554 rules. 1387 rules in the queue.
3000 rules inserted. The rule base contains 585 rules. 1332 rules in the queue.
3200 rules inserted. The rule base contains 587 rules. 1330 rules in the queue.
3400 rules inserted. The rule base contains 589 rules. 1328 rules in the queue.
3600 rules inserted. The rule base contains 591 rules. 1326 rules in the queue.
3800 rules inserted. The rule base contains 593 rules. 1324 rules in the queue.
4000 rules inserted. The rule base contains 596 rules. 1321 rules in the queue.
4200 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
4400 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
4600 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
4800 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
5000 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
5200 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
5400 rules inserted. The rule base contains 597 rules. 1320 rules in the queue.
5600 rules inserted. The rule base contains 609 rules. 1314 rules in the queue.
5800 rules inserted. The rule base contains 614 rules. 1311 rules in the queue.
6000 rules inserted. The rule base contains 619 rules. 1308 rules in the queue.
6200 rules inserted. The rule base contains 624 rules. 1305 rules in the queue.
6400 rules inserted. The rule base contains 629 rules. 1302 rules in the queue.
6600 rules inserted. The rule base contains 629 rules. 1302 rules in the queue.
6800 rules inserted. The rule base contains 634 rules. 1299 rules in the queue.
7000 rules inserted. The rule base contains 669 rules. 1279 rules in the queue.
7200 rules inserted. The rule base contains 692 rules. 1265 rules in the queue.
7400 rules inserted. The rule base contains 723 rules. 1246 rules in the queue.
7600 rules inserted. The rule base contains 749 rules. 1230 rules in the queue.
7800 rules inserted. The rule base contains 780 rules. 1211 rules in the queue.
8000 rules inserted. The rule base contains 805 rules. 1196 rules in the queue.
8200 rules inserted. The rule base contains 852 rules. 1171 rules in the queue.
8400 rules inserted. The rule base contains 899 rules. 1140 rules in the queue.
8600 rules inserted. The rule base contains 961 rules. 1100 rules in the queue.
8800 rules inserted. The rule base contains 1016 rules. 1065 rules in the queue.
9000 rules inserted. The rule base contains 1078 rules. 1025 rules in the queue.
9200 rules inserted. The rule base contains 1123 rules. 996 rules in the queue.
9400 rules inserted. The rule base contains 1221 rules. 934 rules in the queue.
9600 rules inserted. The rule base contains 1331 rules. 864 rules in the queue.
9800 rules inserted. The rule base contains 1467 rules. 775 rules in the queue.
10000 rules inserted. The rule base contains 1603 rules. 687 rules in the queue.
10200 rules inserted. The rule base contains 1711 rules. 619 rules in the queue.
10400 rules inserted. The rule base contains 1885 rules. 496 rules in the queue.
10600 rules inserted. The rule base contains 2067 rules. 363 rules in the queue.
10800 rules inserted. The rule base contains 2245 rules. 235 rules in the queue.
11000 rules inserted. The rule base contains 2443 rules. 68 rules in the queue.
Starting query event(endSrv(X_311775,Y_311776,N_311777)) ==> event(beginCli(X_311775,Y_311776,N_311777))
goal reachable: Sess_589466 <> C[] && Sess_589466 <> B[] && Sess_589466 <> A[] && begin(beginCli(C[],Sess_589466,exp(g,Nc[UP = UP_589467,SPs = SPs_589468,Sess = Sess_589466,Disco = B[],Cli = C[],!1 = @sid_589469]))) && attacker(SPs_589468) && attacker(UP_589467) && attacker(Sess_589466) -> end(endSrv(C[],A[],exp(g,Nc[UP = UP_589467,SPs = SPs_589468,Sess = Sess_589466,Disco = B[],Cli = C[],!1 = @sid_589469])))
Abbreviations:
Nc_592417 = Nc[UP = UP_592395,SPs = SPs_592396,Sess = Sess_592394,Disco = B[],Cli = C[],!1 = @sid_592397]
SPc_592418 = SPc[UP = UP_592395,SPs = SPs_592396,Sess = Sess_592394,Disco = B[],Cli = C[],!1 = @sid_592397]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows C[].
attacker(C[]).

3. By 2, the attacker may know C[].
By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 3-tuple the attacker may obtain (C[],A[],A[]).
attacker((C[],A[],A[])).

4. We assume as hypothesis that
attacker(Sess_592394).

5. The attacker initially knows B[].
attacker(B[]).

6. By 2, the attacker may know C[].
By 5, the attacker may know B[].
By 4, the attacker may know Sess_592394.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_592394).
attacker((C[],B[],Sess_592394)).

7. By 4, the attacker may know Sess_592394.
Using the function sk the attacker may obtain sk(Sess_592394).
attacker(sk(Sess_592394)).

8. By 7, the attacker may know sk(Sess_592394).
Using the function pub the attacker may obtain pub(sk(Sess_592394)).
attacker(pub(sk(Sess_592394))).

9. We assume as hypothesis that
attacker(UP_592395).

10. Using the function Sign the attacker may obtain Sign.
attacker(Sign).

11. We assume as hypothesis that
attacker(SPs_592396).

12. By 11, the attacker may know SPs_592396.
By 10, the attacker may know Sign.
By 9, the attacker may know UP_592395.
By 8, the attacker may know pub(sk(Sess_592394)).
Using the function 4-tuple the attacker may obtain (SPs_592396,Sign,UP_592395,pub(sk(Sess_592394))).
attacker((SPs_592396,Sign,UP_592395,pub(sk(Sess_592394)))).

13. The message (C[],B[],Sess_592394) that the attacker may have by 6 may be received at input {8}.
The message (SPs_592396,Sign,UP_592395,pub(sk(Sess_592394))) that the attacker may have by 12 may be received at input {14}.
The event beginCli(C[],Sess_592394,exp(g,Nc_592417)) may be executed at {19}.
We have Sess_592394 <> C[] & Sess_592394 <> B[] & Sess_592394 <> A[].
So the message (pub(skC[]),(SPc_592418,exp(g,Nc_592417)),sign(h((SPc_592418,exp(g,Nc_592417))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),(SPc_592418,exp(g,Nc_592417)),sign(h((SPc_592418,exp(g,Nc_592417))),skC[]))).

14. By 13, the attacker may know (pub(skC[]),(SPc_592418,exp(g,Nc_592417)),sign(h((SPc_592418,exp(g,Nc_592417))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_592418,exp(g,Nc_592417))),skC[]).
attacker(sign(h((SPc_592418,exp(g,Nc_592417))),skC[])).

15. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

16. By 13, the attacker may know (pub(skC[]),(SPc_592418,exp(g,Nc_592417)),sign(h((SPc_592418,exp(g,Nc_592417))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain (SPc_592418,exp(g,Nc_592417)).
attacker((SPc_592418,exp(g,Nc_592417))).

17. By 16, the attacker may know (SPc_592418,exp(g,Nc_592417)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_592417).
attacker(exp(g,Nc_592417)).

18. By 16, the attacker may know (SPc_592418,exp(g,Nc_592417)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_592418.
attacker(SPc_592418).

19. By 18, the attacker may know SPc_592418.
By 17, the attacker may know exp(g,Nc_592417).
Using the function 2-tuple the attacker may obtain (SPc_592418,exp(g,Nc_592417)).
attacker((SPc_592418,exp(g,Nc_592417))).

20. By 19, the attacker may know (SPc_592418,exp(g,Nc_592417)).
By 15, the attacker may know pub(skA[]).
Using the function enc the attacker may obtain enc((SPc_592418,exp(g,Nc_592417)),pub(skA[])).
attacker(enc((SPc_592418,exp(g,Nc_592417)),pub(skA[]))).

21. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

22. By 21, the attacker may know pub(skC[]).
By 20, the attacker may know enc((SPc_592418,exp(g,Nc_592417)),pub(skA[])).
By 14, the attacker may know sign(h((SPc_592418,exp(g,Nc_592417))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),enc((SPc_592418,exp(g,Nc_592417)),pub(skA[])),sign(h((SPc_592418,exp(g,Nc_592417))),skC[])).
attacker((pub(skC[]),enc((SPc_592418,exp(g,Nc_592417)),pub(skA[])),sign(h((SPc_592418,exp(g,Nc_592417))),skC[]))).

23. The message (C[],A[],A[]) that the attacker may have by 3 may be received at input {36}.
The message (pub(skC[]),enc((SPc_592418,exp(g,Nc_592417)),pub(skA[])),sign(h((SPc_592418,exp(g,Nc_592417))),skC[])) that the attacker may have by 22 may be received at input {41}.
So event endSrv(C[],A[],exp(g,Nc_592417)) may be executed at {51}.
end(endSrv(C[],A[],exp(g,Nc_592417))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_592421)) at {8} in copy a_592422

out(c, GetEndpointRequest) at {13} in copy a_592422

in(c, (a_592420,Sign,a_592419,pub(sk(a_592421)))) at {14} in copy a_592422

new SPc creating SPc_592425 at {15} in copy a_592422

new Nc creating Nc_592424 at {16} in copy a_592422

event(beginCli(C,a_592421,exp(g,Nc_592424))) at {19} in copy a_592422

out(c, (pub(skC),(SPc_592425,exp(g,Nc_592424)),sign(h((SPc_592425,exp(g,Nc_592424))),skC))) at {20} in copy a_592422

in(c, (C,A,A)) at {36} in copy a_592423

in(c, (pub(skC),enc((SPc_592425,exp(g,Nc_592424)),pub(skA)),sign(h((SPc_592425,exp(g,Nc_592424))),skC))) at {41} in copy a_592423

new Ns creating Ns_592810 at {45} in copy a_592423

event(beginSrv(A,C,exp(g,Ns_592810))) at {48} in copy a_592423

out(c, (enc(exp(g,Ns_592810),pub(skC)),sign(h(exp(g,Ns_592810)),skA))) at {49} in copy a_592423

event(endSrv(C,A,exp(g,Nc_592424))) at {51} in copy a_592423

The event endSrv(C,A,exp(g,Nc_592424)) is executed.
A trace has been found.
RESULT event(endSrv(X_311775,Y_311776,N_311777)) ==> event(beginCli(X_311775,Y_311776,N_311777)) is false.
