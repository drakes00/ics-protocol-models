Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (SPs: bitstring,=Sign,UP: bitstring,=pkSess));
    {15}new SPc: bitstring;
    {16}new Nc: bitstring;
    {17}let gNc: bitstring = exp(g,Nc) in
    {18}let m1: bitstring = (SPc,gNc) in
    {19}event beginCli(Cli,Sess,gNc);
    {20}out(c, (pkCli,m1,sign(h(m1),skCli)));
    {21}in(c, (PartS: bitstring,sigPartS: bitstring));
    {22}if (verify(h(PartS),sigPartS,pkSess) <> true) then
        0
    else
        {23}if ((Sess = A) || ((Sess = B) || (Sess = C))) then
        {24}event endCli(Sess,Cli,PartS)
) | (
    {25}!
    {26}in(c, (Cli_84: host,Disco_85: host,Sess_86: host));
    {27}let skDisco: bitstring = (if (Disco_85 = A) then skA else (if (Disco_85 = B) then skB else (if (Disco_85 = C) then skC else fail-any))) in
    {28}let pkDisco_87: bitstring = pub(skDisco) in
    {29}let pkCli_88: bitstring = (if (Cli_84 = A) then pub(skA) else (if (Cli_84 = B) then pub(skB) else (if (Cli_84 = C) then pub(skC) else pub(sk(Cli_84))))) in
    {30}let pkSess_89: bitstring = (if (Sess_86 = A) then pub(skA) else (if (Sess_86 = B) then pub(skB) else (if (Sess_86 = C) then pub(skC) else pub(sk(Sess_86))))) in
    {31}in(c, =GetEndpointRequest);
    {32}new SPs_90: bitstring;
    {33}new UP_91: bitstring;
    {34}out(c, (SPs_90,Sign,UP_91,pkSess_89))
) | (
    {35}!
    {36}in(c, (Cli_92: host,Disco_93: host,Sess_94: host));
    {37}let skSess: bitstring = (if (Sess_94 = A) then skA else (if (Sess_94 = B) then skB else (if (Sess_94 = C) then skC else fail-any))) in
    {38}let pkSess_95: bitstring = pub(skSess) in
    {39}let pkCli_96: bitstring = (if (Cli_92 = A) then pub(skA) else (if (Cli_92 = B) then pub(skB) else (if (Cli_92 = C) then pub(skC) else pub(sk(Cli_92))))) in
    {40}let pkDisco_97: bitstring = (if (Disco_93 = A) then pub(skA) else (if (Disco_93 = B) then pub(skB) else (if (Disco_93 = C) then pub(skC) else pub(sk(Disco_93))))) in
    {41}in(c, (=pkCli_96,m1_98: bitstring,sigM1: bitstring));
    {42}if (verify(h(m1_98),sigM1,pkCli_96) <> true) then
        0
    else
        {43}let (SPc_99: bitstring,PartC: bitstring) = m1_98 in
        {44}new Ns: bitstring;
        {45}let gNs: bitstring = exp(g,Ns) in
        {46}let m2: bitstring = gNs in
        {47}event beginSrv(Sess_94,Cli_92,gNs);
        {48}out(c, (m2,sign(h(m2),skSess)));
        {49}if ((Cli_92 = A) || ((Cli_92 = B) || (Cli_92 = C))) then
        {50}event endSrv(Cli_92,Sess_94,PartC)
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 87 rules. 349 rules in the queue.
400 rules inserted. The rule base contains 183 rules. 349 rules in the queue.
600 rules inserted. The rule base contains 183 rules. 347 rules in the queue.
800 rules inserted. The rule base contains 170 rules. 346 rules in the queue.
1000 rules inserted. The rule base contains 171 rules. 321 rules in the queue.
1200 rules inserted. The rule base contains 190 rules. 414 rules in the queue.
1400 rules inserted. The rule base contains 311 rules. 330 rules in the queue.
1600 rules inserted. The rule base contains 369 rules. 827 rules in the queue.
1800 rules inserted. The rule base contains 415 rules. 1061 rules in the queue.
2000 rules inserted. The rule base contains 433 rules. 1155 rules in the queue.
2200 rules inserted. The rule base contains 445 rules. 1199 rules in the queue.
2400 rules inserted. The rule base contains 457 rules. 1243 rules in the queue.
2600 rules inserted. The rule base contains 475 rules. 1337 rules in the queue.
2800 rules inserted. The rule base contains 492 rules. 1344 rules in the queue.
3000 rules inserted. The rule base contains 493 rules. 1343 rules in the queue.
3200 rules inserted. The rule base contains 496 rules. 1340 rules in the queue.
3400 rules inserted. The rule base contains 498 rules. 1338 rules in the queue.
3600 rules inserted. The rule base contains 500 rules. 1336 rules in the queue.
3800 rules inserted. The rule base contains 502 rules. 1334 rules in the queue.
4000 rules inserted. The rule base contains 504 rules. 1332 rules in the queue.
4200 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
4400 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
4600 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
4800 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
5000 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
5200 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
5400 rules inserted. The rule base contains 522 rules. 1338 rules in the queue.
5600 rules inserted. The rule base contains 532 rules. 1336 rules in the queue.
5800 rules inserted. The rule base contains 532 rules. 1336 rules in the queue.
6000 rules inserted. The rule base contains 536 rules. 1340 rules in the queue.
6200 rules inserted. The rule base contains 540 rules. 1344 rules in the queue.
6400 rules inserted. The rule base contains 544 rules. 1348 rules in the queue.
6600 rules inserted. The rule base contains 544 rules. 1348 rules in the queue.
6800 rules inserted. The rule base contains 552 rules. 1356 rules in the queue.
7000 rules inserted. The rule base contains 591 rules. 1389 rules in the queue.
7200 rules inserted. The rule base contains 622 rules. 1414 rules in the queue.
7400 rules inserted. The rule base contains 651 rules. 1441 rules in the queue.
7600 rules inserted. The rule base contains 681 rules. 1467 rules in the queue.
7800 rules inserted. The rule base contains 716 rules. 1496 rules in the queue.
8000 rules inserted. The rule base contains 755 rules. 1529 rules in the queue.
8200 rules inserted. The rule base contains 797 rules. 1551 rules in the queue.
8400 rules inserted. The rule base contains 899 rules. 1617 rules in the queue.
8600 rules inserted. The rule base contains 976 rules. 1660 rules in the queue.
8800 rules inserted. The rule base contains 1073 rules. 1727 rules in the queue.
9000 rules inserted. The rule base contains 1170 rules. 1778 rules in the queue.
9200 rules inserted. The rule base contains 1267 rules. 1830 rules in the queue.
9400 rules inserted. The rule base contains 1346 rules. 1890 rules in the queue.
9600 rules inserted. The rule base contains 1449 rules. 1944 rules in the queue.
9800 rules inserted. The rule base contains 1508 rules. 1944 rules in the queue.
10000 rules inserted. The rule base contains 1580 rules. 1929 rules in the queue.
10200 rules inserted. The rule base contains 1671 rules. 1957 rules in the queue.
10400 rules inserted. The rule base contains 1726 rules. 1934 rules in the queue.
10600 rules inserted. The rule base contains 1798 rules. 1942 rules in the queue.
10800 rules inserted. The rule base contains 1871 rules. 1933 rules in the queue.
11000 rules inserted. The rule base contains 1933 rules. 1927 rules in the queue.
11200 rules inserted. The rule base contains 2022 rules. 1950 rules in the queue.
11400 rules inserted. The rule base contains 2094 rules. 1942 rules in the queue.
11600 rules inserted. The rule base contains 2140 rules. 1920 rules in the queue.
11800 rules inserted. The rule base contains 2178 rules. 1890 rules in the queue.
12000 rules inserted. The rule base contains 2211 rules. 1873 rules in the queue.
12200 rules inserted. The rule base contains 2243 rules. 1857 rules in the queue.
12400 rules inserted. The rule base contains 2259 rules. 1845 rules in the queue.
12600 rules inserted. The rule base contains 2285 rules. 1831 rules in the queue.
12800 rules inserted. The rule base contains 2319 rules. 1813 rules in the queue.
13000 rules inserted. The rule base contains 2335 rules. 1801 rules in the queue.
13200 rules inserted. The rule base contains 2373 rules. 1783 rules in the queue.
13400 rules inserted. The rule base contains 2394 rules. 1770 rules in the queue.
13600 rules inserted. The rule base contains 2413 rules. 1751 rules in the queue.
13800 rules inserted. The rule base contains 2416 rules. 1748 rules in the queue.
14000 rules inserted. The rule base contains 2422 rules. 1742 rules in the queue.
14200 rules inserted. The rule base contains 2424 rules. 1740 rules in the queue.
14400 rules inserted. The rule base contains 2430 rules. 1734 rules in the queue.
14600 rules inserted. The rule base contains 2434 rules. 1730 rules in the queue.
14800 rules inserted. The rule base contains 2437 rules. 1727 rules in the queue.
15000 rules inserted. The rule base contains 2442 rules. 1722 rules in the queue.
15200 rules inserted. The rule base contains 2446 rules. 1718 rules in the queue.
15400 rules inserted. The rule base contains 2462 rules. 1702 rules in the queue.
15600 rules inserted. The rule base contains 2470 rules. 1694 rules in the queue.
15800 rules inserted. The rule base contains 2486 rules. 1678 rules in the queue.
16000 rules inserted. The rule base contains 2496 rules. 1668 rules in the queue.
16200 rules inserted. The rule base contains 2514 rules. 1650 rules in the queue.
16400 rules inserted. The rule base contains 2532 rules. 1632 rules in the queue.
16600 rules inserted. The rule base contains 2540 rules. 1624 rules in the queue.
16800 rules inserted. The rule base contains 2548 rules. 1616 rules in the queue.
17000 rules inserted. The rule base contains 2579 rules. 1585 rules in the queue.
17200 rules inserted. The rule base contains 2648 rules. 1516 rules in the queue.
17400 rules inserted. The rule base contains 2685 rules. 1479 rules in the queue.
17600 rules inserted. The rule base contains 2757 rules. 1407 rules in the queue.
17800 rules inserted. The rule base contains 2817 rules. 1347 rules in the queue.
18000 rules inserted. The rule base contains 2865 rules. 1299 rules in the queue.
18200 rules inserted. The rule base contains 2936 rules. 1228 rules in the queue.
18400 rules inserted. The rule base contains 2975 rules. 1189 rules in the queue.
18600 rules inserted. The rule base contains 3068 rules. 1096 rules in the queue.
18800 rules inserted. The rule base contains 3189 rules. 975 rules in the queue.
19000 rules inserted. The rule base contains 3321 rules. 843 rules in the queue.
19200 rules inserted. The rule base contains 3439 rules. 725 rules in the queue.
19400 rules inserted. The rule base contains 3573 rules. 591 rules in the queue.
19600 rules inserted. The rule base contains 3689 rules. 475 rules in the queue.
19800 rules inserted. The rule base contains 3857 rules. 307 rules in the queue.
20000 rules inserted. The rule base contains 4033 rules. 131 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: Sess_573440 <> C[] && Sess_573440 <> B[] && Sess_573440 <> A[] && begin(beginSrv(A[],C[],exp(g,Ns[sigM1 = sign(h((SPc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441],exp(g,Nc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441]))),skC[]),m1_98 = (SPc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441],exp(g,Nc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441])),Sess_94 = A[],Disco_93 = B[],Cli_92 = C[],!1 = @sid_573442]))) && attacker(SPs_573439) && attacker(UP_573438) && attacker(Sess_573440) -> end(endCli(A[],B[],exp(g,Ns[sigM1 = sign(h((SPc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441],exp(g,Nc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441]))),skC[]),m1_98 = (SPc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441],exp(g,Nc[UP = UP_573438,SPs = SPs_573439,Sess = Sess_573440,Disco = B[],Cli = C[],!1 = @sid_573441])),Sess_94 = A[],Disco_93 = B[],Cli_92 = C[],!1 = @sid_573442])))
Abbreviations:
SPc_692936 = SPc[UP = UP_692901,SPs = SPs_692900,Sess = Sess_692902,Disco = B[],Cli = C[],!1 = @sid_692903]
Nc_692937 = Nc[UP = UP_692901,SPs = SPs_692900,Sess = Sess_692902,Disco = B[],Cli = C[],!1 = @sid_692903]
Ns_692938 = Ns[sigM1 = sign(h((SPc_692936,exp(g,Nc_692937))),skC[]),m1_98 = (SPc_692936,exp(g,Nc_692937)),Sess_94 = A[],Disco_93 = B[],Cli_92 = C[],!1 = @sid_692917]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 3-tuple the attacker may obtain (B[],A[],A[]).
attacker((B[],A[],A[])).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. The attacker has some term UP_692931.
attacker(UP_692931).

6. Using the function Sign the attacker may obtain Sign.
attacker(Sign).

7. The attacker has some term SPs_692930.
attacker(SPs_692930).

8. By 7, the attacker may know SPs_692930.
By 6, the attacker may know Sign.
By 5, the attacker may know UP_692931.
By 4, the attacker may know pub(skA[]).
Using the function 4-tuple the attacker may obtain (SPs_692930,Sign,UP_692931,pub(skA[])).
attacker((SPs_692930,Sign,UP_692931,pub(skA[]))).

9. The attacker initially knows C[].
attacker(C[]).

10. By 9, the attacker may know C[].
By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 3-tuple the attacker may obtain (C[],B[],A[]).
attacker((C[],B[],A[])).

11. We assume as hypothesis that
attacker(Sess_692902).

12. By 9, the attacker may know C[].
By 2, the attacker may know B[].
By 11, the attacker may know Sess_692902.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_692902).
attacker((C[],B[],Sess_692902)).

13. By 11, the attacker may know Sess_692902.
Using the function sk the attacker may obtain sk(Sess_692902).
attacker(sk(Sess_692902)).

14. By 13, the attacker may know sk(Sess_692902).
Using the function pub the attacker may obtain pub(sk(Sess_692902)).
attacker(pub(sk(Sess_692902))).

15. We assume as hypothesis that
attacker(UP_692901).

16. We assume as hypothesis that
attacker(SPs_692900).

17. By 16, the attacker may know SPs_692900.
By 6, the attacker may know Sign.
By 15, the attacker may know UP_692901.
By 14, the attacker may know pub(sk(Sess_692902)).
Using the function 4-tuple the attacker may obtain (SPs_692900,Sign,UP_692901,pub(sk(Sess_692902))).
attacker((SPs_692900,Sign,UP_692901,pub(sk(Sess_692902)))).

18. The message (C[],B[],Sess_692902) that the attacker may have by 12 may be received at input {8}.
The message (SPs_692900,Sign,UP_692901,pub(sk(Sess_692902))) that the attacker may have by 17 may be received at input {14}.
We have Sess_692902 <> C[] & Sess_692902 <> B[] & Sess_692902 <> A[].
So the message (pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[]))).

19. By 18, the attacker may know (pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_692936,exp(g,Nc_692937))),skC[]).
attacker(sign(h((SPc_692936,exp(g,Nc_692937))),skC[])).

20. By 18, the attacker may know (pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain (SPc_692936,exp(g,Nc_692937)).
attacker((SPc_692936,exp(g,Nc_692937))).

21. By 20, the attacker may know (SPc_692936,exp(g,Nc_692937)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_692937).
attacker(exp(g,Nc_692937)).

22. By 20, the attacker may know (SPc_692936,exp(g,Nc_692937)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_692936.
attacker(SPc_692936).

23. By 22, the attacker may know SPc_692936.
By 21, the attacker may know exp(g,Nc_692937).
Using the function 2-tuple the attacker may obtain (SPc_692936,exp(g,Nc_692937)).
attacker((SPc_692936,exp(g,Nc_692937))).

24. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

25. By 24, the attacker may know pub(skC[]).
By 23, the attacker may know (SPc_692936,exp(g,Nc_692937)).
By 19, the attacker may know sign(h((SPc_692936,exp(g,Nc_692937))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[])).
attacker((pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[]))).

26. The message (C[],B[],A[]) that the attacker may have by 10 may be received at input {36}.
The message (pub(skC[]),(SPc_692936,exp(g,Nc_692937)),sign(h((SPc_692936,exp(g,Nc_692937))),skC[])) that the attacker may have by 25 may be received at input {41}.
The event beginSrv(A[],C[],exp(g,Ns_692938)) may be executed at {47}.
So the message (exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[])) may be sent to the attacker at output {48}.
attacker((exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[]))).

27. By 26, the attacker may know (exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(exp(g,Ns_692938)),skA[]).
attacker(sign(h(exp(g,Ns_692938)),skA[])).

28. By 26, the attacker may know (exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain exp(g,Ns_692938).
attacker(exp(g,Ns_692938)).

29. By 28, the attacker may know exp(g,Ns_692938).
By 27, the attacker may know sign(h(exp(g,Ns_692938)),skA[]).
Using the function 2-tuple the attacker may obtain (exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[])).
attacker((exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[]))).

30. The message (B[],A[],A[]) that the attacker may have by 3 may be received at input {8}.
The message (SPs_692930,Sign,UP_692931,pub(skA[])) that the attacker may have by 8 may be received at input {14}.
The message (exp(g,Ns_692938),sign(h(exp(g,Ns_692938)),skA[])) that the attacker may have by 29 may be received at input {21}.
So event endCli(A[],B[],exp(g,Ns_692938)) may be executed at {24}.
end(endCli(A[],B[],exp(g,Ns_692938))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_692940)) at {8} in copy a_692941

out(c, GetEndpointRequest) at {13} in copy a_692941

in(c, (a_692939,Sign,a,pub(sk(a_692940)))) at {14} in copy a_692941

new SPc creating SPc_692946 at {15} in copy a_692941

new Nc creating Nc_692947 at {16} in copy a_692941

event(beginCli(C,a_692940,exp(g,Nc_692947))) at {19} in copy a_692941

out(c, (pub(skC),(SPc_692946,exp(g,Nc_692947)),sign(h((SPc_692946,exp(g,Nc_692947))),skC))) at {20} in copy a_692941

in(c, (B,A,A)) at {8} in copy a_692945

out(c, GetEndpointRequest) at {13} in copy a_692945

in(c, (a_692943,Sign,a_692944,pub(skA))) at {14} in copy a_692945

new SPc creating SPc_693323 at {15} in copy a_692945

new Nc creating Nc_693324 at {16} in copy a_692945

event(beginCli(B,A,exp(g,Nc_693324))) at {19} in copy a_692945

out(c, (pub(skB),(SPc_693323,exp(g,Nc_693324)),sign(h((SPc_693323,exp(g,Nc_693324))),skB))) at {20} in copy a_692945

in(c, (C,B,A)) at {36} in copy a_692942

in(c, (pub(skC),(SPc_692946,exp(g,Nc_692947)),sign(h((SPc_692946,exp(g,Nc_692947))),skC))) at {41} in copy a_692942

new Ns creating Ns_692948 at {44} in copy a_692942

event(beginSrv(A,C,exp(g,Ns_692948))) at {47} in copy a_692942

out(c, (exp(g,Ns_692948),sign(h(exp(g,Ns_692948)),skA))) at {48} in copy a_692942

event(endSrv(C,A,exp(g,Nc_692947))) at {50} in copy a_692942

in(c, (exp(g,Ns_692948),sign(h(exp(g,Ns_692948)),skA))) at {21} in copy a_692945

event(endCli(A,B,exp(g,Ns_692948))) at {24} in copy a_692945

The event endCli(A,B,exp(g,Ns_692948)) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_693477,Y_693478,N_693479)) ==> event(beginCli(X_693477,Y_693478,N_693479))
Completing...
200 rules inserted. The rule base contains 78 rules. 349 rules in the queue.
400 rules inserted. The rule base contains 183 rules. 349 rules in the queue.
600 rules inserted. The rule base contains 183 rules. 347 rules in the queue.
800 rules inserted. The rule base contains 168 rules. 346 rules in the queue.
1000 rules inserted. The rule base contains 171 rules. 321 rules in the queue.
1200 rules inserted. The rule base contains 183 rules. 421 rules in the queue.
1400 rules inserted. The rule base contains 311 rules. 330 rules in the queue.
1600 rules inserted. The rule base contains 369 rules. 827 rules in the queue.
1800 rules inserted. The rule base contains 415 rules. 1061 rules in the queue.
2000 rules inserted. The rule base contains 433 rules. 1155 rules in the queue.
2200 rules inserted. The rule base contains 445 rules. 1199 rules in the queue.
2400 rules inserted. The rule base contains 457 rules. 1243 rules in the queue.
2600 rules inserted. The rule base contains 475 rules. 1337 rules in the queue.
2800 rules inserted. The rule base contains 492 rules. 1326 rules in the queue.
3000 rules inserted. The rule base contains 493 rules. 1325 rules in the queue.
3200 rules inserted. The rule base contains 496 rules. 1322 rules in the queue.
3400 rules inserted. The rule base contains 498 rules. 1320 rules in the queue.
3600 rules inserted. The rule base contains 500 rules. 1318 rules in the queue.
3800 rules inserted. The rule base contains 502 rules. 1316 rules in the queue.
4000 rules inserted. The rule base contains 504 rules. 1314 rules in the queue.
4200 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
4400 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
4600 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
4800 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
5000 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
5200 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
5400 rules inserted. The rule base contains 522 rules. 1302 rules in the queue.
5600 rules inserted. The rule base contains 533 rules. 1293 rules in the queue.
5800 rules inserted. The rule base contains 538 rules. 1290 rules in the queue.
6000 rules inserted. The rule base contains 538 rules. 1290 rules in the queue.
6200 rules inserted. The rule base contains 543 rules. 1287 rules in the queue.
6400 rules inserted. The rule base contains 548 rules. 1284 rules in the queue.
6600 rules inserted. The rule base contains 553 rules. 1281 rules in the queue.
6800 rules inserted. The rule base contains 588 rules. 1260 rules in the queue.
7000 rules inserted. The rule base contains 608 rules. 1248 rules in the queue.
7200 rules inserted. The rule base contains 658 rules. 1218 rules in the queue.
7400 rules inserted. The rule base contains 695 rules. 1196 rules in the queue.
7600 rules inserted. The rule base contains 743 rules. 1167 rules in the queue.
7800 rules inserted. The rule base contains 763 rules. 1155 rules in the queue.
8000 rules inserted. The rule base contains 829 rules. 1115 rules in the queue.
8200 rules inserted. The rule base contains 961 rules. 1034 rules in the queue.
8400 rules inserted. The rule base contains 1097 rules. 949 rules in the queue.
8600 rules inserted. The rule base contains 1213 rules. 877 rules in the queue.
8800 rules inserted. The rule base contains 1347 rules. 793 rules in the queue.
9000 rules inserted. The rule base contains 1461 rules. 723 rules in the queue.
9200 rules inserted. The rule base contains 1641 rules. 597 rules in the queue.
9400 rules inserted. The rule base contains 1823 rules. 467 rules in the queue.
9600 rules inserted. The rule base contains 2009 rules. 326 rules in the queue.
9800 rules inserted. The rule base contains 2197 rules. 182 rules in the queue.
10000 rules inserted. The rule base contains 2397 rules. 3 rules in the queue.
Starting query event(endSrv(X_693477,Y_693478,N_693479)) ==> event(beginCli(X_693477,Y_693478,N_693479))
goal reachable: Sess_997598 <> C[] && Sess_997598 <> B[] && Sess_997598 <> A[] && begin(beginCli(C[],Sess_997598,exp(g,Nc[UP = UP_997599,SPs = SPs_997600,Sess = Sess_997598,Disco = B[],Cli = C[],!1 = @sid_997601]))) && attacker(SPs_997600) && attacker(UP_997599) && attacker(Sess_997598) -> end(endSrv(C[],A[],exp(g,Nc[UP = UP_997599,SPs = SPs_997600,Sess = Sess_997598,Disco = B[],Cli = C[],!1 = @sid_997601])))
Abbreviations:
Nc_1000547 = Nc[UP = UP_1000527,SPs = SPs_1000528,Sess = Sess_1000526,Disco = B[],Cli = C[],!1 = @sid_1000529]
SPc_1000548 = SPc[UP = UP_1000527,SPs = SPs_1000528,Sess = Sess_1000526,Disco = B[],Cli = C[],!1 = @sid_1000529]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows C[].
attacker(C[]).

3. By 2, the attacker may know C[].
By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 3-tuple the attacker may obtain (C[],A[],A[]).
attacker((C[],A[],A[])).

4. We assume as hypothesis that
attacker(Sess_1000526).

5. The attacker initially knows B[].
attacker(B[]).

6. By 2, the attacker may know C[].
By 5, the attacker may know B[].
By 4, the attacker may know Sess_1000526.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_1000526).
attacker((C[],B[],Sess_1000526)).

7. By 4, the attacker may know Sess_1000526.
Using the function sk the attacker may obtain sk(Sess_1000526).
attacker(sk(Sess_1000526)).

8. By 7, the attacker may know sk(Sess_1000526).
Using the function pub the attacker may obtain pub(sk(Sess_1000526)).
attacker(pub(sk(Sess_1000526))).

9. We assume as hypothesis that
attacker(UP_1000527).

10. Using the function Sign the attacker may obtain Sign.
attacker(Sign).

11. We assume as hypothesis that
attacker(SPs_1000528).

12. By 11, the attacker may know SPs_1000528.
By 10, the attacker may know Sign.
By 9, the attacker may know UP_1000527.
By 8, the attacker may know pub(sk(Sess_1000526)).
Using the function 4-tuple the attacker may obtain (SPs_1000528,Sign,UP_1000527,pub(sk(Sess_1000526))).
attacker((SPs_1000528,Sign,UP_1000527,pub(sk(Sess_1000526)))).

13. The message (C[],B[],Sess_1000526) that the attacker may have by 6 may be received at input {8}.
The message (SPs_1000528,Sign,UP_1000527,pub(sk(Sess_1000526))) that the attacker may have by 12 may be received at input {14}.
The event beginCli(C[],Sess_1000526,exp(g,Nc_1000547)) may be executed at {19}.
We have Sess_1000526 <> C[] & Sess_1000526 <> B[] & Sess_1000526 <> A[].
So the message (pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[]))).

14. By 13, the attacker may know (pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[]).
attacker(sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])).

15. By 13, the attacker may know (pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain (SPc_1000548,exp(g,Nc_1000547)).
attacker((SPc_1000548,exp(g,Nc_1000547))).

16. By 15, the attacker may know (SPc_1000548,exp(g,Nc_1000547)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_1000547).
attacker(exp(g,Nc_1000547)).

17. By 15, the attacker may know (SPc_1000548,exp(g,Nc_1000547)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_1000548.
attacker(SPc_1000548).

18. By 17, the attacker may know SPc_1000548.
By 16, the attacker may know exp(g,Nc_1000547).
Using the function 2-tuple the attacker may obtain (SPc_1000548,exp(g,Nc_1000547)).
attacker((SPc_1000548,exp(g,Nc_1000547))).

19. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

20. By 19, the attacker may know pub(skC[]).
By 18, the attacker may know (SPc_1000548,exp(g,Nc_1000547)).
By 14, the attacker may know sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])).
attacker((pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[]))).

21. The message (C[],A[],A[]) that the attacker may have by 3 may be received at input {36}.
The message (pub(skC[]),(SPc_1000548,exp(g,Nc_1000547)),sign(h((SPc_1000548,exp(g,Nc_1000547))),skC[])) that the attacker may have by 20 may be received at input {41}.
So event endSrv(C[],A[],exp(g,Nc_1000547)) may be executed at {50}.
end(endSrv(C[],A[],exp(g,Nc_1000547))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_1000551)) at {8} in copy a_1000552

out(c, GetEndpointRequest) at {13} in copy a_1000552

in(c, (a_1000550,Sign,a_1000549,pub(sk(a_1000551)))) at {14} in copy a_1000552

new SPc creating SPc_1000555 at {15} in copy a_1000552

new Nc creating Nc_1000554 at {16} in copy a_1000552

event(beginCli(C,a_1000551,exp(g,Nc_1000554))) at {19} in copy a_1000552

out(c, (pub(skC),(SPc_1000555,exp(g,Nc_1000554)),sign(h((SPc_1000555,exp(g,Nc_1000554))),skC))) at {20} in copy a_1000552

in(c, (C,A,A)) at {36} in copy a_1000553

in(c, (pub(skC),(SPc_1000555,exp(g,Nc_1000554)),sign(h((SPc_1000555,exp(g,Nc_1000554))),skC))) at {41} in copy a_1000553

new Ns creating Ns_1000924 at {44} in copy a_1000553

event(beginSrv(A,C,exp(g,Ns_1000924))) at {47} in copy a_1000553

out(c, (exp(g,Ns_1000924),sign(h(exp(g,Ns_1000924)),skA))) at {48} in copy a_1000553

event(endSrv(C,A,exp(g,Nc_1000554))) at {50} in copy a_1000553

The event endSrv(C,A,exp(g,Nc_1000554)) is executed.
A trace has been found.
RESULT event(endSrv(X_693477,Y_693478,N_693479)) ==> event(beginCli(X_693477,Y_693478,N_693479)) is false.
