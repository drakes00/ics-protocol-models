Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (SPs: bitstring,=SignAndEncrypt,UP: bitstring,=pkSess));
    {15}new SPc: bitstring;
    {16}new Nc: bitstring;
    {17}let gNc: bitstring = exp(g,Nc) in
    {18}let m1: bitstring = (SPc,gNc) in
    {19}event beginCli(Cli,Sess,gNc);
    {20}out(c, (pkCli,enc(m1,pkSess),sign(h(m1),skCli)));
    {21}in(c, (ePartS: bitstring,sigPartS: bitstring));
    {22}let PartS: bitstring = dec(ePartS,skCli) in
    {23}if (verify(h(PartS),sigPartS,pkSess) <> true) then
        0
    else
        {24}if ((Sess = A) || ((Sess = B) || (Sess = C))) then
        {25}event endCli(Sess,Cli,PartS)
) | (
    {26}!
    {27}in(c, (Cli_84: host,Disco_85: host,Sess_86: host));
    {28}let skDisco: bitstring = (if (Disco_85 = A) then skA else (if (Disco_85 = B) then skB else (if (Disco_85 = C) then skC else fail-any))) in
    {29}let pkDisco_87: bitstring = pub(skDisco) in
    {30}let pkCli_88: bitstring = (if (Cli_84 = A) then pub(skA) else (if (Cli_84 = B) then pub(skB) else (if (Cli_84 = C) then pub(skC) else pub(sk(Cli_84))))) in
    {31}let pkSess_89: bitstring = (if (Sess_86 = A) then pub(skA) else (if (Sess_86 = B) then pub(skB) else (if (Sess_86 = C) then pub(skC) else pub(sk(Sess_86))))) in
    {32}in(c, =GetEndpointRequest);
    {33}new SPs_90: bitstring;
    {34}new UP_91: bitstring;
    {35}out(c, (SPs_90,Sign,UP_91,pkSess_89))
) | (
    {36}!
    {37}in(c, (Cli_92: host,Disco_93: host,Sess_94: host));
    {38}let skSess: bitstring = (if (Sess_94 = A) then skA else (if (Sess_94 = B) then skB else (if (Sess_94 = C) then skC else fail-any))) in
    {39}let pkSess_95: bitstring = pub(skSess) in
    {40}let pkCli_96: bitstring = (if (Cli_92 = A) then pub(skA) else (if (Cli_92 = B) then pub(skB) else (if (Cli_92 = C) then pub(skC) else pub(sk(Cli_92))))) in
    {41}let pkDisco_97: bitstring = (if (Disco_93 = A) then pub(skA) else (if (Disco_93 = B) then pub(skB) else (if (Disco_93 = C) then pub(skC) else pub(sk(Disco_93))))) in
    {42}in(c, (=pkCli_96,m1_98: bitstring,sigM1: bitstring));
    {43}if (verify(h(m1_98),sigM1,pkCli_96) <> true) then
        0
    else
        {44}let (SPc_99: bitstring,PartC: bitstring) = m1_98 in
        {45}new Ns: bitstring;
        {46}let gNs: bitstring = exp(g,Ns) in
        {47}let m2: bitstring = gNs in
        {48}event beginSrv(Sess_94,Cli_92,gNs);
        {49}out(c, (m2,sign(h(m2),skSess)));
        {50}if ((Cli_92 = A) || ((Cli_92 = B) || (Cli_92 = C))) then
        {51}event endSrv(Cli_92,Sess_94,PartC)
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 75 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 177 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 180 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 168 rules. 285 rules in the queue.
1000 rules inserted. The rule base contains 186 rules. 363 rules in the queue.
1200 rules inserted. The rule base contains 303 rules. 326 rules in the queue.
1400 rules inserted. The rule base contains 459 rules. 864 rules in the queue.
1600 rules inserted. The rule base contains 618 rules. 1140 rules in the queue.
1800 rules inserted. The rule base contains 806 rules. 1232 rules in the queue.
2000 rules inserted. The rule base contains 995 rules. 1256 rules in the queue.
2200 rules inserted. The rule base contains 1184 rules. 1274 rules in the queue.
2400 rules inserted. The rule base contains 1371 rules. 1320 rules in the queue.
2600 rules inserted. The rule base contains 1560 rules. 1307 rules in the queue.
2800 rules inserted. The rule base contains 1686 rules. 1231 rules in the queue.
3000 rules inserted. The rule base contains 1877 rules. 1127 rules in the queue.
3200 rules inserted. The rule base contains 2015 rules. 1046 rules in the queue.
3400 rules inserted. The rule base contains 2151 rules. 953 rules in the queue.
3600 rules inserted. The rule base contains 2288 rules. 878 rules in the queue.
3800 rules inserted. The rule base contains 2479 rules. 774 rules in the queue.
4000 rules inserted. The rule base contains 2545 rules. 718 rules in the queue.
4200 rules inserted. The rule base contains 2568 rules. 661 rules in the queue.
4400 rules inserted. The rule base contains 2596 rules. 601 rules in the queue.
4600 rules inserted. The rule base contains 2617 rules. 544 rules in the queue.
4800 rules inserted. The rule base contains 2649 rules. 520 rules in the queue.
5000 rules inserted. The rule base contains 2684 rules. 465 rules in the queue.
5200 rules inserted. The rule base contains 2712 rules. 402 rules in the queue.
5400 rules inserted. The rule base contains 2712 rules. 393 rules in the queue.
5600 rules inserted. The rule base contains 2721 rules. 384 rules in the queue.
5800 rules inserted. The rule base contains 2738 rules. 383 rules in the queue.
6000 rules inserted. The rule base contains 2763 rules. 390 rules in the queue.
6200 rules inserted. The rule base contains 2834 rules. 427 rules in the queue.
6400 rules inserted. The rule base contains 2916 rules. 477 rules in the queue.
6600 rules inserted. The rule base contains 3000 rules. 505 rules in the queue.
6800 rules inserted. The rule base contains 3089 rules. 536 rules in the queue.
7000 rules inserted. The rule base contains 3139 rules. 506 rules in the queue.
7200 rules inserted. The rule base contains 3178 rules. 487 rules in the queue.
7400 rules inserted. The rule base contains 3217 rules. 464 rules in the queue.
7600 rules inserted. The rule base contains 3237 rules. 444 rules in the queue.
7800 rules inserted. The rule base contains 3249 rules. 432 rules in the queue.
8000 rules inserted. The rule base contains 3253 rules. 428 rules in the queue.
8200 rules inserted. The rule base contains 3257 rules. 424 rules in the queue.
8400 rules inserted. The rule base contains 3273 rules. 408 rules in the queue.
8600 rules inserted. The rule base contains 3301 rules. 380 rules in the queue.
8800 rules inserted. The rule base contains 3341 rules. 340 rules in the queue.
9000 rules inserted. The rule base contains 3387 rules. 294 rules in the queue.
9200 rules inserted. The rule base contains 3459 rules. 222 rules in the queue.
9400 rules inserted. The rule base contains 3577 rules. 104 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: Sess_202493 <> C[] && Sess_202493 <> B[] && Sess_202493 <> A[] && begin(beginSrv(B[],C[],exp(g,Ns[sigM1 = sign(h((SPc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494],exp(g,Nc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494]))),skC[]),m1_98 = (SPc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494],exp(g,Nc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494])),Sess_94 = B[],Disco_93 = A[],Cli_92 = C[],!1 = @sid_202495]))) && attacker(SPs_202492) && attacker(UP_202491) && attacker(Sess_202493) -> end(endCli(B[],A[],exp(g,Ns[sigM1 = sign(h((SPc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494],exp(g,Nc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494]))),skC[]),m1_98 = (SPc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494],exp(g,Nc[UP = UP_202491,SPs = SPs_202492,Sess = Sess_202493,Disco = B[],Cli = C[],!1 = @sid_202494])),Sess_94 = B[],Disco_93 = A[],Cli_92 = C[],!1 = @sid_202495])))
Abbreviations:
SPc_218269 = SPc[UP = UP_218232,SPs = SPs_218231,Sess = Sess_218233,Disco = B[],Cli = C[],!1 = @sid_218234]
Nc_218270 = Nc[UP = UP_218232,SPs = SPs_218231,Sess = Sess_218233,Disco = B[],Cli = C[],!1 = @sid_218234]
Ns_218271 = Ns[sigM1 = sign(h((SPc_218269,exp(g,Nc_218270))),skC[]),m1_98 = (SPc_218269,exp(g,Nc_218270)),Sess_94 = B[],Disco_93 = A[],Cli_92 = C[],!1 = @sid_218248]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 3-tuple the attacker may obtain (A[],A[],B[]).
attacker((A[],A[],B[])).

4. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

5. The attacker has some term UP_218264.
attacker(UP_218264).

6. Using the function SignAndEncrypt the attacker may obtain SignAndEncrypt.
attacker(SignAndEncrypt).

7. The attacker has some term SPs_218263.
attacker(SPs_218263).

8. By 7, the attacker may know SPs_218263.
By 6, the attacker may know SignAndEncrypt.
By 5, the attacker may know UP_218264.
By 4, the attacker may know pub(skB[]).
Using the function 4-tuple the attacker may obtain (SPs_218263,SignAndEncrypt,UP_218264,pub(skB[])).
attacker((SPs_218263,SignAndEncrypt,UP_218264,pub(skB[]))).

9. The attacker initially knows C[].
attacker(C[]).

10. By 9, the attacker may know C[].
By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 3-tuple the attacker may obtain (C[],A[],B[]).
attacker((C[],A[],B[])).

11. We assume as hypothesis that
attacker(Sess_218233).

12. By 9, the attacker may know C[].
By 1, the attacker may know B[].
By 11, the attacker may know Sess_218233.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_218233).
attacker((C[],B[],Sess_218233)).

13. By 11, the attacker may know Sess_218233.
Using the function sk the attacker may obtain sk(Sess_218233).
attacker(sk(Sess_218233)).

14. By 13, the attacker may know sk(Sess_218233).
Using the function pub the attacker may obtain pub(sk(Sess_218233)).
attacker(pub(sk(Sess_218233))).

15. We assume as hypothesis that
attacker(UP_218232).

16. We assume as hypothesis that
attacker(SPs_218231).

17. By 16, the attacker may know SPs_218231.
By 6, the attacker may know SignAndEncrypt.
By 15, the attacker may know UP_218232.
By 14, the attacker may know pub(sk(Sess_218233)).
Using the function 4-tuple the attacker may obtain (SPs_218231,SignAndEncrypt,UP_218232,pub(sk(Sess_218233))).
attacker((SPs_218231,SignAndEncrypt,UP_218232,pub(sk(Sess_218233)))).

18. The message (C[],B[],Sess_218233) that the attacker may have by 12 may be received at input {8}.
The message (SPs_218231,SignAndEncrypt,UP_218232,pub(sk(Sess_218233))) that the attacker may have by 17 may be received at input {14}.
We have Sess_218233 <> C[] & Sess_218233 <> B[] & Sess_218233 <> A[].
So the message (pub(skC[]),enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))),sign(h((SPc_218269,exp(g,Nc_218270))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))),sign(h((SPc_218269,exp(g,Nc_218270))),skC[]))).

19. By 18, the attacker may know (pub(skC[]),enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))),sign(h((SPc_218269,exp(g,Nc_218270))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_218269,exp(g,Nc_218270))),skC[]).
attacker(sign(h((SPc_218269,exp(g,Nc_218270))),skC[])).

20. By 18, the attacker may know (pub(skC[]),enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))),sign(h((SPc_218269,exp(g,Nc_218270))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))).
attacker(enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233)))).

21. By 20, the attacker may know enc((SPc_218269,exp(g,Nc_218270)),pub(sk(Sess_218233))).
By 13, the attacker may know sk(Sess_218233).
Using the function dec the attacker may obtain (SPc_218269,exp(g,Nc_218270)).
attacker((SPc_218269,exp(g,Nc_218270))).

22. By 21, the attacker may know (SPc_218269,exp(g,Nc_218270)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_218270).
attacker(exp(g,Nc_218270)).

23. By 21, the attacker may know (SPc_218269,exp(g,Nc_218270)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_218269.
attacker(SPc_218269).

24. By 23, the attacker may know SPc_218269.
By 22, the attacker may know exp(g,Nc_218270).
Using the function 2-tuple the attacker may obtain (SPc_218269,exp(g,Nc_218270)).
attacker((SPc_218269,exp(g,Nc_218270))).

25. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

26. By 25, the attacker may know pub(skC[]).
By 24, the attacker may know (SPc_218269,exp(g,Nc_218270)).
By 19, the attacker may know sign(h((SPc_218269,exp(g,Nc_218270))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),(SPc_218269,exp(g,Nc_218270)),sign(h((SPc_218269,exp(g,Nc_218270))),skC[])).
attacker((pub(skC[]),(SPc_218269,exp(g,Nc_218270)),sign(h((SPc_218269,exp(g,Nc_218270))),skC[]))).

27. The message (C[],A[],B[]) that the attacker may have by 10 may be received at input {37}.
The message (pub(skC[]),(SPc_218269,exp(g,Nc_218270)),sign(h((SPc_218269,exp(g,Nc_218270))),skC[])) that the attacker may have by 26 may be received at input {42}.
The event beginSrv(B[],C[],exp(g,Ns_218271)) may be executed at {48}.
So the message (exp(g,Ns_218271),sign(h(exp(g,Ns_218271)),skB[])) may be sent to the attacker at output {49}.
attacker((exp(g,Ns_218271),sign(h(exp(g,Ns_218271)),skB[]))).

28. By 27, the attacker may know (exp(g,Ns_218271),sign(h(exp(g,Ns_218271)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(exp(g,Ns_218271)),skB[]).
attacker(sign(h(exp(g,Ns_218271)),skB[])).

29. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

30. By 27, the attacker may know (exp(g,Ns_218271),sign(h(exp(g,Ns_218271)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain exp(g,Ns_218271).
attacker(exp(g,Ns_218271)).

31. By 30, the attacker may know exp(g,Ns_218271).
By 29, the attacker may know pub(skA[]).
Using the function enc the attacker may obtain enc(exp(g,Ns_218271),pub(skA[])).
attacker(enc(exp(g,Ns_218271),pub(skA[]))).

32. By 31, the attacker may know enc(exp(g,Ns_218271),pub(skA[])).
By 28, the attacker may know sign(h(exp(g,Ns_218271)),skB[]).
Using the function 2-tuple the attacker may obtain (enc(exp(g,Ns_218271),pub(skA[])),sign(h(exp(g,Ns_218271)),skB[])).
attacker((enc(exp(g,Ns_218271),pub(skA[])),sign(h(exp(g,Ns_218271)),skB[]))).

33. The message (A[],A[],B[]) that the attacker may have by 3 may be received at input {8}.
The message (SPs_218263,SignAndEncrypt,UP_218264,pub(skB[])) that the attacker may have by 8 may be received at input {14}.
The message (enc(exp(g,Ns_218271),pub(skA[])),sign(h(exp(g,Ns_218271)),skB[])) that the attacker may have by 32 may be received at input {21}.
So event endCli(B[],A[],exp(g,Ns_218271)) may be executed at {25}.
end(endCli(B[],A[],exp(g,Ns_218271))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_218273)) at {8} in copy a_218274

out(c, GetEndpointRequest) at {13} in copy a_218274

in(c, (a_218272,SignAndEncrypt,a,pub(sk(a_218273)))) at {14} in copy a_218274

new SPc creating SPc_218279 at {15} in copy a_218274

new Nc creating Nc_218280 at {16} in copy a_218274

event(beginCli(C,a_218273,exp(g,Nc_218280))) at {19} in copy a_218274

out(c, (pub(skC),enc((SPc_218279,exp(g,Nc_218280)),pub(sk(a_218273))),sign(h((SPc_218279,exp(g,Nc_218280))),skC))) at {20} in copy a_218274

in(c, (A,A,B)) at {8} in copy a_218278

out(c, GetEndpointRequest) at {13} in copy a_218278

in(c, (a_218276,SignAndEncrypt,a_218277,pub(skB))) at {14} in copy a_218278

new SPc creating SPc_218675 at {15} in copy a_218278

new Nc creating Nc_218676 at {16} in copy a_218278

event(beginCli(A,B,exp(g,Nc_218676))) at {19} in copy a_218278

out(c, (pub(skA),enc((SPc_218675,exp(g,Nc_218676)),pub(skB)),sign(h((SPc_218675,exp(g,Nc_218676))),skA))) at {20} in copy a_218278

in(c, (C,A,B)) at {37} in copy a_218275

in(c, (pub(skC),(SPc_218279,exp(g,Nc_218280)),sign(h((SPc_218279,exp(g,Nc_218280))),skC))) at {42} in copy a_218275

new Ns creating Ns_218281 at {45} in copy a_218275

event(beginSrv(B,C,exp(g,Ns_218281))) at {48} in copy a_218275

out(c, (exp(g,Ns_218281),sign(h(exp(g,Ns_218281)),skB))) at {49} in copy a_218275

event(endSrv(C,B,exp(g,Nc_218280))) at {51} in copy a_218275

in(c, (enc(exp(g,Ns_218281),pub(skA)),sign(h(exp(g,Ns_218281)),skB))) at {21} in copy a_218278

event(endCli(B,A,exp(g,Ns_218281))) at {25} in copy a_218278

The event endCli(B,A,exp(g,Ns_218281)) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_218834,Y_218835,N_218836)) ==> event(beginCli(X_218834,Y_218835,N_218836))
Completing...
200 rules inserted. The rule base contains 66 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 171 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 171 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 161 rules. 283 rules in the queue.
1000 rules inserted. The rule base contains 179 rules. 381 rules in the queue.
1200 rules inserted. The rule base contains 303 rules. 299 rules in the queue.
1400 rules inserted. The rule base contains 464 rules. 934 rules in the queue.
1600 rules inserted. The rule base contains 639 rules. 1049 rules in the queue.
1800 rules inserted. The rule base contains 837 rules. 1121 rules in the queue.
2000 rules inserted. The rule base contains 1035 rules. 1139 rules in the queue.
2200 rules inserted. The rule base contains 1233 rules. 1156 rules in the queue.
2400 rules inserted. The rule base contains 1431 rules. 1245 rules in the queue.
2600 rules inserted. The rule base contains 1615 rules. 1175 rules in the queue.
2800 rules inserted. The rule base contains 1759 rules. 1059 rules in the queue.
3000 rules inserted. The rule base contains 1903 rules. 970 rules in the queue.
3200 rules inserted. The rule base contains 2047 rules. 881 rules in the queue.
3400 rules inserted. The rule base contains 2191 rules. 771 rules in the queue.
3600 rules inserted. The rule base contains 2387 rules. 677 rules in the queue.
3800 rules inserted. The rule base contains 2454 rules. 591 rules in the queue.
4000 rules inserted. The rule base contains 2490 rules. 503 rules in the queue.
4200 rules inserted. The rule base contains 2501 rules. 440 rules in the queue.
4400 rules inserted. The rule base contains 2478 rules. 411 rules in the queue.
4600 rules inserted. The rule base contains 2496 rules. 366 rules in the queue.
4800 rules inserted. The rule base contains 2484 rules. 324 rules in the queue.
5000 rules inserted. The rule base contains 2484 rules. 324 rules in the queue.
5200 rules inserted. The rule base contains 2494 rules. 318 rules in the queue.
5400 rules inserted. The rule base contains 2509 rules. 309 rules in the queue.
5600 rules inserted. The rule base contains 2594 rules. 258 rules in the queue.
5800 rules inserted. The rule base contains 2725 rules. 174 rules in the queue.
6000 rules inserted. The rule base contains 2909 rules. 39 rules in the queue.
Starting query event(endSrv(X_218834,Y_218835,N_218836)) ==> event(beginCli(X_218834,Y_218835,N_218836))
goal reachable: Sess_357823 <> C[] && Sess_357823 <> B[] && Sess_357823 <> A[] && begin(beginCli(C[],Sess_357823,exp(g,Nc[UP = UP_357824,SPs = SPs_357825,Sess = Sess_357823,Disco = B[],Cli = C[],!1 = @sid_357826]))) && attacker(SPs_357825) && attacker(UP_357824) && attacker(Sess_357823) -> end(endSrv(C[],B[],exp(g,Nc[UP = UP_357824,SPs = SPs_357825,Sess = Sess_357823,Disco = B[],Cli = C[],!1 = @sid_357826])))
Abbreviations:
Nc_358267 = Nc[UP = UP_358247,SPs = SPs_358248,Sess = Sess_358246,Disco = B[],Cli = C[],!1 = @sid_358249]
SPc_358268 = SPc[UP = UP_358247,SPs = SPs_358248,Sess = Sess_358246,Disco = B[],Cli = C[],!1 = @sid_358249]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows C[].
attacker(C[]).

3. By 2, the attacker may know C[].
By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 3-tuple the attacker may obtain (C[],B[],B[]).
attacker((C[],B[],B[])).

4. We assume as hypothesis that
attacker(Sess_358246).

5. By 2, the attacker may know C[].
By 1, the attacker may know B[].
By 4, the attacker may know Sess_358246.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_358246).
attacker((C[],B[],Sess_358246)).

6. By 4, the attacker may know Sess_358246.
Using the function sk the attacker may obtain sk(Sess_358246).
attacker(sk(Sess_358246)).

7. By 6, the attacker may know sk(Sess_358246).
Using the function pub the attacker may obtain pub(sk(Sess_358246)).
attacker(pub(sk(Sess_358246))).

8. We assume as hypothesis that
attacker(UP_358247).

9. Using the function SignAndEncrypt the attacker may obtain SignAndEncrypt.
attacker(SignAndEncrypt).

10. We assume as hypothesis that
attacker(SPs_358248).

11. By 10, the attacker may know SPs_358248.
By 9, the attacker may know SignAndEncrypt.
By 8, the attacker may know UP_358247.
By 7, the attacker may know pub(sk(Sess_358246)).
Using the function 4-tuple the attacker may obtain (SPs_358248,SignAndEncrypt,UP_358247,pub(sk(Sess_358246))).
attacker((SPs_358248,SignAndEncrypt,UP_358247,pub(sk(Sess_358246)))).

12. The message (C[],B[],Sess_358246) that the attacker may have by 5 may be received at input {8}.
The message (SPs_358248,SignAndEncrypt,UP_358247,pub(sk(Sess_358246))) that the attacker may have by 11 may be received at input {14}.
The event beginCli(C[],Sess_358246,exp(g,Nc_358267)) may be executed at {19}.
We have Sess_358246 <> C[] & Sess_358246 <> B[] & Sess_358246 <> A[].
So the message (pub(skC[]),enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))),sign(h((SPc_358268,exp(g,Nc_358267))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))),sign(h((SPc_358268,exp(g,Nc_358267))),skC[]))).

13. By 12, the attacker may know (pub(skC[]),enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))),sign(h((SPc_358268,exp(g,Nc_358267))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_358268,exp(g,Nc_358267))),skC[]).
attacker(sign(h((SPc_358268,exp(g,Nc_358267))),skC[])).

14. By 12, the attacker may know (pub(skC[]),enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))),sign(h((SPc_358268,exp(g,Nc_358267))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))).
attacker(enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246)))).

15. By 14, the attacker may know enc((SPc_358268,exp(g,Nc_358267)),pub(sk(Sess_358246))).
By 6, the attacker may know sk(Sess_358246).
Using the function dec the attacker may obtain (SPc_358268,exp(g,Nc_358267)).
attacker((SPc_358268,exp(g,Nc_358267))).

16. By 15, the attacker may know (SPc_358268,exp(g,Nc_358267)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_358267).
attacker(exp(g,Nc_358267)).

17. By 15, the attacker may know (SPc_358268,exp(g,Nc_358267)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_358268.
attacker(SPc_358268).

18. By 17, the attacker may know SPc_358268.
By 16, the attacker may know exp(g,Nc_358267).
Using the function 2-tuple the attacker may obtain (SPc_358268,exp(g,Nc_358267)).
attacker((SPc_358268,exp(g,Nc_358267))).

19. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

20. By 19, the attacker may know pub(skC[]).
By 18, the attacker may know (SPc_358268,exp(g,Nc_358267)).
By 13, the attacker may know sign(h((SPc_358268,exp(g,Nc_358267))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),(SPc_358268,exp(g,Nc_358267)),sign(h((SPc_358268,exp(g,Nc_358267))),skC[])).
attacker((pub(skC[]),(SPc_358268,exp(g,Nc_358267)),sign(h((SPc_358268,exp(g,Nc_358267))),skC[]))).

21. The message (C[],B[],B[]) that the attacker may have by 3 may be received at input {37}.
The message (pub(skC[]),(SPc_358268,exp(g,Nc_358267)),sign(h((SPc_358268,exp(g,Nc_358267))),skC[])) that the attacker may have by 20 may be received at input {42}.
So event endSrv(C[],B[],exp(g,Nc_358267)) may be executed at {51}.
end(endSrv(C[],B[],exp(g,Nc_358267))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_358271)) at {8} in copy a_358272

out(c, GetEndpointRequest) at {13} in copy a_358272

in(c, (a_358270,SignAndEncrypt,a_358269,pub(sk(a_358271)))) at {14} in copy a_358272

new SPc creating SPc_358275 at {15} in copy a_358272

new Nc creating Nc_358274 at {16} in copy a_358272

event(beginCli(C,a_358271,exp(g,Nc_358274))) at {19} in copy a_358272

out(c, (pub(skC),enc((SPc_358275,exp(g,Nc_358274)),pub(sk(a_358271))),sign(h((SPc_358275,exp(g,Nc_358274))),skC))) at {20} in copy a_358272

in(c, (C,B,B)) at {37} in copy a_358273

in(c, (pub(skC),(SPc_358275,exp(g,Nc_358274)),sign(h((SPc_358275,exp(g,Nc_358274))),skC))) at {42} in copy a_358273

new Ns creating Ns_358656 at {45} in copy a_358273

event(beginSrv(B,C,exp(g,Ns_358656))) at {48} in copy a_358273

out(c, (exp(g,Ns_358656),sign(h(exp(g,Ns_358656)),skB))) at {49} in copy a_358273

event(endSrv(C,B,exp(g,Nc_358274))) at {51} in copy a_358273

The event endSrv(C,B,exp(g,Nc_358274)) is executed.
A trace has been found.
RESULT event(endSrv(X_218834,Y_218835,N_218836)) ==> event(beginCli(X_218834,Y_218835,N_218836)) is false.
