Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (SPs: bitstring,=None,UP: bitstring,=pkSess));
    {15}new SPc: bitstring;
    {16}new Nc: bitstring;
    {17}let gNc: bitstring = exp(g,Nc) in
    {18}let m1: bitstring = (SPc,gNc) in
    {19}event beginCli(Cli,Sess,gNc);
    {20}out(c, (pkCli,m1));
    {21}in(c, PartS: bitstring);
    {22}if ((Sess = A) || ((Sess = B) || (Sess = C))) then
    {23}event endCli(Sess,Cli,PartS)
) | (
    {24}!
    {25}in(c, (Cli_84: host,Disco_85: host,Sess_86: host));
    {26}let skDisco: bitstring = (if (Disco_85 = A) then skA else (if (Disco_85 = B) then skB else (if (Disco_85 = C) then skC else fail-any))) in
    {27}let pkDisco_87: bitstring = pub(skDisco) in
    {28}let pkCli_88: bitstring = (if (Cli_84 = A) then pub(skA) else (if (Cli_84 = B) then pub(skB) else (if (Cli_84 = C) then pub(skC) else pub(sk(Cli_84))))) in
    {29}let pkSess_89: bitstring = (if (Sess_86 = A) then pub(skA) else (if (Sess_86 = B) then pub(skB) else (if (Sess_86 = C) then pub(skC) else pub(sk(Sess_86))))) in
    {30}in(c, =GetEndpointRequest);
    {31}new SPs_90: bitstring;
    {32}new UP_91: bitstring;
    {33}out(c, (SPs_90,SignAndEncrypt,UP_91,pkSess_89))
) | (
    {34}!
    {35}in(c, (Cli_92: host,Disco_93: host,Sess_94: host));
    {36}let skSess: bitstring = (if (Sess_94 = A) then skA else (if (Sess_94 = B) then skB else (if (Sess_94 = C) then skC else fail-any))) in
    {37}let pkSess_95: bitstring = pub(skSess) in
    {38}let pkCli_96: bitstring = (if (Cli_92 = A) then pub(skA) else (if (Cli_92 = B) then pub(skB) else (if (Cli_92 = C) then pub(skC) else pub(sk(Cli_92))))) in
    {39}let pkDisco_97: bitstring = (if (Disco_93 = A) then pub(skA) else (if (Disco_93 = B) then pub(skB) else (if (Disco_93 = C) then pub(skC) else pub(sk(Disco_93))))) in
    {40}in(c, (=pkCli_96,em1: bitstring,sigM1: bitstring));
    {41}let m1_98: bitstring = dec(em1,skSess) in
    {42}if (verify(h(m1_98),sigM1,pkCli_96) <> true) then
        0
    else
        {43}let (SPc_99: bitstring,PartC: bitstring) = m1_98 in
        {44}new Ns: bitstring;
        {45}let gNs: bitstring = exp(g,Ns) in
        {46}let m2: bitstring = gNs in
        {47}event beginSrv(Sess_94,Cli_92,gNs);
        {48}out(c, (enc(m2,pkCli_96),sign(h(m2),skSess)));
        {49}if ((Cli_92 = A) || ((Cli_92 = B) || (Cli_92 = C))) then
        {50}event endSrv(Cli_92,Sess_94,PartC)
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 66 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 162 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 217 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 246 rules. 285 rules in the queue.
1000 rules inserted. The rule base contains 266 rules. 268 rules in the queue.
1200 rules inserted. The rule base contains 333 rules. 204 rules in the queue.
1400 rules inserted. The rule base contains 433 rules. 134 rules in the queue.
1600 rules inserted. The rule base contains 540 rules. 19 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_49410) -> end(endCli(B[],C[],N_49410))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows C[].
attacker(C[]).

3. By 2, the attacker may know C[].
By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 3-tuple the attacker may obtain (C[],B[],B[]).
attacker((C[],B[],B[])).

4. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

5. The attacker has some term UP_49431.
attacker(UP_49431).

6. Using the function None the attacker may obtain None.
attacker(None).

7. The attacker has some term SPs_49430.
attacker(SPs_49430).

8. By 7, the attacker may know SPs_49430.
By 6, the attacker may know None.
By 5, the attacker may know UP_49431.
By 4, the attacker may know pub(skB[]).
Using the function 4-tuple the attacker may obtain (SPs_49430,None,UP_49431,pub(skB[])).
attacker((SPs_49430,None,UP_49431,pub(skB[]))).

9. We assume as hypothesis that
attacker(N_49435).

10. The message (C[],B[],B[]) that the attacker may have by 3 may be received at input {8}.
The message (SPs_49430,None,UP_49431,pub(skB[])) that the attacker may have by 8 may be received at input {14}.
The message N_49435 that the attacker may have by 9 may be received at input {21}.
So event endCli(B[],C[],N_49435) may be executed at {23}.
end(endCli(B[],C[],N_49435)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,B)) at {8} in copy a_49438

out(c, GetEndpointRequest) at {13} in copy a_49438

in(c, (a_49436,None,a_49437,pub(skB))) at {14} in copy a_49438

new SPc creating SPc_49659 at {15} in copy a_49438

new Nc creating Nc_49660 at {16} in copy a_49438

event(beginCli(C,B,exp(g,Nc_49660))) at {19} in copy a_49438

out(c, (pub(skC),(SPc_49659,exp(g,Nc_49660)))) at {20} in copy a_49438

in(c, a) at {21} in copy a_49438

event(endCli(B,C,a)) at {23} in copy a_49438

The event endCli(B,C,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_49676,Y_49677,N_49678)) ==> event(beginCli(X_49676,Y_49677,N_49678))
Completing...
200 rules inserted. The rule base contains 66 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 171 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 235 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 266 rules. 283 rules in the queue.
1000 rules inserted. The rule base contains 284 rules. 269 rules in the queue.
1200 rules inserted. The rule base contains 348 rules. 207 rules in the queue.
1400 rules inserted. The rule base contains 444 rules. 141 rules in the queue.
1600 rules inserted. The rule base contains 555 rules. 21 rules in the queue.
Starting query event(endSrv(X_49676,Y_49677,N_49678)) ==> event(beginCli(X_49676,Y_49677,N_49678))
RESULT event(endSrv(X_49676,Y_49677,N_49678)) ==> event(beginCli(X_49676,Y_49677,N_49678)) is true.
