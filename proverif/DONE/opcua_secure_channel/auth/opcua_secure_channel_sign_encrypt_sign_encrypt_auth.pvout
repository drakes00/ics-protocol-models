Linear part:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Completing equations...
Completed equations:
exp(exp(g,x_32),y) = exp(exp(g,y),x_32)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}let pkC: bitstring = pub(skC) in
{6}out(c, pkC);
(
    {7}!
    {8}in(c, (Cli: host,Disco: host,Sess: host));
    {9}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else (if (Cli = C) then skC else fail-any))) in
    {10}let pkCli: bitstring = pub(skCli) in
    {11}let pkDisco: bitstring = (if (Disco = A) then pub(skA) else (if (Disco = B) then pub(skB) else (if (Disco = C) then pub(skC) else pub(sk(Disco))))) in
    {12}let pkSess: bitstring = (if (Sess = A) then pub(skA) else (if (Sess = B) then pub(skB) else (if (Sess = C) then pub(skC) else pub(sk(Sess))))) in
    {13}out(c, GetEndpointRequest);
    {14}in(c, (SPs: bitstring,=SignAndEncrypt,UP: bitstring,=pkSess));
    {15}new SPc: bitstring;
    {16}new Nc: bitstring;
    {17}let gNc: bitstring = exp(g,Nc) in
    {18}let m1: bitstring = (SPc,gNc) in
    {19}event beginCli(Cli,Sess,gNc);
    {20}out(c, (pkCli,enc(m1,pkSess),sign(h(m1),skCli)));
    {21}in(c, (ePartS: bitstring,sigPartS: bitstring));
    {22}let PartS: bitstring = dec(ePartS,skCli) in
    {23}if (verify(h(PartS),sigPartS,pkSess) <> true) then
        0
    else
        {24}if ((Sess = A) || ((Sess = B) || (Sess = C))) then
        {25}event endCli(Sess,Cli,PartS)
) | (
    {26}!
    {27}in(c, (Cli_84: host,Disco_85: host,Sess_86: host));
    {28}let skDisco: bitstring = (if (Disco_85 = A) then skA else (if (Disco_85 = B) then skB else (if (Disco_85 = C) then skC else fail-any))) in
    {29}let pkDisco_87: bitstring = pub(skDisco) in
    {30}let pkCli_88: bitstring = (if (Cli_84 = A) then pub(skA) else (if (Cli_84 = B) then pub(skB) else (if (Cli_84 = C) then pub(skC) else pub(sk(Cli_84))))) in
    {31}let pkSess_89: bitstring = (if (Sess_86 = A) then pub(skA) else (if (Sess_86 = B) then pub(skB) else (if (Sess_86 = C) then pub(skC) else pub(sk(Sess_86))))) in
    {32}in(c, =GetEndpointRequest);
    {33}new SPs_90: bitstring;
    {34}new UP_91: bitstring;
    {35}out(c, (SPs_90,SignAndEncrypt,UP_91,pkSess_89))
) | (
    {36}!
    {37}in(c, (Cli_92: host,Disco_93: host,Sess_94: host));
    {38}let skSess: bitstring = (if (Sess_94 = A) then skA else (if (Sess_94 = B) then skB else (if (Sess_94 = C) then skC else fail-any))) in
    {39}let pkSess_95: bitstring = pub(skSess) in
    {40}let pkCli_96: bitstring = (if (Cli_92 = A) then pub(skA) else (if (Cli_92 = B) then pub(skB) else (if (Cli_92 = C) then pub(skC) else pub(sk(Cli_92))))) in
    {41}let pkDisco_97: bitstring = (if (Disco_93 = A) then pub(skA) else (if (Disco_93 = B) then pub(skB) else (if (Disco_93 = C) then pub(skC) else pub(sk(Disco_93))))) in
    {42}in(c, (=pkCli_96,em1: bitstring,sigM1: bitstring));
    {43}let m1_98: bitstring = dec(em1,skSess) in
    {44}if (verify(h(m1_98),sigM1,pkCli_96) <> true) then
        0
    else
        {45}let (SPc_99: bitstring,PartC: bitstring) = m1_98 in
        {46}new Ns: bitstring;
        {47}let gNs: bitstring = exp(g,Ns) in
        {48}let m2: bitstring = gNs in
        {49}event beginSrv(Sess_94,Cli_92,gNs);
        {50}out(c, (enc(m2,pkCli_96),sign(h(m2),skSess)));
        {51}if ((Cli_92 = A) || ((Cli_92 = B) || (Cli_92 = C))) then
        {52}event endSrv(Cli_92,Sess_94,PartC)
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 75 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 177 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 235 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 264 rules. 285 rules in the queue.
1000 rules inserted. The rule base contains 282 rules. 459 rules in the queue.
1200 rules inserted. The rule base contains 348 rules. 585 rules in the queue.
1400 rules inserted. The rule base contains 484 rules. 1298 rules in the queue.
1600 rules inserted. The rule base contains 617 rules. 2003 rules in the queue.
1800 rules inserted. The rule base contains 725 rules. 2128 rules in the queue.
2000 rules inserted. The rule base contains 880 rules. 2064 rules in the queue.
2200 rules inserted. The rule base contains 1028 rules. 2124 rules in the queue.
2400 rules inserted. The rule base contains 1179 rules. 2145 rules in the queue.
2600 rules inserted. The rule base contains 1325 rules. 2114 rules in the queue.
2800 rules inserted. The rule base contains 1478 rules. 2135 rules in the queue.
3000 rules inserted. The rule base contains 1640 rules. 2202 rules in the queue.
3200 rules inserted. The rule base contains 1793 rules. 2138 rules in the queue.
3400 rules inserted. The rule base contains 1939 rules. 2254 rules in the queue.
3600 rules inserted. The rule base contains 2077 rules. 2220 rules in the queue.
3800 rules inserted. The rule base contains 2238 rules. 2158 rules in the queue.
4000 rules inserted. The rule base contains 2361 rules. 2044 rules in the queue.
4200 rules inserted. The rule base contains 2480 rules. 1925 rules in the queue.
4400 rules inserted. The rule base contains 2633 rules. 1851 rules in the queue.
4600 rules inserted. The rule base contains 2784 rules. 1735 rules in the queue.
4800 rules inserted. The rule base contains 2905 rules. 1655 rules in the queue.
5000 rules inserted. The rule base contains 3022 rules. 1570 rules in the queue.
5200 rules inserted. The rule base contains 3180 rules. 1441 rules in the queue.
5400 rules inserted. The rule base contains 3286 rules. 1360 rules in the queue.
5600 rules inserted. The rule base contains 3444 rules. 1274 rules in the queue.
5800 rules inserted. The rule base contains 3610 rules. 1141 rules in the queue.
6000 rules inserted. The rule base contains 3663 rules. 1062 rules in the queue.
6200 rules inserted. The rule base contains 3701 rules. 1024 rules in the queue.
6400 rules inserted. The rule base contains 3745 rules. 980 rules in the queue.
6600 rules inserted. The rule base contains 3811 rules. 912 rules in the queue.
6800 rules inserted. The rule base contains 3858 rules. 865 rules in the queue.
7000 rules inserted. The rule base contains 3858 rules. 839 rules in the queue.
7200 rules inserted. The rule base contains 3908 rules. 865 rules in the queue.
7400 rules inserted. The rule base contains 3949 rules. 860 rules in the queue.
7600 rules inserted. The rule base contains 4015 rules. 850 rules in the queue.
7800 rules inserted. The rule base contains 4040 rules. 861 rules in the queue.
8000 rules inserted. The rule base contains 4121 rules. 875 rules in the queue.
8200 rules inserted. The rule base contains 4201 rules. 945 rules in the queue.
8400 rules inserted. The rule base contains 4280 rules. 996 rules in the queue.
8600 rules inserted. The rule base contains 4359 rules. 1068 rules in the queue.
8800 rules inserted. The rule base contains 4441 rules. 1063 rules in the queue.
9000 rules inserted. The rule base contains 4545 rules. 1074 rules in the queue.
9200 rules inserted. The rule base contains 4664 rules. 1061 rules in the queue.
9400 rules inserted. The rule base contains 4773 rules. 1070 rules in the queue.
9600 rules inserted. The rule base contains 4889 rules. 1064 rules in the queue.
9800 rules inserted. The rule base contains 4966 rules. 1046 rules in the queue.
10000 rules inserted. The rule base contains 5089 rules. 1008 rules in the queue.
10200 rules inserted. The rule base contains 5201 rules. 962 rules in the queue.
10400 rules inserted. The rule base contains 5317 rules. 908 rules in the queue.
10600 rules inserted. The rule base contains 5433 rules. 878 rules in the queue.
10800 rules inserted. The rule base contains 5530 rules. 833 rules in the queue.
11000 rules inserted. The rule base contains 5641 rules. 816 rules in the queue.
11200 rules inserted. The rule base contains 5762 rules. 815 rules in the queue.
11400 rules inserted. The rule base contains 5872 rules. 798 rules in the queue.
11600 rules inserted. The rule base contains 5985 rules. 804 rules in the queue.
11800 rules inserted. The rule base contains 6095 rules. 794 rules in the queue.
12000 rules inserted. The rule base contains 6223 rules. 801 rules in the queue.
12200 rules inserted. The rule base contains 6351 rules. 806 rules in the queue.
12400 rules inserted. The rule base contains 6478 rules. 791 rules in the queue.
12600 rules inserted. The rule base contains 6591 rules. 733 rules in the queue.
12800 rules inserted. The rule base contains 6717 rules. 666 rules in the queue.
13000 rules inserted. The rule base contains 6847 rules. 606 rules in the queue.
13200 rules inserted. The rule base contains 6966 rules. 531 rules in the queue.
13400 rules inserted. The rule base contains 7085 rules. 424 rules in the queue.
13600 rules inserted. The rule base contains 7215 rules. 312 rules in the queue.
13800 rules inserted. The rule base contains 7328 rules. 205 rules in the queue.
14000 rules inserted. The rule base contains 7425 rules. 108 rules in the queue.
14200 rules inserted. The rule base contains 7483 rules. 50 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: Cli_273546 <> C[] && Cli_273546 <> B[] && Cli_273546 <> A[] && begin(beginSrv(C[],Cli_273546,exp(g,Ns[sigM1 = sign(h((SPc_273547,PartC_273548)),sk(Cli_273546)),em1 = enc((SPc_273547,PartC_273548),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_273546,!1 = @sid_273549]))) && attacker(SPc_273547) && attacker(PartC_273548) && attacker(Cli_273546) -> end(endCli(C[],B[],exp(g,Ns[sigM1 = sign(h((SPc_273547,PartC_273548)),sk(Cli_273546)),em1 = enc((SPc_273547,PartC_273548),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_273546,!1 = @sid_273549])))
Abbreviations:
Ns_290599 = Ns[sigM1 = sign(h((SPc_290576,PartC_290577)),sk(Cli_290575)),em1 = enc((SPc_290576,PartC_290577),pub(skC[])),Sess_94 = C[],Disco_93 = B[],Cli_92 = Cli_290575,!1 = @sid_290578]

1. The attacker initially knows C[].
attacker(C[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 2, the attacker may know B[].
By 1, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (B[],B[],C[]).
attacker((B[],B[],C[])).

4. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

5. The attacker has some term UP_290594.
attacker(UP_290594).

6. Using the function SignAndEncrypt the attacker may obtain SignAndEncrypt.
attacker(SignAndEncrypt).

7. The attacker has some term SPs_290593.
attacker(SPs_290593).

8. By 7, the attacker may know SPs_290593.
By 6, the attacker may know SignAndEncrypt.
By 5, the attacker may know UP_290594.
By 4, the attacker may know pub(skC[]).
Using the function 4-tuple the attacker may obtain (SPs_290593,SignAndEncrypt,UP_290594,pub(skC[])).
attacker((SPs_290593,SignAndEncrypt,UP_290594,pub(skC[]))).

9. We assume as hypothesis that
attacker(Cli_290575).

10. By 9, the attacker may know Cli_290575.
By 2, the attacker may know B[].
By 1, the attacker may know C[].
Using the function 3-tuple the attacker may obtain (Cli_290575,B[],C[]).
attacker((Cli_290575,B[],C[])).

11. By 9, the attacker may know Cli_290575.
Using the function sk the attacker may obtain sk(Cli_290575).
attacker(sk(Cli_290575)).

12. We assume as hypothesis that
attacker(PartC_290577).

13. We assume as hypothesis that
attacker(SPc_290576).

14. By 13, the attacker may know SPc_290576.
By 12, the attacker may know PartC_290577.
Using the function 2-tuple the attacker may obtain (SPc_290576,PartC_290577).
attacker((SPc_290576,PartC_290577)).

15. By 14, the attacker may know (SPc_290576,PartC_290577).
Using the function h the attacker may obtain h((SPc_290576,PartC_290577)).
attacker(h((SPc_290576,PartC_290577))).

16. By 15, the attacker may know h((SPc_290576,PartC_290577)).
By 11, the attacker may know sk(Cli_290575).
Using the function sign the attacker may obtain sign(h((SPc_290576,PartC_290577)),sk(Cli_290575)).
attacker(sign(h((SPc_290576,PartC_290577)),sk(Cli_290575))).

17. By 14, the attacker may know (SPc_290576,PartC_290577).
By 4, the attacker may know pub(skC[]).
Using the function enc the attacker may obtain enc((SPc_290576,PartC_290577),pub(skC[])).
attacker(enc((SPc_290576,PartC_290577),pub(skC[]))).

18. By 11, the attacker may know sk(Cli_290575).
Using the function pub the attacker may obtain pub(sk(Cli_290575)).
attacker(pub(sk(Cli_290575))).

19. By 18, the attacker may know pub(sk(Cli_290575)).
By 17, the attacker may know enc((SPc_290576,PartC_290577),pub(skC[])).
By 16, the attacker may know sign(h((SPc_290576,PartC_290577)),sk(Cli_290575)).
Using the function 3-tuple the attacker may obtain (pub(sk(Cli_290575)),enc((SPc_290576,PartC_290577),pub(skC[])),sign(h((SPc_290576,PartC_290577)),sk(Cli_290575))).
attacker((pub(sk(Cli_290575)),enc((SPc_290576,PartC_290577),pub(skC[])),sign(h((SPc_290576,PartC_290577)),sk(Cli_290575)))).

20. The message (Cli_290575,B[],C[]) that the attacker may have by 10 may be received at input {37}.
The message (pub(sk(Cli_290575)),enc((SPc_290576,PartC_290577),pub(skC[])),sign(h((SPc_290576,PartC_290577)),sk(Cli_290575))) that the attacker may have by 19 may be received at input {42}.
The event beginSrv(C[],Cli_290575,exp(g,Ns_290599)) may be executed at {49}.
We have Cli_290575 <> C[] & Cli_290575 <> B[] & Cli_290575 <> A[].
So the message (enc(exp(g,Ns_290599),pub(sk(Cli_290575))),sign(h(exp(g,Ns_290599)),skC[])) may be sent to the attacker at output {50}.
attacker((enc(exp(g,Ns_290599),pub(sk(Cli_290575))),sign(h(exp(g,Ns_290599)),skC[]))).

21. By 20, the attacker may know (enc(exp(g,Ns_290599),pub(sk(Cli_290575))),sign(h(exp(g,Ns_290599)),skC[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h(exp(g,Ns_290599)),skC[]).
attacker(sign(h(exp(g,Ns_290599)),skC[])).

22. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

23. By 20, the attacker may know (enc(exp(g,Ns_290599),pub(sk(Cli_290575))),sign(h(exp(g,Ns_290599)),skC[])).
Using the function 1-proj-2-tuple the attacker may obtain enc(exp(g,Ns_290599),pub(sk(Cli_290575))).
attacker(enc(exp(g,Ns_290599),pub(sk(Cli_290575)))).

24. By 23, the attacker may know enc(exp(g,Ns_290599),pub(sk(Cli_290575))).
By 11, the attacker may know sk(Cli_290575).
Using the function dec the attacker may obtain exp(g,Ns_290599).
attacker(exp(g,Ns_290599)).

25. By 24, the attacker may know exp(g,Ns_290599).
By 22, the attacker may know pub(skB[]).
Using the function enc the attacker may obtain enc(exp(g,Ns_290599),pub(skB[])).
attacker(enc(exp(g,Ns_290599),pub(skB[]))).

26. By 25, the attacker may know enc(exp(g,Ns_290599),pub(skB[])).
By 21, the attacker may know sign(h(exp(g,Ns_290599)),skC[]).
Using the function 2-tuple the attacker may obtain (enc(exp(g,Ns_290599),pub(skB[])),sign(h(exp(g,Ns_290599)),skC[])).
attacker((enc(exp(g,Ns_290599),pub(skB[])),sign(h(exp(g,Ns_290599)),skC[]))).

27. The message (B[],B[],C[]) that the attacker may have by 3 may be received at input {8}.
The message (SPs_290593,SignAndEncrypt,UP_290594,pub(skC[])) that the attacker may have by 8 may be received at input {14}.
The message (enc(exp(g,Ns_290599),pub(skB[])),sign(h(exp(g,Ns_290599)),skC[])) that the attacker may have by 26 may be received at input {21}.
So event endCli(C[],B[],exp(g,Ns_290599)) may be executed at {25}.
end(endCli(C[],B[],exp(g,Ns_290599))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (B,B,C)) at {8} in copy a_290605

out(c, GetEndpointRequest) at {13} in copy a_290605

in(c, (a_290603,SignAndEncrypt,a_290604,pub(skC))) at {14} in copy a_290605

new SPc creating SPc_290861 at {15} in copy a_290605

new Nc creating Nc_290862 at {16} in copy a_290605

event(beginCli(B,C,exp(g,Nc_290862))) at {19} in copy a_290605

out(c, (pub(skB),enc((SPc_290861,exp(g,Nc_290862)),pub(skC)),sign(h((SPc_290861,exp(g,Nc_290862))),skB))) at {20} in copy a_290605

in(c, (a_290601,B,C)) at {37} in copy a_290602

in(c, (pub(sk(a_290601)),enc((a,a_290600),pub(skC)),sign(h((a,a_290600)),sk(a_290601)))) at {42} in copy a_290602

new Ns creating Ns_290606 at {46} in copy a_290602

event(beginSrv(C,a_290601,exp(g,Ns_290606))) at {49} in copy a_290602

out(c, (enc(exp(g,Ns_290606),pub(sk(a_290601))),sign(h(exp(g,Ns_290606)),skC))) at {50} in copy a_290602

in(c, (enc(exp(g,Ns_290606),pub(skB)),sign(h(exp(g,Ns_290606)),skC))) at {21} in copy a_290605

event(endCli(C,B,exp(g,Ns_290606))) at {25} in copy a_290605

The event endCli(C,B,exp(g,Ns_290606)) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_291041,Y_291042,N_291043)) ==> event(beginCli(X_291041,Y_291042,N_291043))
Completing...
200 rules inserted. The rule base contains 66 rules. 301 rules in the queue.
400 rules inserted. The rule base contains 171 rules. 301 rules in the queue.
600 rules inserted. The rule base contains 235 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 266 rules. 283 rules in the queue.
1000 rules inserted. The rule base contains 284 rules. 521 rules in the queue.
1200 rules inserted. The rule base contains 348 rules. 585 rules in the queue.
1400 rules inserted. The rule base contains 487 rules. 1299 rules in the queue.
1600 rules inserted. The rule base contains 621 rules. 2004 rules in the queue.
1800 rules inserted. The rule base contains 725 rules. 2128 rules in the queue.
2000 rules inserted. The rule base contains 880 rules. 2064 rules in the queue.
2200 rules inserted. The rule base contains 1028 rules. 2124 rules in the queue.
2400 rules inserted. The rule base contains 1179 rules. 2143 rules in the queue.
2600 rules inserted. The rule base contains 1323 rules. 2112 rules in the queue.
2800 rules inserted. The rule base contains 1478 rules. 2133 rules in the queue.
3000 rules inserted. The rule base contains 1640 rules. 2200 rules in the queue.
3200 rules inserted. The rule base contains 1793 rules. 2134 rules in the queue.
3400 rules inserted. The rule base contains 1937 rules. 2251 rules in the queue.
3600 rules inserted. The rule base contains 2076 rules. 2213 rules in the queue.
3800 rules inserted. The rule base contains 2232 rules. 2154 rules in the queue.
4000 rules inserted. The rule base contains 2361 rules. 2028 rules in the queue.
4200 rules inserted. The rule base contains 2480 rules. 1905 rules in the queue.
4400 rules inserted. The rule base contains 2633 rules. 1827 rules in the queue.
4600 rules inserted. The rule base contains 2780 rules. 1707 rules in the queue.
4800 rules inserted. The rule base contains 2905 rules. 1625 rules in the queue.
5000 rules inserted. The rule base contains 3022 rules. 1536 rules in the queue.
5200 rules inserted. The rule base contains 3175 rules. 1402 rules in the queue.
5400 rules inserted. The rule base contains 3276 rules. 1313 rules in the queue.
5600 rules inserted. The rule base contains 3438 rules. 1228 rules in the queue.
5800 rules inserted. The rule base contains 3609 rules. 1084 rules in the queue.
6000 rules inserted. The rule base contains 3651 rules. 1008 rules in the queue.
6200 rules inserted. The rule base contains 3702 rules. 933 rules in the queue.
6400 rules inserted. The rule base contains 3736 rules. 875 rules in the queue.
6600 rules inserted. The rule base contains 3745 rules. 816 rules in the queue.
6800 rules inserted. The rule base contains 3796 rules. 741 rules in the queue.
7000 rules inserted. The rule base contains 3803 rules. 713 rules in the queue.
7200 rules inserted. The rule base contains 3837 rules. 692 rules in the queue.
7400 rules inserted. The rule base contains 3854 rules. 663 rules in the queue.
7600 rules inserted. The rule base contains 3873 rules. 632 rules in the queue.
7800 rules inserted. The rule base contains 3926 rules. 582 rules in the queue.
8000 rules inserted. The rule base contains 3984 rules. 546 rules in the queue.
8200 rules inserted. The rule base contains 4039 rules. 512 rules in the queue.
8400 rules inserted. The rule base contains 4106 rules. 471 rules in the queue.
8600 rules inserted. The rule base contains 4178 rules. 419 rules in the queue.
8800 rules inserted. The rule base contains 4246 rules. 369 rules in the queue.
9000 rules inserted. The rule base contains 4325 rules. 314 rules in the queue.
9200 rules inserted. The rule base contains 4401 rules. 258 rules in the queue.
9400 rules inserted. The rule base contains 4483 rules. 204 rules in the queue.
9600 rules inserted. The rule base contains 4649 rules. 93 rules in the queue.
Starting query event(endSrv(X_291041,Y_291042,N_291043)) ==> event(beginCli(X_291041,Y_291042,N_291043))
goal reachable: Sess_489904 <> C[] && Sess_489904 <> B[] && Sess_489904 <> A[] && begin(beginCli(C[],Sess_489904,exp(g,Nc[UP = UP_489905,SPs = SPs_489906,Sess = Sess_489904,Disco = B[],Cli = C[],!1 = @sid_489907]))) && attacker(SPs_489906) && attacker(UP_489905) && attacker(Sess_489904) -> end(endSrv(C[],B[],exp(g,Nc[UP = UP_489905,SPs = SPs_489906,Sess = Sess_489904,Disco = B[],Cli = C[],!1 = @sid_489907])))
Abbreviations:
Nc_491187 = Nc[UP = UP_491165,SPs = SPs_491166,Sess = Sess_491164,Disco = B[],Cli = C[],!1 = @sid_491167]
SPc_491188 = SPc[UP = UP_491165,SPs = SPs_491166,Sess = Sess_491164,Disco = B[],Cli = C[],!1 = @sid_491167]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows C[].
attacker(C[]).

3. By 2, the attacker may know C[].
By 1, the attacker may know B[].
By 1, the attacker may know B[].
Using the function 3-tuple the attacker may obtain (C[],B[],B[]).
attacker((C[],B[],B[])).

4. We assume as hypothesis that
attacker(Sess_491164).

5. By 2, the attacker may know C[].
By 1, the attacker may know B[].
By 4, the attacker may know Sess_491164.
Using the function 3-tuple the attacker may obtain (C[],B[],Sess_491164).
attacker((C[],B[],Sess_491164)).

6. By 4, the attacker may know Sess_491164.
Using the function sk the attacker may obtain sk(Sess_491164).
attacker(sk(Sess_491164)).

7. By 6, the attacker may know sk(Sess_491164).
Using the function pub the attacker may obtain pub(sk(Sess_491164)).
attacker(pub(sk(Sess_491164))).

8. We assume as hypothesis that
attacker(UP_491165).

9. Using the function SignAndEncrypt the attacker may obtain SignAndEncrypt.
attacker(SignAndEncrypt).

10. We assume as hypothesis that
attacker(SPs_491166).

11. By 10, the attacker may know SPs_491166.
By 9, the attacker may know SignAndEncrypt.
By 8, the attacker may know UP_491165.
By 7, the attacker may know pub(sk(Sess_491164)).
Using the function 4-tuple the attacker may obtain (SPs_491166,SignAndEncrypt,UP_491165,pub(sk(Sess_491164))).
attacker((SPs_491166,SignAndEncrypt,UP_491165,pub(sk(Sess_491164)))).

12. The message (C[],B[],Sess_491164) that the attacker may have by 5 may be received at input {8}.
The message (SPs_491166,SignAndEncrypt,UP_491165,pub(sk(Sess_491164))) that the attacker may have by 11 may be received at input {14}.
The event beginCli(C[],Sess_491164,exp(g,Nc_491187)) may be executed at {19}.
We have Sess_491164 <> C[] & Sess_491164 <> B[] & Sess_491164 <> A[].
So the message (pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))),sign(h((SPc_491188,exp(g,Nc_491187))),skC[])) may be sent to the attacker at output {20}.
attacker((pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))),sign(h((SPc_491188,exp(g,Nc_491187))),skC[]))).

13. By 12, the attacker may know (pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))),sign(h((SPc_491188,exp(g,Nc_491187))),skC[])).
Using the function 3-proj-3-tuple the attacker may obtain sign(h((SPc_491188,exp(g,Nc_491187))),skC[]).
attacker(sign(h((SPc_491188,exp(g,Nc_491187))),skC[])).

14. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

15. By 12, the attacker may know (pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))),sign(h((SPc_491188,exp(g,Nc_491187))),skC[])).
Using the function 2-proj-3-tuple the attacker may obtain enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))).
attacker(enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164)))).

16. By 15, the attacker may know enc((SPc_491188,exp(g,Nc_491187)),pub(sk(Sess_491164))).
By 6, the attacker may know sk(Sess_491164).
Using the function dec the attacker may obtain (SPc_491188,exp(g,Nc_491187)).
attacker((SPc_491188,exp(g,Nc_491187))).

17. By 16, the attacker may know (SPc_491188,exp(g,Nc_491187)).
Using the function 2-proj-2-tuple the attacker may obtain exp(g,Nc_491187).
attacker(exp(g,Nc_491187)).

18. By 16, the attacker may know (SPc_491188,exp(g,Nc_491187)).
Using the function 1-proj-2-tuple the attacker may obtain SPc_491188.
attacker(SPc_491188).

19. By 18, the attacker may know SPc_491188.
By 17, the attacker may know exp(g,Nc_491187).
Using the function 2-tuple the attacker may obtain (SPc_491188,exp(g,Nc_491187)).
attacker((SPc_491188,exp(g,Nc_491187))).

20. By 19, the attacker may know (SPc_491188,exp(g,Nc_491187)).
By 14, the attacker may know pub(skB[]).
Using the function enc the attacker may obtain enc((SPc_491188,exp(g,Nc_491187)),pub(skB[])).
attacker(enc((SPc_491188,exp(g,Nc_491187)),pub(skB[]))).

21. The message pub(skC[]) may be sent to the attacker at output {6}.
attacker(pub(skC[])).

22. By 21, the attacker may know pub(skC[]).
By 20, the attacker may know enc((SPc_491188,exp(g,Nc_491187)),pub(skB[])).
By 13, the attacker may know sign(h((SPc_491188,exp(g,Nc_491187))),skC[]).
Using the function 3-tuple the attacker may obtain (pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(skB[])),sign(h((SPc_491188,exp(g,Nc_491187))),skC[])).
attacker((pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(skB[])),sign(h((SPc_491188,exp(g,Nc_491187))),skC[]))).

23. The message (C[],B[],B[]) that the attacker may have by 3 may be received at input {37}.
The message (pub(skC[]),enc((SPc_491188,exp(g,Nc_491187)),pub(skB[])),sign(h((SPc_491188,exp(g,Nc_491187))),skC[])) that the attacker may have by 22 may be received at input {42}.
So event endSrv(C[],B[],exp(g,Nc_491187)) may be executed at {52}.
end(endSrv(C[],B[],exp(g,Nc_491187))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

out(c, pub(skC)) at {6}

in(c, (C,B,a_491191)) at {8} in copy a_491192

out(c, GetEndpointRequest) at {13} in copy a_491192

in(c, (a_491190,SignAndEncrypt,a_491189,pub(sk(a_491191)))) at {14} in copy a_491192

new SPc creating SPc_491195 at {15} in copy a_491192

new Nc creating Nc_491194 at {16} in copy a_491192

event(beginCli(C,a_491191,exp(g,Nc_491194))) at {19} in copy a_491192

out(c, (pub(skC),enc((SPc_491195,exp(g,Nc_491194)),pub(sk(a_491191))),sign(h((SPc_491195,exp(g,Nc_491194))),skC))) at {20} in copy a_491192

in(c, (C,B,B)) at {37} in copy a_491193

in(c, (pub(skC),enc((SPc_491195,exp(g,Nc_491194)),pub(skB)),sign(h((SPc_491195,exp(g,Nc_491194))),skC))) at {42} in copy a_491193

new Ns creating Ns_491592 at {46} in copy a_491193

event(beginSrv(B,C,exp(g,Ns_491592))) at {49} in copy a_491193

out(c, (enc(exp(g,Ns_491592),pub(skC)),sign(h(exp(g,Ns_491592)),skB))) at {50} in copy a_491193

event(endSrv(C,B,exp(g,Nc_491194))) at {52} in copy a_491193

The event endSrv(C,B,exp(g,Nc_491194)) is executed.
A trace has been found.
RESULT event(endSrv(X_291041,Y_291042,N_291043)) ==> event(beginCli(X_291041,Y_291042,N_291043)) is false.
