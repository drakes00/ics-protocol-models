File "opcua_session_sign_sign_encrypt.pv", line 112, character 41 - line 112, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (m1,sign(h(m1),skCli)));
    {15}in(c, (m2: bitstring,sigM2: bitstring));
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {18}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
        {19}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
        {20}out(c, (m3,sign(h(m3),skCli)));
        {21}in(c, (m4: bitstring,sigM4: bitstring));
        {22}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {23}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {24}!
    {25}in(c, (Cli_59: host,Sess_60: host));
    {26}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {27}let pkCli_62: bitstring = pub(skCli_61) in
    {28}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {29}let pkSess_64: bitstring = pub(skSess_63) in
    {30}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {31}in(c, (em1: bitstring,sigM1: bitstring));
    {32}new Nc_66: bitstring;
    {33}let m1_67: bitstring = sdec(em1,K_65) in
    {34}if (verify(h(m1_67),sigM1,pkCli_62) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_62,Nc_68: bitstring) = m1_67 in
        {36}new Ns_69: bitstring;
        {37}let m2_70: bitstring = (CreateSessionResponse,pkSess_64,Ns_69) in
        {38}out(c, (senc(m2_70,K_65),sign(h(m2_70),skSess_63)));
        {39}in(c, (em3: bitstring,sigM3: bitstring));
        {40}let m3_71: bitstring = sdec(em3,K_65) in
        {41}if (verify(h(m3_71),sigM3,pkCli_62) <> true) then
            0
        else
            {42}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_71 in
            {43}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
            {44}new Ns2_72: bitstring;
            {45}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {46}out(c, (senc(m4_73,K_65),sign(h(m4_73),skSess_63)))
) | (
    {47}!
    {48}in(c, (X: host,Y: host));
    {49}if (X = Y) then
        0
    else
        {50}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {51}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {52}if ((X,Y) = (A,B)) then
            0
        else
            {53}if ((X,Y) = (B,A)) then
                0
            else
                {54}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
Completing...
200 rules inserted. The rule base contains 134 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 192 rules. 28 rules in the queue.
600 rules inserted. The rule base contains 236 rules. 36 rules in the queue.
Starting query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
RESULT event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 5 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 5 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 5 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))
Abbreviations:
Ns_30139 = Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119)),em1 = senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])),Sess_60 = B[],Cli_59 = Cli_30119,!1 = @sid_30121]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Cli_30119.
attacker(Cli_30119).

5. By 4, the attacker may know Cli_30119.
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (Cli_30119,B[]).
attacker((Cli_30119,B[])).

6. By 4, the attacker may know Cli_30119.
Using the function sk the attacker may obtain sk(Cli_30119).
attacker(sk(Cli_30119)).

7. The attacker has some term Nc_30120.
attacker(Nc_30120).

8. By 6, the attacker may know sk(Cli_30119).
Using the function pub the attacker may obtain pub(sk(Cli_30119)).
attacker(pub(sk(Cli_30119))).

9. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

10. By 9, the attacker may know CreateSessionRequest.
By 8, the attacker may know pub(sk(Cli_30119)).
By 7, the attacker may know Nc_30120.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120).
attacker((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)).

11. By 10, the attacker may know (CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120).
Using the function h the attacker may obtain h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)).
attacker(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120))).

12. By 11, the attacker may know h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)).
By 6, the attacker may know sk(Cli_30119).
Using the function sign the attacker may obtain sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119)).
attacker(sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119))).

13. The message (Cli_30119,B[]) that the attacker may have by 5 may be received at input {48}.
We have Cli_30119 <> A[] & Cli_30119 <> B[].
So the message Skey(sk(Cli_30119),skB[]) may be sent to the attacker at output {54}.
attacker(Skey(sk(Cli_30119),skB[])).

14. By 10, the attacker may know (CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120).
By 13, the attacker may know Skey(sk(Cli_30119),skB[]).
Using the function senc the attacker may obtain senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])).
attacker(senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[]))).

15. By 14, the attacker may know senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])).
By 12, the attacker may know sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119))).
attacker((senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119)))).

16. The message (Cli_30119,B[]) that the attacker may have by 5 may be received at input {25}.
The message (senc((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_30119)),Nc_30120)),sk(Cli_30119))) that the attacker may have by 15 may be received at input {31}.
We have Cli_30119 <> B[] & Cli_30119 <> A[].
So the message (senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])) may be sent to the attacker at output {38}.
attacker((senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[]))).

17. By 16, the attacker may know (senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[]).
attacker(sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])).

18. By 16, the attacker may know (senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])).
attacker(senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[]))).

19. By 18, the attacker may know senc((CreateSessionResponse,pub(skB[]),Ns_30139),Skey(sk(Cli_30119),skB[])).
By 13, the attacker may know Skey(sk(Cli_30119),skB[]).
Using the function sdec the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_30139).
attacker((CreateSessionResponse,pub(skB[]),Ns_30139)).

20. By 19, the attacker may know (CreateSessionResponse,pub(skB[]),Ns_30139).
Using the function 3-proj-3-tuple the attacker may obtain Ns_30139.
attacker(Ns_30139).

21. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

22. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

23. By 22, the attacker may know CreateSessionResponse.
By 21, the attacker may know pub(skB[]).
By 20, the attacker may know Ns_30139.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_30139).
attacker((CreateSessionResponse,pub(skB[]),Ns_30139)).

24. By 23, the attacker may know (CreateSessionResponse,pub(skB[]),Ns_30139).
By 17, the attacker may know sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(skB[]),Ns_30139),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])).
attacker(((CreateSessionResponse,pub(skB[]),Ns_30139),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[]))).

25. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((CreateSessionResponse,pub(skB[]),Ns_30139),sign(h((CreateSessionResponse,pub(skB[]),Ns_30139)),skB[])) that the attacker may have by 24 may be received at input {15}.
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[]))).

26. By 25, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

27. By 26, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_30143

new Nc creating Nc_30341 at {12} in copy a_30143

out(c, ((CreateSessionRequest,pub(skA),Nc_30341),sign(h((CreateSessionRequest,pub(skA),Nc_30341)),skA))) at {14} in copy a_30143

in(c, (a,B)) at {25} in copy a_30141

in(c, (a,B)) at {48} in copy a_30142

out(c, Skey(sk(a),skB)) at {54} in copy a_30142

in(c, (senc((CreateSessionRequest,pub(sk(a)),a_30140),Skey(sk(a),skB)),sign(h((CreateSessionRequest,pub(sk(a)),a_30140)),sk(a)))) at {31} in copy a_30141

new Nc_66 creating Nc_30501 at {32} in copy a_30141

new Ns_69 creating Ns_30144 at {36} in copy a_30141

out(c, (senc((CreateSessionResponse,pub(skB),Ns_30144),Skey(sk(a),skB)),sign(h((CreateSessionResponse,pub(skB),Ns_30144)),skB))) at {38} in copy a_30141

in(c, ((CreateSessionResponse,pub(skB),Ns_30144),sign(h((CreateSessionResponse,pub(skB),Ns_30144)),skB))) at {15} in copy a_30143

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {18} in copy a_30143

out(c, ((ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB)),sign(h((ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))),skA))) at {20} in copy a_30143

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 125 rules. 59 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 5 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))
Abbreviations:
Ns_37870 = Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850)),em1 = senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])),Sess_60 = B[],Cli_59 = Cli_37850,!1 = @sid_37852]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Cli_37850.
attacker(Cli_37850).

5. By 4, the attacker may know Cli_37850.
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (Cli_37850,B[]).
attacker((Cli_37850,B[])).

6. By 4, the attacker may know Cli_37850.
Using the function sk the attacker may obtain sk(Cli_37850).
attacker(sk(Cli_37850)).

7. The attacker has some term Nc_37851.
attacker(Nc_37851).

8. By 6, the attacker may know sk(Cli_37850).
Using the function pub the attacker may obtain pub(sk(Cli_37850)).
attacker(pub(sk(Cli_37850))).

9. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

10. By 9, the attacker may know CreateSessionRequest.
By 8, the attacker may know pub(sk(Cli_37850)).
By 7, the attacker may know Nc_37851.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851).
attacker((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)).

11. By 10, the attacker may know (CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851).
Using the function h the attacker may obtain h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)).
attacker(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851))).

12. By 11, the attacker may know h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)).
By 6, the attacker may know sk(Cli_37850).
Using the function sign the attacker may obtain sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850)).
attacker(sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850))).

13. The message (Cli_37850,B[]) that the attacker may have by 5 may be received at input {48}.
We have Cli_37850 <> A[] & Cli_37850 <> B[].
So the message Skey(sk(Cli_37850),skB[]) may be sent to the attacker at output {54}.
attacker(Skey(sk(Cli_37850),skB[])).

14. By 10, the attacker may know (CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851).
By 13, the attacker may know Skey(sk(Cli_37850),skB[]).
Using the function senc the attacker may obtain senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])).
attacker(senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[]))).

15. By 14, the attacker may know senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])).
By 12, the attacker may know sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850))).
attacker((senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850)))).

16. The message (Cli_37850,B[]) that the attacker may have by 5 may be received at input {25}.
The message (senc((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionRequest,pub(sk(Cli_37850)),Nc_37851)),sk(Cli_37850))) that the attacker may have by 15 may be received at input {31}.
We have Cli_37850 <> B[] & Cli_37850 <> A[].
So the message (senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])) may be sent to the attacker at output {38}.
attacker((senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[]))).

17. By 16, the attacker may know (senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])).
Using the function 2-proj-2-tuple the attacker may obtain sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[]).
attacker(sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])).

18. By 16, the attacker may know (senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])).
attacker(senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[]))).

19. By 18, the attacker may know senc((CreateSessionResponse,pub(skB[]),Ns_37870),Skey(sk(Cli_37850),skB[])).
By 13, the attacker may know Skey(sk(Cli_37850),skB[]).
Using the function sdec the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_37870).
attacker((CreateSessionResponse,pub(skB[]),Ns_37870)).

20. By 19, the attacker may know (CreateSessionResponse,pub(skB[]),Ns_37870).
Using the function 3-proj-3-tuple the attacker may obtain Ns_37870.
attacker(Ns_37870).

21. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

22. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

23. By 22, the attacker may know CreateSessionResponse.
By 21, the attacker may know pub(skB[]).
By 20, the attacker may know Ns_37870.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_37870).
attacker((CreateSessionResponse,pub(skB[]),Ns_37870)).

24. By 23, the attacker may know (CreateSessionResponse,pub(skB[]),Ns_37870).
By 17, the attacker may know sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[]).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(skB[]),Ns_37870),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])).
attacker(((CreateSessionResponse,pub(skB[]),Ns_37870),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[]))).

25. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message ((CreateSessionResponse,pub(skB[]),Ns_37870),sign(h((CreateSessionResponse,pub(skB[]),Ns_37870)),skB[])) that the attacker may have by 24 may be received at input {15}.
So the message ((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[]))).

26. By 25, the attacker may know ((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])),sign(h((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

27. By 26, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_37875

new Nc creating Nc_38074 at {12} in copy a_37875

out(c, ((CreateSessionRequest,pub(skA),Nc_38074),sign(h((CreateSessionRequest,pub(skA),Nc_38074)),skA))) at {14} in copy a_37875

in(c, (a_37871,B)) at {25} in copy a_37873

in(c, (a_37871,B)) at {48} in copy a_37874

out(c, Skey(sk(a_37871),skB)) at {54} in copy a_37874

in(c, (senc((CreateSessionRequest,pub(sk(a_37871)),a_37872),Skey(sk(a_37871),skB)),sign(h((CreateSessionRequest,pub(sk(a_37871)),a_37872)),sk(a_37871)))) at {31} in copy a_37873

new Nc_66 creating Nc_38234 at {32} in copy a_37873

new Ns_69 creating Ns_37876 at {36} in copy a_37873

out(c, (senc((CreateSessionResponse,pub(skB),Ns_37876),Skey(sk(a_37871),skB)),sign(h((CreateSessionResponse,pub(skB),Ns_37876)),skB))) at {38} in copy a_37873

in(c, ((CreateSessionResponse,pub(skB),Ns_37876),sign(h((CreateSessionResponse,pub(skB),Ns_37876)),skB))) at {15} in copy a_37875

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {18} in copy a_37875

out(c, ((ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB)),sign(h((ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))),skA))) at {20} in copy a_37875

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
