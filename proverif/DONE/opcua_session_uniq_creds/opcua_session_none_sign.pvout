Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli,pkSess)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(pkCli),Passwd(skCli,pkSess)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Nc)
) | (
    {28}in(ch, (Cli_80: host,Sess_81: host,K_82: bitstring));
    {29}let skCli_83: bitstring = (if (Cli_80 = A) then skA else (if (Cli_80 = B) then skB else sk(Cli_80))) in
    {30}let pkCli_84: bitstring = pub(skCli_83) in
    {31}let skSess_85: bitstring = (if (Sess_81 = A) then skA else (if (Sess_81 = B) then skB else fail-any)) in
    {32}let pkSess_86: bitstring = pub(skSess_85) in
    {33}let tmp_87: bitstring = (if ((Cli_80 <> A) && (Cli_80 <> B)) then K_82 else CreateSessionRequest) in
    {34}out(c, tmp_87);
    {35}in(c, (m1_88: bitstring,sigM1: bitstring));
    {36}if (verifySign(h(m1_88),sigM1,pkCli_84) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_84,Nc_89: bitstring) = m1_88 in
        {38}new Ns_90: bitstring;
        {39}event beginSrv(Sess_81,Cli_80,Nc_89);
        {40}let m2_91: bitstring = (CreateSessionResponse,pkSess_86,Nc_89,Ns_90) in
        {41}out(c, (m2_91,sign(h(m2_91),skSess_85)));
        {42}in(c, (m3_92: bitstring,sigM3: bitstring));
        {43}if (verifySign(h(m3_92),sigM3,pkCli_84) <> true) then
            0
        else
            {44}let (=ActivateSessionRequest,=pkCli_84,login: bitstring,passwd: bitstring) = m3_92 in
            {45}if (verifyCreds(skSess_85,login,passwd) <> true) then
                0
            else
                {46}new Ns2_93: bitstring;
                {47}let m4_94: bitstring = (ActivateSessionResponse,Ns2_93) in
                {48}out(c, (m4_94,sign(h(m4_94),skSess_85)));
                {49}if ((Cli_80 = A) || (Cli_80 = B)) then
                {50}event endSrv(Cli_80,Sess_81,(login,passwd))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 90 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 180 rules. 74 rules in the queue.
600 rules inserted. The rule base contains 187 rules. 69 rules in the queue.
800 rules inserted. The rule base contains 235 rules. 5 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: end(endCli(A[],B[],Nc[Sess = A[],Cli = B[],!1 = @sid_10841]))
Abbreviations:
Nc_10868 = Nc[Sess = A[],Cli = B[],!1 = @sid_10863]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The attacker has some term Ns_10864.
attacker(Ns_10864).

5. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skB[]),Nc_10868) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skB[]),Nc_10868)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_10868).
Using the function 3-proj-3-tuple the attacker may obtain Nc_10868.
attacker(Nc_10868).

7. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skA[]).
By 6, the attacker may know Nc_10868.
By 4, the attacker may know Ns_10864.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skA[]),Nc_10868,Ns_10864).
attacker((CreateSessionResponse,pub(skA[]),Nc_10868,Ns_10864)).

10. The attacker has some term Ns2_10862.
attacker(Ns2_10862).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_10862.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_10862).
attacker((ActivateSessionResponse,Ns2_10862)).

13. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skA[]),Nc_10868,Ns_10864) that the attacker may have by 9 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_10862) that the attacker may have by 12 may be received at input {24}.
So event endCli(A[],B[],Nc_10868) may be executed at {27}.
end(endCli(A[],B[],Nc_10868)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_10963 at {6} in copy a

in(c, (B,A)) at {7} in copy a

new K creating K_10978 at {8} in copy a

out(ch_10963, (B,A,K_10978)) at {9} in copy a received at {28} in copy a

out(c, CreateSessionRequest) at {34} in copy a

out(c, CreateSessionRequest) at {15} in copy a

new Nc creating Nc_10871 at {16} in copy a

out(c, (CreateSessionRequest,pub(skB),Nc_10871)) at {18} in copy a

in(c, (CreateSessionResponse,pub(skA),Nc_10871,a_10870)) at {19} in copy a

event(beginCli(B,A,(Login(pub(skB)),Passwd(skB,pub(skA))))) at {21} in copy a

out(c, (ActivateSessionRequest,pub(skB),Login(pub(skB)),Passwd(skB,pub(skA)))) at {23} in copy a

in(c, (ActivateSessionResponse,a_10869)) at {24} in copy a

event(endCli(A,B,Nc_10871)) at {27} in copy a

The event endCli(A,B,Nc_10871) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_11186,Y_11187,N_11188)) ==> event(beginCli(X_11186,Y_11187,N_11188))
Completing...
200 rules inserted. The rule base contains 97 rules. 50 rules in the queue.
400 rules inserted. The rule base contains 202 rules. 84 rules in the queue.
600 rules inserted. The rule base contains 194 rules. 94 rules in the queue.
800 rules inserted. The rule base contains 206 rules. 54 rules in the queue.
Starting query event(endSrv(X_11186,Y_11187,N_11188)) ==> event(beginCli(X_11186,Y_11187,N_11188))
RESULT event(endSrv(X_11186,Y_11187,N_11188)) ==> event(beginCli(X_11186,Y_11187,N_11188)) is true.
-- Query not attacker(Passwd(skA[],pub(skB[])))
Completing...
200 rules inserted. The rule base contains 86 rules. 44 rules in the queue.
400 rules inserted. The rule base contains 180 rules. 68 rules in the queue.
600 rules inserted. The rule base contains 180 rules. 64 rules in the queue.
Starting query not attacker(Passwd(skA[],pub(skB[])))
goal reachable: attacker(Passwd(skA[],pub(skB[])))
Abbreviations:
Nc_28129 = Nc[Sess = B[],Cli = A[],!1 = @sid_28123]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_28124.
attacker(Ns_28124).

5. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_28129) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skA[]),Nc_28129)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_28129).
Using the function 3-proj-3-tuple the attacker may obtain Nc_28129.
attacker(Nc_28129).

7. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(skB[]).
By 6, the attacker may know Nc_28129.
By 4, the attacker may know Ns_28124.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Nc_28129,Ns_28124).
attacker((CreateSessionResponse,pub(skB[]),Nc_28129,Ns_28124)).

10. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Nc_28129,Ns_28124) that the attacker may have by 9 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[],pub(skB[]))) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[],pub(skB[])))).

11. By 10, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(pub(skA[])),Passwd(skA[],pub(skB[]))).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],pub(skB[])).
attacker(Passwd(skA[],pub(skB[]))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_28225 at {6} in copy a_28130

in(c, (A,B)) at {7} in copy a_28130

new K creating K_28240 at {8} in copy a_28130

out(ch_28225, (A,B,K_28240)) at {9} in copy a_28130 received at {28} in copy a_28130

out(c, CreateSessionRequest) at {34} in copy a_28130

out(c, CreateSessionRequest) at {15} in copy a_28130

new Nc creating Nc_28132 at {16} in copy a_28130

out(c, (CreateSessionRequest,pub(skA),Nc_28132)) at {18} in copy a_28130

in(c, (CreateSessionResponse,pub(skB),Nc_28132,a_28131)) at {19} in copy a_28130

event(beginCli(A,B,(Login(pub(skA)),Passwd(skA,pub(skB))))) at {21} in copy a_28130

out(c, (ActivateSessionRequest,pub(skA),Login(pub(skA)),Passwd(skA,pub(skB)))) at {23} in copy a_28130

The attacker has the message Passwd(skA,pub(skB)).
A trace has been found.
RESULT not attacker(Passwd(skA[],pub(skB[]))) is false.
