Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {26}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {27}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {28}let pkCli_63: bitstring = pub(skCli_62) in
    {29}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {30}let pkSess_65: bitstring = pub(skSess_64) in
    {31}in(c, (m1_66: bitstring,sigM1: bitstring));
    {32}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {33}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {34}new Ns_68: bitstring;
        {35}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {36}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {37}in(c, (m3_70: bitstring,sigM3: bitstring));
        {38}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {39}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62,skSess_64),=Passwd(skCli_62,skSess_64)) = m3_70 in
            {40}event endSrv(Cli_59,Sess_60,(Login(skCli_62,skSess_64),Passwd(skCli_62,skSess_64)));
            {41}new Ns2_71: bitstring;
            {42}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {43}out(c, (m4_72,sign(h(m4_72),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 113 rules. 49 rules in the queue.
400 rules inserted. The rule base contains 160 rules. 20 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 102 rules. 40 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_11429.
attacker(Ns_11429).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_11429.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_11429).
attacker((CreateSessionResponse,pub(skB[]),Ns_11429)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_11429) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_11518 at {6} in copy a_11435

in(c, (A,B)) at {7} in copy a_11435

new K creating K_11589 at {12} in copy a_11435

out(ch_11518, (A,B,K_11589)) at {13} in copy a_11435 received at {26} in copy a_11435

out(c, CreateSessionRequest) at {15} in copy a_11435

new Nc creating Nc_11677 at {16} in copy a_11435

out(c, (CreateSessionRequest,pub(skA),Nc_11677)) at {18} in copy a_11435

in(c, (CreateSessionResponse,pub(skB),a)) at {19} in copy a_11435

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_11435

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_11435

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 102 rules. 40 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_16998.
attacker(Ns_16998).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_16998.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_16998).
attacker((CreateSessionResponse,pub(skB[]),Ns_16998)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_16998) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_17089 at {6} in copy a_17005

in(c, (A,B)) at {7} in copy a_17005

new K creating K_17160 at {12} in copy a_17005

out(ch_17089, (A,B,K_17160)) at {13} in copy a_17005 received at {26} in copy a_17005

out(c, CreateSessionRequest) at {15} in copy a_17005

new Nc creating Nc_17248 at {16} in copy a_17005

out(c, (CreateSessionRequest,pub(skA),Nc_17248)) at {18} in copy a_17005

in(c, (CreateSessionResponse,pub(skB),a_17004)) at {19} in copy a_17005

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_17005

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_17005

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
