Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {18}let m3: bitstring = (CSC,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, m1_66: bitstring);
    {30}if (m1_66 <> CreateSessionRequest) then
        0
    else
        {31}new SSC_67: bitstring;
        {32}new Ns2_68: bitstring;
        {33}let m2_69: bitstring = (SSC_67,Ns2_68) in
        {34}out(c, m2_69);
        {35}in(c, m3_70: bitstring);
        {36}let (CSC_71: bitstring,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_70 in
        {37}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
        {38}let m4_72: bitstring = ActivateSessionResponse in
        {39}out(c, m4_72)
) | (
    {40}!
    {41}in(c, (X: host,Y: host));
    {42}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {43}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {44}if ((X,Y) = (A,B)) then
        0
    else
        {45}if ((X,Y) = (B,A)) then
            0
        else
            {46}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(B[],A[],(Login(skB[],skA[]),Passwd(skB[],skA[])))) -> end(endSrv(B[],A[],(Login(skB[],skA[]),Passwd(skB[],skA[]))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[],skB[]),Passwd(skA[],skB[])))) -> end(endSrv(A[],B[],(Login(skA[],skB[]),Passwd(skA[],skB[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[])))) -> end(endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[])))) -> end(endSrv(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[]))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))
Abbreviations:
CSC_17678 = CSC[m2 = (SSC_17672,Ns2_17673),Sess = B[],Cli = A[],!1 = @sid_17674]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_17673.
attacker(Ns2_17673).

5. The attacker has some term SSC_17672.
attacker(SSC_17672).

6. By 5, the attacker may know SSC_17672.
By 4, the attacker may know Ns2_17673.
Using the function 2-tuple the attacker may obtain (SSC_17672,Ns2_17673).
attacker((SSC_17672,Ns2_17673)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_17672,Ns2_17673) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_17678,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_17678,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_17678,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-3-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_17680

out(c, CreateSessionRequest) at {13} in copy a_17680

in(c, (a,a_17679)) at {14} in copy a_17680

new CSC creating CSC_17681 at {16} in copy a_17680

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_17680

out(c, (CSC_17681,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_17680

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))
Abbreviations:
CSC_22152 = CSC[m2 = (SSC_22146,Ns2_22147),Sess = B[],Cli = A[],!1 = @sid_22148]

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns2_22147.
attacker(Ns2_22147).

5. The attacker has some term SSC_22146.
attacker(SSC_22146).

6. By 5, the attacker may know SSC_22146.
By 4, the attacker may know Ns2_22147.
Using the function 2-tuple the attacker may obtain (SSC_22146,Ns2_22147).
attacker((SSC_22146,Ns2_22147)).

7. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (SSC_22146,Ns2_22147) that the attacker may have by 6 may be received at input {14}.
So the message (CSC_22152,Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((CSC_22152,Login(skA[],skB[]),Passwd(skA[],skB[]))).

8. By 7, the attacker may know (CSC_22152,Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 2-proj-3-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_22155

out(c, CreateSessionRequest) at {13} in copy a_22155

in(c, (a_22153,a_22154)) at {14} in copy a_22155

new CSC creating CSC_22156 at {16} in copy a_22155

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_22155

out(c, (CSC_22156,Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_22155

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
