Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,=Nc,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
        {23}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {28}if ((Cli = A) || (Cli = B)) then
            {29}event endSrv(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)))
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, m1_66: bitstring);
    {36}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
    {37}new Ns_68: bitstring;
    {38}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Nc_67,Ns_68) in
    {39}out(c, m2_69);
    {40}in(c, m3_70: bitstring);
    {41}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62,skSess_64),=Passwd(skCli_62,skSess_64)) = m3_70 in
    {42}new Ns2_71: bitstring;
    {43}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {44}out(c, m4_72);
    {45}if ((Cli_59 = A) || (Cli_59 = B)) then
    {46}event endSrv(Cli_59,Sess_60,(Login(skCli_62,skSess_64),Passwd(skCli_62,skSess_64)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 100 rules. 24 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_5444,Y_5445,N_5446)) ==> event(beginCli(X_5444,Y_5445,N_5446))
Completing...
200 rules inserted. The rule base contains 108 rules. 39 rules in the queue.
Starting query event(endSrv(X_5444,Y_5445,N_5446)) ==> event(beginCli(X_5444,Y_5445,N_5446))
goal reachable: Y_11620 <> B[] && Y_11620 <> A[] && begin(beginCli(B[],Y_11620,(Login(skB[],sk(Y_11620)),Passwd(skB[],sk(Y_11620))))) && attacker(Y_11620) -> end(endSrv(B[],Y_11620,(Login(skB[],sk(Y_11620)),Passwd(skB[],sk(Y_11620)))))
goal reachable: Y_11621 <> B[] && Y_11621 <> A[] && begin(beginCli(A[],Y_11621,(Login(skA[],sk(Y_11621)),Passwd(skA[],sk(Y_11621))))) && attacker(Y_11621) -> end(endSrv(A[],Y_11621,(Login(skA[],sk(Y_11621)),Passwd(skA[],sk(Y_11621)))))
RESULT event(endSrv(X_5444,Y_5445,N_5446)) ==> event(beginCli(X_5444,Y_5445,N_5446)) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 100 rules. 24 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
RESULT not attacker(Passwd(skA[],skB[])) is true.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 100 rules. 24 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
RESULT not attacker(Login(skA[],skB[])) is true.
