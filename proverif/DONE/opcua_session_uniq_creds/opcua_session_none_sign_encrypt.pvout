File "opcua_session_none_sign_encrypt.pv", line 110, character 41 - line 110, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, m1);
    {15}in(c, m2: bitstring);
    {16}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {17}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {18}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, (em1: bitstring,sigM1: bitstring));
    {30}new Nc_66: bitstring;
    {31}let m1_67: bitstring = sdec(em1,K_65) in
    {32}if (verify(h(m1_67),sigM1,pkCli_62) <> true) then
        0
    else
        {33}let (=CreateSessionRequest,=pkCli_62,Nc_68: bitstring) = m1_67 in
        {34}new Ns_69: bitstring;
        {35}let m2_70: bitstring = (CreateSessionResponse,pkSess_64,Ns_69) in
        {36}out(c, (senc(m2_70,K_65),sign(h(m2_70),skSess_63)));
        {37}in(c, (em3: bitstring,sigM3: bitstring));
        {38}let m3_71: bitstring = sdec(em3,K_65) in
        {39}if (verify(h(m3_71),sigM3,pkCli_62) <> true) then
            0
        else
            {40}let (=ActivateSessionRequest,=pkCli_62,=Login(skCli_61,skSess_63),=Passwd(skCli_61,skSess_63)) = m3_71 in
            {41}event endSrv(Cli_59,Sess_60,(Login(skCli_61,skSess_63),Passwd(skCli_61,skSess_63)));
            {42}new Ns2_72: bitstring;
            {43}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {44}out(c, (senc(m4_73,K_65),sign(h(m4_73),skSess_63)))
) | (
    {45}!
    {46}in(c, (X: host,Y: host));
    {47}if (X = Y) then
        0
    else
        {48}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {49}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {50}if ((X,Y) = (A,B)) then
            0
        else
            {51}if ((X,Y) = (B,A)) then
                0
            else
                {52}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
Completing...
200 rules inserted. The rule base contains 114 rules. 36 rules in the queue.
Starting query event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N))
RESULT event(endSrv(X_74,Y_75,N)) ==> event(beginCli(X_74,Y_75,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 116 rules. 24 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 116 rules. 24 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 116 rules. 24 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_23900.
attacker(Ns_23900).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_23900.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_23900).
attacker((CreateSessionResponse,pub(skB[]),Ns_23900)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (CreateSessionResponse,pub(skB[]),Ns_23900) that the attacker may have by 7 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_23906

new Nc creating Nc_24065 at {12} in copy a_23906

out(c, (CreateSessionRequest,pub(skA),Nc_24065)) at {14} in copy a_23906

in(c, (CreateSessionResponse,pub(skB),a)) at {15} in copy a_23906

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_23906

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_23906

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 116 rules. 24 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_29918.
attacker(Ns_29918).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_29918.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_29918).
attacker((CreateSessionResponse,pub(skB[]),Ns_29918)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {6}.
The message (CreateSessionResponse,pub(skB[]),Ns_29918) that the attacker may have by 7 may be received at input {15}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {19}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,B)) at {6} in copy a_29925

new Nc creating Nc_30085 at {12} in copy a_29925

out(c, (CreateSessionRequest,pub(skA),Nc_30085)) at {14} in copy a_29925

in(c, (CreateSessionResponse,pub(skB),a_29924)) at {15} in copy a_29925

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {17} in copy a_29925

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {19} in copy a_29925

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
