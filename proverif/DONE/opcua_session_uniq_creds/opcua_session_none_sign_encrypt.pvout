File "opcua_session_none_sign_encrypt.pv", line 104, character 41 - line 104, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Cli = A) || (Cli = B)) then
    {27}event endSrv(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)))
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}new Nc_66: bitstring;
    {35}let m1_67: bitstring = sdec(em1,K_61) in
    {36}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {38}new Ns_69: bitstring;
        {39}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {40}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {41}in(c, (em3: bitstring,sigM3: bitstring));
        {42}let m3_71: bitstring = sdec(em3,K_61) in
        {43}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {44}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62,skSess_64),=Passwd(skCli_62,skSess_64)) = m3_71 in
            {45}new Ns2_72: bitstring;
            {46}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {47}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)));
            {48}if ((Cli_59 = A) || (Cli_59 = B)) then
            {49}event endSrv(Cli_59,Sess_60,(Login(skCli_62,skSess_64),Passwd(skCli_62,skSess_64)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 114 rules. 38 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_6121,Y_6122,N_6123)) ==> event(beginCli(X_6121,Y_6122,N_6123))
Completing...
200 rules inserted. The rule base contains 108 rules. 48 rules in the queue.
400 rules inserted. The rule base contains 230 rules. 16 rules in the queue.
Starting query event(endSrv(X_6121,Y_6122,N_6123)) ==> event(beginCli(X_6121,Y_6122,N_6123))
goal reachable: Y_12951 <> B[] && Y_12951 <> A[] && begin(beginCli(B[],Y_12951,(Login(skB[],sk(Y_12951)),Passwd(skB[],sk(Y_12951))))) && attacker(Y_12951) -> end(endSrv(B[],Y_12951,(Login(skB[],sk(Y_12951)),Passwd(skB[],sk(Y_12951)))))
goal reachable: begin(beginCli(B[],A[],(Login(skB[],skA[]),Passwd(skB[],skA[])))) -> end(endSrv(B[],A[],(Login(skB[],skA[]),Passwd(skB[],skA[]))))
goal reachable: Y_12952 <> B[] && Y_12952 <> A[] && begin(beginCli(A[],Y_12952,(Login(skA[],sk(Y_12952)),Passwd(skA[],sk(Y_12952))))) && attacker(Y_12952) -> end(endSrv(A[],Y_12952,(Login(skA[],sk(Y_12952)),Passwd(skA[],sk(Y_12952)))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[],skB[]),Passwd(skA[],skB[])))) -> end(endSrv(A[],B[],(Login(skA[],skB[]),Passwd(skA[],skB[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[])))) -> end(endSrv(B[],B[],(Login(skB[],skB[]),Passwd(skB[],skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[])))) -> end(endSrv(A[],A[],(Login(skA[],skA[]),Passwd(skA[],skA[]))))
RESULT event(endSrv(X_6121,Y_6122,N_6123)) ==> event(beginCli(X_6121,Y_6122,N_6123)) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 114 rules. 38 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_18927.
attacker(Ns_18927).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_18927.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_18927).
attacker((CreateSessionResponse,pub(skB[]),Ns_18927)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_18927) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_19022 at {6} in copy a_18933

in(c, (A,B)) at {7} in copy a_18933

new K creating K_19093 at {12} in copy a_18933

out(ch_19022, (A,B,K_19093)) at {13} in copy a_18933 received at {28} in copy a_18933

out(c, CreateSessionRequest) at {15} in copy a_18933

new Nc creating Nc_19191 at {16} in copy a_18933

out(c, (CreateSessionRequest,pub(skA),Nc_19191)) at {18} in copy a_18933

in(c, (CreateSessionResponse,pub(skB),a)) at {19} in copy a_18933

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_18933

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_18933

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 114 rules. 38 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_25181.
attacker(Ns_25181).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_25181.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_25181).
attacker((CreateSessionResponse,pub(skB[]),Ns_25181)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_25181) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_25278 at {6} in copy a_25188

in(c, (A,B)) at {7} in copy a_25188

new K creating K_25349 at {12} in copy a_25188

out(ch_25278, (A,B,K_25349)) at {13} in copy a_25188 received at {28} in copy a_25188

out(c, CreateSessionRequest) at {15} in copy a_25188

new Nc creating Nc_25447 at {16} in copy a_25188

out(c, (CreateSessionRequest,pub(skA),Nc_25447)) at {18} in copy a_25188

in(c, (CreateSessionResponse,pub(skB),a_25187)) at {19} in copy a_25188

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_25188

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_25188

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
