File "opcua_session_none_sign_encrypt.pv", line 99, character 41 - line 99, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli,skSess),Passwd(skCli,skSess)));
    {22}let m3: bitstring = (ActivateSessionRequest,pkCli,Login(skCli,skSess),Passwd(skCli,skSess)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    0
) | (
    {26}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {27}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {28}let pkCli_63: bitstring = pub(skCli_62) in
    {29}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {30}let pkSess_65: bitstring = pub(skSess_64) in
    {31}in(c, (em1: bitstring,sigM1: bitstring));
    {32}new Nc_66: bitstring;
    {33}let m1_67: bitstring = sdec(em1,K_61) in
    {34}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {36}new Ns_69: bitstring;
        {37}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {38}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {39}in(c, (em3: bitstring,sigM3: bitstring));
        {40}let m3_71: bitstring = sdec(em3,K_61) in
        {41}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {42}let (=ActivateSessionRequest,=pkCli_63,=Login(skCli_62,skSess_64),=Passwd(skCli_62,skSess_64)) = m3_71 in
            {43}event endSrv(Cli_59,Sess_60,(Login(skCli_62,skSess_64),Passwd(skCli_62,skSess_64)));
            {44}new Ns2_72: bitstring;
            {45}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {46}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 113 rules. 41 rules in the queue.
400 rules inserted. The rule base contains 236 rules. 22 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 114 rules. 38 rules in the queue.
Starting query not attacker(Passwd(skA[],skB[]))
goal reachable: attacker(Passwd(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_12030.
attacker(Ns_12030).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_12030.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_12030).
attacker((CreateSessionResponse,pub(skB[]),Ns_12030)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_12030) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[],skB[]).
attacker(Passwd(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_12125 at {6} in copy a_12036

in(c, (A,B)) at {7} in copy a_12036

new K creating K_12196 at {12} in copy a_12036

out(ch_12125, (A,B,K_12196)) at {13} in copy a_12036 received at {26} in copy a_12036

out(c, CreateSessionRequest) at {15} in copy a_12036

new Nc creating Nc_12294 at {16} in copy a_12036

out(c, (CreateSessionRequest,pub(skA),Nc_12294)) at {18} in copy a_12036

in(c, (CreateSessionResponse,pub(skB),a)) at {19} in copy a_12036

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_12036

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_12036

The attacker has the message Passwd(skA,skB).
A trace has been found.
RESULT not attacker(Passwd(skA[],skB[])) is false.
-- Query not attacker(Login(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 114 rules. 38 rules in the queue.
Starting query not attacker(Login(skA[],skB[]))
goal reachable: attacker(Login(skA[],skB[]))

1. The attacker initially knows B[].
attacker(B[]).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know B[].
Using the function 2-tuple the attacker may obtain (A[],B[]).
attacker((A[],B[])).

4. The attacker has some term Ns_17891.
attacker(Ns_17891).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Ns_17891.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(skB[]),Ns_17891).
attacker((CreateSessionResponse,pub(skB[]),Ns_17891)).

8. The message (A[],B[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,pub(skB[]),Ns_17891) that the attacker may have by 7 may be received at input {19}.
So the message (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[]))).

9. By 8, the attacker may know (ActivateSessionRequest,pub(skA[]),Login(skA[],skB[]),Passwd(skA[],skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[],skB[]).
attacker(Login(skA[],skB[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_17988 at {6} in copy a_17898

in(c, (A,B)) at {7} in copy a_17898

new K creating K_18059 at {12} in copy a_17898

out(ch_17988, (A,B,K_18059)) at {13} in copy a_17898 received at {26} in copy a_17898

out(c, CreateSessionRequest) at {15} in copy a_17898

new Nc creating Nc_18157 at {16} in copy a_17898

out(c, (CreateSessionRequest,pub(skA),Nc_18157)) at {18} in copy a_17898

in(c, (CreateSessionResponse,pub(skB),a_17897)) at {19} in copy a_17898

event(beginCli(A,B,(Login(skA,skB),Passwd(skA,skB)))) at {21} in copy a_17898

out(c, (ActivateSessionRequest,pub(skA),Login(skA,skB),Passwd(skA,skB))) at {23} in copy a_17898

The attacker has the message Login(skA,skB).
A trace has been found.
RESULT not attacker(Login(skA[],skB[])) is false.
