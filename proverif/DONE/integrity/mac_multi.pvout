File "mac_multi.pv", line 39, character 9 - line 39, character 10:
Warning: identifier m rebound
Process:
(
    {1}in(cAO, (X: host,Y: host,m1: bitstring));
    {2}in(cBO, (=X,=Y,m2: bitstring));
    {3}if (m1 = m2) then
        0
    else
        {4}event different(X,Y,m2)
) | (
    {5}in(c, (X_22: host,Y_23: host));
    {6}if ((X_22 <> A) && (X_22 <> B)) then
        0
    else
        {7}new m_24: bitstring;
        {8}event sent(X_22,Y_23,m_24);
        {9}event begin(X_22,Y_23,m_24);
        {10}out(cAO, (X_22,Y_23,m_24));
        {11}out(c, (m_24,H(k,m_24)))
) | (
    {12}in(c, (X_25: host,Y_26: host));
    {13}if ((Y_26 <> A) && (Y_26 <> B)) then
        0
    else
        {14}in(c, (x: bitstring,h: bitstring));
        {15}if (h <> H(k,x)) then
            0
        else
            {16}event received(X_25,Y_26,x);
            {17}out(cBO, (X_25,Y_26,x));
            {18}if ((X_25 = A) || (X_25 = B)) then
            {19}event end(X_25,Y_26,x)
)

-- Query event(different(X_27,Y_28,N)) ==> (event(sent(X_27,Y_28,N)) && event(received(X_27,Y_28,N)))
Completing...
Starting query event(different(X_27,Y_28,N)) ==> (event(sent(X_27,Y_28,N)) && event(received(X_27,Y_28,N)))
goal reachable: Y_982 <> A[] && begin(received(B[],A[],m_24[Y_23 = Y_982,X_22 = B[]])) && begin(sent(B[],Y_982,m_24[Y_23 = Y_982,X_22 = B[]])) && attacker(Y_982) && begin(sent(B[],A[],m_24[Y_23 = A[],X_22 = B[]])) -> end(different(B[],A[],m_24[Y_23 = Y_982,X_22 = B[]]))
Abbreviations:
m_1019 = m_24[Y_23 = Y_1003,X_22 = B[]]
m_1020 = m_24[Y_23 = A[],X_22 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The message (B[],A[]) that the attacker may have by 3 may be received at input {5}.
The event sent(B[],A[],m_1020) may be executed at {8}.
So the message (B[],A[],m_1020) may be sent on channel cAO[] at output {10}.
mess(cAO[],(B[],A[],m_1020)).

5. We assume as hypothesis that
attacker(Y_1003).

6. By 2, the attacker may know B[].
By 5, the attacker may know Y_1003.
Using the function 2-tuple the attacker may obtain (B[],Y_1003).
attacker((B[],Y_1003)).

7. The message (B[],Y_1003) that the attacker may have by 6 may be received at input {5}.
The event sent(B[],Y_1003,m_1019) may be executed at {8}.
So the message (m_1019,H(k[],m_1019)) may be sent to the attacker at output {11}.
attacker((m_1019,H(k[],m_1019))).

8. By 7, the attacker may know (m_1019,H(k[],m_1019)).
Using the function 2-proj-2-tuple the attacker may obtain H(k[],m_1019).
attacker(H(k[],m_1019)).

9. By 7, the attacker may know (m_1019,H(k[],m_1019)).
Using the function 1-proj-2-tuple the attacker may obtain m_1019.
attacker(m_1019).

10. By 9, the attacker may know m_1019.
By 8, the attacker may know H(k[],m_1019).
Using the function 2-tuple the attacker may obtain (m_1019,H(k[],m_1019)).
attacker((m_1019,H(k[],m_1019))).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {12}.
The message (m_1019,H(k[],m_1019)) that the attacker may have by 10 may be received at input {14}.
The event received(B[],A[],m_1019) may be executed at {16}.
So the message (B[],A[],m_1019) may be sent on channel cBO[] at output {17}.
mess(cBO[],(B[],A[],m_1019)).

12. The message (B[],A[],m_1020) that may be sent on channel cAO[] by 4 may be received at input {1}.
The message (B[],A[],m_1019) that may be sent on channel cBO[] by 11 may be received at input {2}.
We have m_1020 <> m_1019.
So event different(B[],A[],m_1019) may be executed at {4}.
end(different(B[],A[],m_1019)).


Unified Y_1003 with A[]
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
Unification made an inequality become false.
Trying with the initial derivation tree instead.
Could not find a trace corresponding to this derivation.
RESULT event(different(X_27,Y_28,N)) ==> (event(sent(X_27,Y_28,N)) && event(received(X_27,Y_28,N))) cannot be proved.
-- Query event(end(X_1152,Y_1153,Z)) ==> event(begin(X_1152,Y_1153,Z))
Completing...
Starting query event(end(X_1152,Y_1153,Z)) ==> event(begin(X_1152,Y_1153,Z))
goal reachable: begin(begin(B[],Y_2068,m_24[Y_23 = Y_2068,X_22 = B[]])) && attacker(Y_2068) -> end(end(B[],A[],m_24[Y_23 = Y_2068,X_22 = B[]]))
Abbreviations:
m_2097 = m_24[Y_23 = Y_2086,X_22 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(Y_2086).

5. By 2, the attacker may know B[].
By 4, the attacker may know Y_2086.
Using the function 2-tuple the attacker may obtain (B[],Y_2086).
attacker((B[],Y_2086)).

6. The message (B[],Y_2086) that the attacker may have by 5 may be received at input {5}.
The event begin(B[],Y_2086,m_2097) may be executed at {9}.
So the message (m_2097,H(k[],m_2097)) may be sent to the attacker at output {11}.
attacker((m_2097,H(k[],m_2097))).

7. By 6, the attacker may know (m_2097,H(k[],m_2097)).
Using the function 2-proj-2-tuple the attacker may obtain H(k[],m_2097).
attacker(H(k[],m_2097)).

8. By 6, the attacker may know (m_2097,H(k[],m_2097)).
Using the function 1-proj-2-tuple the attacker may obtain m_2097.
attacker(m_2097).

9. By 8, the attacker may know m_2097.
By 7, the attacker may know H(k[],m_2097).
Using the function 2-tuple the attacker may obtain (m_2097,H(k[],m_2097)).
attacker((m_2097,H(k[],m_2097))).

10. The message (B[],A[]) that the attacker may have by 3 may be received at input {12}.
The message (m_2097,H(k[],m_2097)) that the attacker may have by 9 may be received at input {14}.
So event end(B[],A[],m_2097) may be executed at {19}.
end(end(B[],A[],m_2097)).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (B,a_2098)) at {5}

new m_24 creating m_2099 at {7}

event(sent(B,a_2098,m_2099)) at {8}

event(begin(B,a_2098,m_2099)) at {9}

out(cAO, (B,a_2098,m_2099)) at {10} received at {1}

out(c, (m_2099,H(k,m_2099))) at {11}

in(c, (B,A)) at {12}

in(c, (m_2099,H(k,m_2099))) at {14}

event(received(B,A,m_2099)) at {16}

out(cBO, (B,A,m_2099)) at {17} received at {2} (input fails)

event(end(B,A,m_2099)) at {19}

The event end(B,A,m_2099) is executed.
A trace has been found.
RESULT event(end(X_1152,Y_1153,Z)) ==> event(begin(X_1152,Y_1153,Z)) is false.
