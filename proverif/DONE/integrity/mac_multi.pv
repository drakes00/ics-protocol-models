(*  With a mac
    A -> B: m, h(k, m)
*)

type host.

free c: channel.

free cAO: channel [private].
free cBO: channel [private].

fun H(bitstring, bitstring): bitstring.

free A, B, C: host.
free k: bitstring [private].
free m: bitstring [private].

event begin(host, host, bitstring).
event end(host, host, bitstring).
query X: host, Y: host, z: bitstring; event(end(X, Y, z)) ==> event(begin(X, Y, z)).

event different(bitstring, bitstring).
query x: bitstring ; event(different(m, x)).
query x: bitstring ; event(different(x, m)).

let oracle = in(cAO, m1: bitstring); in(cBO, m2: bitstring); if m1 = m2 then 0 else event different(m1, m2).

let alice(A: host, B: host, m: bitstring) = out(cAO, m); event begin(A, B, m); out(c, (m, H(k, m))).
let bob(A: host, B: host) = in(c, (x: bitstring, h: bitstring)); if h=H(k, x) then out(cBO, x); event end(A, B, x) else 0.

process alice(A, C, m) | alice(B, C, m) | bob(A, C) | bob(B, C) | oracle
