(*  Symetric encryption
    A -> B: {m}_k
*)

free c: channel.

type host.
free A, B, C: host.

free cAO: channel [private].
free cBO: channel [private].

fun enc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, y: bitstring; dec(y, enc(y, x)) = x.

free k: bitstring [private].
free m: bitstring [private].

event begin(host, host, bitstring).
event end(host, host, bitstring).
query X: host, Y: host, z: bitstring; event(end(X, Y, z)) ==> event(begin(X, Y, z)).

event different(bitstring, bitstring).
query x: bitstring ; event(different(m, x)).
query x: bitstring ; event(different(x, m)).

let oracle = in(cAO, m1: bitstring); in(cBO, m2: bitstring); if m1 = m2 then 0 else event different(m1, m2).

let alice = out(cAO, m); event begin(A, B, m); out(c, enc(k, m)).
let bob = in(c, x: bitstring); let y = dec(k, x) in out(cBO, dec(k, y)); event end(A, B, y).

process oracle | alice | bob
