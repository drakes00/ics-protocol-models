File "senc.pv", line 41, character 9 - line 41, character 10:
Warning: identifier m rebound
Linear part:
Completing equations...
Completed equations:
Convergent part:
dec(y,enc(y,x)) = x
Completing equations...
Completed equations:
dec(y,enc(y,x)) = x
Process:
(
    {1}in(cAO, (X: host,Y: host,m1: bitstring));
    {2}in(cBO, (=X,=Y,m2: bitstring));
    {3}if (m1 = m2) then
        0
    else
        {4}event different(X,Y,m2)
) | (
    {5}in(c, (X_27: host,Y_28: host));
    {6}if ((X_27 <> A) && (X_27 <> B)) then
        0
    else
        {7}new m_29: bitstring;
        {8}event sent(X_27,Y_28,m_29);
        {9}event begin(X_27,Y_28,m_29);
        {10}out(cAO, (X_27,Y_28,m_29));
        {11}out(c, enc(k,m_29))
) | (
    {12}in(c, (X_30: host,Y_31: host));
    {13}if ((Y_31 <> A) && (Y_31 <> B)) then
        0
    else
        {14}in(c, y_32: bitstring);
        {15}let x_33: bitstring = dec(k,y_32) in
        {16}event received(X_30,Y_31,x_33);
        {17}out(cBO, (X_30,Y_31,x_33));
        {18}if ((X_30 = A) || (X_30 = B)) then
        {19}event end(X_30,Y_31,x_33)
)

-- Query event(different(X_34,Y_35,N)) ==> (event(sent(X_34,Y_35,N)) && event(received(X_34,Y_35,N)))
Completing...
Starting query event(different(X_34,Y_35,N)) ==> (event(sent(X_34,Y_35,N)) && event(received(X_34,Y_35,N)))
goal reachable: Y_1237 <> A[] && begin(received(B[],A[],m_29[Y_28 = Y_1237,X_27 = B[]])) && begin(sent(B[],Y_1237,m_29[Y_28 = Y_1237,X_27 = B[]])) && attacker(Y_1237) && begin(sent(B[],A[],m_29[Y_28 = A[],X_27 = B[]])) -> end(different(B[],A[],m_29[Y_28 = Y_1237,X_27 = B[]]))
Abbreviations:
m_1269 = m_29[Y_28 = Y_1257,X_27 = B[]]
m_1270 = m_29[Y_28 = A[],X_27 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The message (B[],A[]) that the attacker may have by 3 may be received at input {5}.
The event sent(B[],A[],m_1270) may be executed at {8}.
So the message (B[],A[],m_1270) may be sent on channel cAO[] at output {10}.
mess(cAO[],(B[],A[],m_1270)).

5. We assume as hypothesis that
attacker(Y_1257).

6. By 2, the attacker may know B[].
By 5, the attacker may know Y_1257.
Using the function 2-tuple the attacker may obtain (B[],Y_1257).
attacker((B[],Y_1257)).

7. The message (B[],Y_1257) that the attacker may have by 6 may be received at input {5}.
The event sent(B[],Y_1257,m_1269) may be executed at {8}.
So the message enc(k[],m_1269) may be sent to the attacker at output {11}.
attacker(enc(k[],m_1269)).

8. The message (B[],A[]) that the attacker may have by 3 may be received at input {12}.
The message enc(k[],m_1269) that the attacker may have by 7 may be received at input {14}.
The event received(B[],A[],m_1269) may be executed at {16}.
So the message (B[],A[],m_1269) may be sent on channel cBO[] at output {17}.
mess(cBO[],(B[],A[],m_1269)).

9. The message (B[],A[],m_1270) that may be sent on channel cAO[] by 4 may be received at input {1}.
The message (B[],A[],m_1269) that may be sent on channel cBO[] by 8 may be received at input {2}.
We have m_1270 <> m_1269.
So event different(B[],A[],m_1269) may be executed at {4}.
end(different(B[],A[],m_1269)).


Unified Y_1257 with A[]
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
Unification made an inequality become false.
Trying with the initial derivation tree instead.
Could not find a trace corresponding to this derivation.
RESULT event(different(X_34,Y_35,N)) ==> (event(sent(X_34,Y_35,N)) && event(received(X_34,Y_35,N))) cannot be proved.
-- Query event(end(X_1398,Y_1399,Z)) ==> event(begin(X_1398,Y_1399,Z))
Completing...
Starting query event(end(X_1398,Y_1399,Z)) ==> event(begin(X_1398,Y_1399,Z))
goal reachable: begin(begin(B[],Y_2578,m_29[Y_28 = Y_2578,X_27 = B[]])) && attacker(Y_2578) -> end(end(B[],A[],m_29[Y_28 = Y_2578,X_27 = B[]]))
Abbreviations:
m_2602 = m_29[Y_28 = Y_2595,X_27 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(Y_2595).

5. By 2, the attacker may know B[].
By 4, the attacker may know Y_2595.
Using the function 2-tuple the attacker may obtain (B[],Y_2595).
attacker((B[],Y_2595)).

6. The message (B[],Y_2595) that the attacker may have by 5 may be received at input {5}.
The event begin(B[],Y_2595,m_2602) may be executed at {9}.
So the message enc(k[],m_2602) may be sent to the attacker at output {11}.
attacker(enc(k[],m_2602)).

7. The message (B[],A[]) that the attacker may have by 3 may be received at input {12}.
The message enc(k[],m_2602) that the attacker may have by 6 may be received at input {14}.
So event end(B[],A[],m_2602) may be executed at {19}.
end(end(B[],A[],m_2602)).


A more detailed output of the traces is available with
  set traceDisplay = long.

in(c, (B,a_2603)) at {5}

new m_29 creating m_2604 at {7}

event(sent(B,a_2603,m_2604)) at {8}

event(begin(B,a_2603,m_2604)) at {9}

out(cAO, (B,a_2603,m_2604)) at {10} received at {1}

out(c, enc(k,m_2604)) at {11}

in(c, (B,A)) at {12}

in(c, enc(k,m_2604)) at {14}

event(received(B,A,dec(k,enc(k,m_2604)))) at {16}

out(cBO, (B,A,dec(k,enc(k,m_2604)))) at {17} received at {2} (input fails)

event(end(B,A,dec(k,enc(k,m_2604)))) at {19}

The event end(B,A,m_2604) is executed.
A trace has been found.
RESULT event(end(X_1398,Y_1399,Z)) ==> event(begin(X_1398,Y_1399,Z)) is false.
