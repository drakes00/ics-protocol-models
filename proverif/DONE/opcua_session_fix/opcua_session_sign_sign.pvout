Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {36}new Ns_68: bitstring;
        {37}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {38}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {39}in(c, (m3_70: bitstring,sigM3: bitstring));
        {40}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {41}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {42}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {43}new Ns2_71: bitstring;
            {44}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {45}out(c, (m4_72,sign(h(m4_72),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 114 rules. 83 rules in the queue.
400 rules inserted. The rule base contains 149 rules. 158 rules in the queue.
600 rules inserted. The rule base contains 180 rules. 115 rules in the queue.
800 rules inserted. The rule base contains 283 rules. 64 rules in the queue.
1000 rules inserted. The rule base contains 293 rules. 100 rules in the queue.
1200 rules inserted. The rule base contains 350 rules. 140 rules in the queue.
1400 rules inserted. The rule base contains 369 rules. 160 rules in the queue.
1600 rules inserted. The rule base contains 405 rules. 118 rules in the queue.
1800 rules inserted. The rule base contains 466 rules. 56 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 115 rules. 84 rules in the queue.
400 rules inserted. The rule base contains 138 rules. 134 rules in the queue.
600 rules inserted. The rule base contains 198 rules. 67 rules in the queue.
800 rules inserted. The rule base contains 209 rules. 52 rules in the queue.
1000 rules inserted. The rule base contains 285 rules. 48 rules in the queue.
1200 rules inserted. The rule base contains 274 rules. 48 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_29039.
attacker(Sess_29039).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_29039.
Using the function 2-tuple the attacker may obtain (A[],Sess_29039).
attacker((A[],Sess_29039)).

4. By 1, the attacker may know Sess_29039.
Using the function sk the attacker may obtain sk(Sess_29039).
attacker(sk(Sess_29039)).

5. The attacker has some term Ns_29040.
attacker(Ns_29040).

6. By 4, the attacker may know sk(Sess_29039).
Using the function pub the attacker may obtain pub(sk(Sess_29039)).
attacker(pub(sk(Sess_29039))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_29039)).
By 5, the attacker may know Ns_29040.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040).
attacker((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)).
attacker(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)).
By 4, the attacker may know sk(Sess_29039).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040),sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039))).
attacker(((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040),sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039)))).

12. The message (A[],Sess_29039) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040),sign(h((CreateSessionResponse,pub(sk(Sess_29039)),Ns_29040)),sk(Sess_29039))) that the attacker may have by 11 may be received at input {19}.
We have Sess_29039 <> B[] & Sess_29039 <> A[].
So the message ((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,Sess_29039,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_29139 at {6} in copy a_29050

in(c, (A,a)) at {7} in copy a_29050

new K creating K_29225 at {12} in copy a_29050

out(ch_29139, (A,a,K_29225)) at {13} in copy a_29050 received at {28} in copy a_29050

out(c, K_29225) at {15} in copy a_29050

new Nc creating Nc_29304 at {16} in copy a_29050

out(c, ((CreateSessionRequest,pub(skA),Nc_29304),sign(h((CreateSessionRequest,pub(skA),Nc_29304)),skA))) at {18} in copy a_29050

in(c, ((CreateSessionResponse,pub(sk(a)),a_29049),sign(h((CreateSessionResponse,pub(sk(a)),a_29049)),sk(a)))) at {19} in copy a_29050

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {22} in copy a_29050

out(c, ((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_29050

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 115 rules. 84 rules in the queue.
400 rules inserted. The rule base contains 138 rules. 134 rules in the queue.
600 rules inserted. The rule base contains 198 rules. 67 rules in the queue.
800 rules inserted. The rule base contains 209 rules. 52 rules in the queue.
1000 rules inserted. The rule base contains 285 rules. 48 rules in the queue.
1200 rules inserted. The rule base contains 274 rules. 48 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_39234.
attacker(Sess_39234).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_39234.
Using the function 2-tuple the attacker may obtain (A[],Sess_39234).
attacker((A[],Sess_39234)).

4. By 1, the attacker may know Sess_39234.
Using the function sk the attacker may obtain sk(Sess_39234).
attacker(sk(Sess_39234)).

5. The attacker has some term Ns_39235.
attacker(Ns_39235).

6. By 4, the attacker may know sk(Sess_39234).
Using the function pub the attacker may obtain pub(sk(Sess_39234)).
attacker(pub(sk(Sess_39234))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_39234)).
By 5, the attacker may know Ns_39235.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235).
attacker((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)).
attacker(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)).
By 4, the attacker may know sk(Sess_39234).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235),sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234))).
attacker(((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235),sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234)))).

12. The message (A[],Sess_39234) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235),sign(h((CreateSessionResponse,pub(sk(Sess_39234)),Ns_39235)),sk(Sess_39234))) that the attacker may have by 11 may be received at input {19}.
We have Sess_39234 <> B[] & Sess_39234 <> A[].
So the message ((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,Sess_39234,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_39336 at {6} in copy a_39246

in(c, (A,a_39244)) at {7} in copy a_39246

new K creating K_39422 at {12} in copy a_39246

out(ch_39336, (A,a_39244,K_39422)) at {13} in copy a_39246 received at {28} in copy a_39246

out(c, K_39422) at {15} in copy a_39246

new Nc creating Nc_39501 at {16} in copy a_39246

out(c, ((CreateSessionRequest,pub(skA),Nc_39501),sign(h((CreateSessionRequest,pub(skA),Nc_39501)),skA))) at {18} in copy a_39246

in(c, ((CreateSessionResponse,pub(sk(a_39244)),a_39245),sign(h((CreateSessionResponse,pub(sk(a_39244)),a_39245)),sk(a_39244)))) at {19} in copy a_39246

event(beginCli(A,a_39244,(Login(skA),Passwd(skA)))) at {22} in copy a_39246

out(c, ((ActivateSessionRequest,a_39244,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,a_39244,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_39246

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
