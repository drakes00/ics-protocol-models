Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (m1,sign(h(m1),skCli)));
    {14}in(c, (m2: bitstring,sigM2: bitstring));
    {15}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {16}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {17}new CSC: bitstring;
        {18}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {19}let m3: bitstring = (CSC,Sess,Login(skCli),Passwd(skCli)) in
        {20}out(c, (m3,sign(h(m3),skCli)));
        {21}in(c, (m4: bitstring,sigM4: bitstring));
        {22}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {23}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {24}!
    {25}in(c, (Cli_59: host,Sess_60: host));
    {26}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {27}let pkCli_62: bitstring = pub(skCli_61) in
    {28}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {29}let pkSess_64: bitstring = pub(skSess_63) in
    {30}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {31}in(c, (m1_66: bitstring,sigM1: bitstring));
    {32}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {33}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {34}new SSC_67: bitstring;
            {35}new Ns2_68: bitstring;
            {36}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {37}out(c, (m2_69,sign(h(m2_69),skSess_63)));
            {38}in(c, (m3_70: bitstring,sigM3: bitstring));
            {39}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {40}let (CSC_71: bitstring,=Sess_60,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
                {41}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
                {42}let m4_72: bitstring = ActivateSessionResponse in
                {43}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {47}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {48}if ((X,Y) = (A,B)) then
        0
    else
        {49}if ((X,Y) = (B,A)) then
            0
        else
            {50}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 96 rules. 38 rules in the queue.
400 rules inserted. The rule base contains 128 rules. 36 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 72 rules. 32 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 72 rules. 32 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 72 rules. 32 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_27612 = CSC[sigM2 = sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604)),m2 = (SSC_27602,Ns2_27603),Sess = Sess_27604,Cli = A[],!1 = @sid_27605]

1. The attacker has some term Sess_27604.
attacker(Sess_27604).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_27604.
Using the function 2-tuple the attacker may obtain (A[],Sess_27604).
attacker((A[],Sess_27604)).

4. By 1, the attacker may know Sess_27604.
Using the function sk the attacker may obtain sk(Sess_27604).
attacker(sk(Sess_27604)).

5. The attacker has some term Ns2_27603.
attacker(Ns2_27603).

6. The attacker has some term SSC_27602.
attacker(SSC_27602).

7. By 6, the attacker may know SSC_27602.
By 5, the attacker may know Ns2_27603.
Using the function 2-tuple the attacker may obtain (SSC_27602,Ns2_27603).
attacker((SSC_27602,Ns2_27603)).

8. By 7, the attacker may know (SSC_27602,Ns2_27603).
Using the function h the attacker may obtain h((SSC_27602,Ns2_27603)).
attacker(h((SSC_27602,Ns2_27603))).

9. By 8, the attacker may know h((SSC_27602,Ns2_27603)).
By 4, the attacker may know sk(Sess_27604).
Using the function sign the attacker may obtain sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604)).
attacker(sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604))).

10. By 7, the attacker may know (SSC_27602,Ns2_27603).
By 9, the attacker may know sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604)).
Using the function 2-tuple the attacker may obtain ((SSC_27602,Ns2_27603),sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604))).
attacker(((SSC_27602,Ns2_27603),sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604)))).

11. The message (A[],Sess_27604) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_27602,Ns2_27603),sign(h((SSC_27602,Ns2_27603)),sk(Sess_27604))) that the attacker may have by 10 may be received at input {14}.
We have Sess_27604 <> B[] & Sess_27604 <> A[].
So the message ((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[])),sign(h((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[])),sign(h((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[]))),skA[]))).

12. By 11, the attacker may know ((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[])),sign(h((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[])).
attacker((CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[]))).

13. By 12, the attacker may know (CSC_27612,Sess_27604,Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_27614)) at {6} in copy a_27615

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_27615

in(c, ((a,a_27613),sign(h((a,a_27613)),sk(a_27614)))) at {14} in copy a_27615

new CSC creating CSC_27616 at {17} in copy a_27615

event(beginCli(A,a_27614,(Login(skA),Passwd(skA)))) at {18} in copy a_27615

out(c, ((CSC_27616,a_27614,Login(skA),Passwd(skA)),sign(h((CSC_27616,a_27614,Login(skA),Passwd(skA))),skA))) at {20} in copy a_27615

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 72 rules. 32 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_34290 = CSC[sigM2 = sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282)),m2 = (SSC_34280,Ns2_34281),Sess = Sess_34282,Cli = A[],!1 = @sid_34283]

1. The attacker has some term Sess_34282.
attacker(Sess_34282).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_34282.
Using the function 2-tuple the attacker may obtain (A[],Sess_34282).
attacker((A[],Sess_34282)).

4. By 1, the attacker may know Sess_34282.
Using the function sk the attacker may obtain sk(Sess_34282).
attacker(sk(Sess_34282)).

5. The attacker has some term Ns2_34281.
attacker(Ns2_34281).

6. The attacker has some term SSC_34280.
attacker(SSC_34280).

7. By 6, the attacker may know SSC_34280.
By 5, the attacker may know Ns2_34281.
Using the function 2-tuple the attacker may obtain (SSC_34280,Ns2_34281).
attacker((SSC_34280,Ns2_34281)).

8. By 7, the attacker may know (SSC_34280,Ns2_34281).
Using the function h the attacker may obtain h((SSC_34280,Ns2_34281)).
attacker(h((SSC_34280,Ns2_34281))).

9. By 8, the attacker may know h((SSC_34280,Ns2_34281)).
By 4, the attacker may know sk(Sess_34282).
Using the function sign the attacker may obtain sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282)).
attacker(sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282))).

10. By 7, the attacker may know (SSC_34280,Ns2_34281).
By 9, the attacker may know sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282)).
Using the function 2-tuple the attacker may obtain ((SSC_34280,Ns2_34281),sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282))).
attacker(((SSC_34280,Ns2_34281),sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282)))).

11. The message (A[],Sess_34282) that the attacker may have by 3 may be received at input {6}.
The message ((SSC_34280,Ns2_34281),sign(h((SSC_34280,Ns2_34281)),sk(Sess_34282))) that the attacker may have by 10 may be received at input {14}.
We have Sess_34282 <> B[] & Sess_34282 <> A[].
So the message ((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[])),sign(h((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {20}.
attacker(((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[])),sign(h((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[]))),skA[]))).

12. By 11, the attacker may know ((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[])),sign(h((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[])).
attacker((CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[]))).

13. By 12, the attacker may know (CSC_34290,Sess_34282,Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_34293)) at {6} in copy a_34294

out(c, (CreateSessionRequest,sign(h(CreateSessionRequest),skA))) at {13} in copy a_34294

in(c, ((a_34291,a_34292),sign(h((a_34291,a_34292)),sk(a_34293)))) at {14} in copy a_34294

new CSC creating CSC_34295 at {17} in copy a_34294

event(beginCli(A,a_34293,(Login(skA),Passwd(skA)))) at {18} in copy a_34294

out(c, ((CSC_34295,a_34293,Login(skA),Passwd(skA)),sign(h((CSC_34295,a_34293,Login(skA),Passwd(skA))),skA))) at {20} in copy a_34294

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
