Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=Cli,=pkSess,=Nc,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(pkCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {28}if ((Sess = A) || (Sess = B)) then
            {29}event endCli(Sess,Cli,Ns)
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}let tmp_66: bitstring = (if ((Cli_59 <> A) && (Cli_59 <> B)) then K_61 else CreateSessionRequest) in
    {36}out(c, tmp_66);
    {37}in(c, (m1_67: bitstring,sigM1: bitstring));
    {38}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {39}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {40}new Ns_69: bitstring;
        {41}event beginSrv(Sess_60,Cli_59,Ns_69);
        {42}let m2_70: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Nc_68,Ns_69) in
        {43}out(c, (m2_70,sign(h(m2_70),skSess_64)));
        {44}in(c, (m3_71: bitstring,sigM3: bitstring));
        {45}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(pkCli_63),=Passwd(skCli_62)) = m3_71 in
            {47}new Ns2_72: bitstring;
            {48}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {49}out(c, (m4_73,sign(h(m4_73),skSess_64)));
            {50}if ((Cli_59 = A) || (Cli_59 = B)) then
            {51}event endSrv(Cli_59,Sess_60,(Login(pkCli_63),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 122 rules. 87 rules in the queue.
400 rules inserted. The rule base contains 141 rules. 150 rules in the queue.
600 rules inserted. The rule base contains 149 rules. 142 rules in the queue.
800 rules inserted. The rule base contains 185 rules. 116 rules in the queue.
1000 rules inserted. The rule base contains 221 rules. 80 rules in the queue.
1200 rules inserted. The rule base contains 321 rules. 32 rules in the queue.
1400 rules inserted. The rule base contains 341 rules. 48 rules in the queue.
1600 rules inserted. The rule base contains 371 rules. 16 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: begin(beginSrv(A[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_19690])),skB[]),m1_67 = (CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_19690]),K_61 = K[Sess = A[],Cli = B[],!1 = @sid_19691],Sess_60 = A[],Cli_59 = B[],!1 = @sid_19691])) -> end(endCli(A[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_19690])),skB[]),m1_67 = (CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_19690]),K_61 = K[Sess = A[],Cli = B[],!1 = @sid_19691],Sess_60 = A[],Cli_59 = B[],!1 = @sid_19691]))
goal reachable: begin(beginSrv(B[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_19692])),skA[]),m1_67 = (CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_19692]),K_61 = K[Sess = B[],Cli = A[],!1 = @sid_19693],Sess_60 = B[],Cli_59 = A[],!1 = @sid_19693])) -> end(endCli(B[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_19692])),skA[]),m1_67 = (CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_19692]),K_61 = K[Sess = B[],Cli = A[],!1 = @sid_19693],Sess_60 = B[],Cli_59 = A[],!1 = @sid_19693]))
goal reachable: begin(beginSrv(B[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_19694])),skB[]),m1_67 = (CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_19694]),K_61 = K[Sess = B[],Cli = B[],!1 = @sid_19695],Sess_60 = B[],Cli_59 = B[],!1 = @sid_19695])) -> end(endCli(B[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_19694])),skB[]),m1_67 = (CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_19694]),K_61 = K[Sess = B[],Cli = B[],!1 = @sid_19695],Sess_60 = B[],Cli_59 = B[],!1 = @sid_19695]))
goal reachable: begin(beginSrv(A[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_19696])),skA[]),m1_67 = (CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_19696]),K_61 = K[Sess = A[],Cli = A[],!1 = @sid_19697],Sess_60 = A[],Cli_59 = A[],!1 = @sid_19697])) -> end(endCli(A[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_19696])),skA[]),m1_67 = (CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_19696]),K_61 = K[Sess = A[],Cli = A[],!1 = @sid_19697],Sess_60 = A[],Cli_59 = A[],!1 = @sid_19697]))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_19701,Y_19702,N_19703)) ==> event(beginCli(X_19701,Y_19702,N_19703))
Completing...
200 rules inserted. The rule base contains 122 rules. 97 rules in the queue.
400 rules inserted. The rule base contains 141 rules. 162 rules in the queue.
600 rules inserted. The rule base contains 157 rules. 158 rules in the queue.
800 rules inserted. The rule base contains 189 rules. 122 rules in the queue.
1000 rules inserted. The rule base contains 225 rules. 84 rules in the queue.
1200 rules inserted. The rule base contains 300 rules. 22 rules in the queue.
1400 rules inserted. The rule base contains 339 rules. 56 rules in the queue.
1600 rules inserted. The rule base contains 365 rules. 26 rules in the queue.
Starting query event(endSrv(X_19701,Y_19702,N_19703)) ==> event(beginCli(X_19701,Y_19702,N_19703))
goal reachable: begin(beginCli(B[],A[],(Login(pub(skB[])),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(pub(skB[])),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(pub(skA[])),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(pub(skA[])),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(pub(skB[])),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(pub(skB[])),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(pub(skA[])),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(pub(skA[])),Passwd(skA[]))))
RESULT event(endSrv(X_19701,Y_19702,N_19703)) ==> event(beginCli(X_19701,Y_19702,N_19703)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 126 rules. 107 rules in the queue.
400 rules inserted. The rule base contains 137 rules. 146 rules in the queue.
600 rules inserted. The rule base contains 152 rules. 131 rules in the queue.
800 rules inserted. The rule base contains 197 rules. 95 rules in the queue.
1000 rules inserted. The rule base contains 236 rules. 55 rules in the queue.
1200 rules inserted. The rule base contains 309 rules. 48 rules in the queue.
1400 rules inserted. The rule base contains 298 rules. 35 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_45582 = Nc[Sess = Sess_45572,Cli = A[],!1 = @sid_45573]

1. The attacker has some term Sess_45572.
attacker(Sess_45572).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_45572.
Using the function 2-tuple the attacker may obtain (A[],Sess_45572).
attacker((A[],Sess_45572)).

4. By 1, the attacker may know Sess_45572.
Using the function sk the attacker may obtain sk(Sess_45572).
attacker(sk(Sess_45572)).

5. The attacker has some term Ns_45574.
attacker(Ns_45574).

6. The message (A[],Sess_45572) that the attacker may have by 3 may be received at input {7}.
We have Sess_45572 <> B[] & Sess_45572 <> A[].
So the message ((CreateSessionRequest,pub(skA[]),Nc_45582),sign(h((CreateSessionRequest,pub(skA[]),Nc_45582)),skA[])) may be sent to the attacker at output {18}.
attacker(((CreateSessionRequest,pub(skA[]),Nc_45582),sign(h((CreateSessionRequest,pub(skA[]),Nc_45582)),skA[]))).

7. By 6, the attacker may know ((CreateSessionRequest,pub(skA[]),Nc_45582),sign(h((CreateSessionRequest,pub(skA[]),Nc_45582)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_45582).
attacker((CreateSessionRequest,pub(skA[]),Nc_45582)).

8. By 7, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_45582).
Using the function 3-proj-3-tuple the attacker may obtain Nc_45582.
attacker(Nc_45582).

9. By 4, the attacker may know sk(Sess_45572).
Using the function pub the attacker may obtain pub(sk(Sess_45572)).
attacker(pub(sk(Sess_45572))).

10. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

11. By 10, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 9, the attacker may know pub(sk(Sess_45572)).
By 8, the attacker may know Nc_45582.
By 5, the attacker may know Ns_45574.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574).
attacker((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)).

12. By 11, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574))).

13. By 12, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)).
By 4, the attacker may know sk(Sess_45572).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572))).

14. By 11, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574).
By 13, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574),sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572))).
attacker(((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574),sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572)))).

15. The message (A[],Sess_45572) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574),sign(h((CreateSessionResponse,A[],pub(sk(Sess_45572)),Nc_45582,Ns_45574)),sk(Sess_45572))) that the attacker may have by 14 may be received at input {19}.
We have Sess_45572 <> B[] & Sess_45572 <> A[].
So the message ((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[]))).

16. By 15, the attacker may know ((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_45572,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_45677 at {6} in copy a_45583

in(c, (A,a)) at {7} in copy a_45583

new K creating K_45694 at {8} in copy a_45583

out(ch_45677, (A,a,K_45694)) at {9} in copy a_45583 received at {30} in copy a_45583

out(c, K_45694) at {15} in copy a_45583

new Nc creating Nc_45585 at {16} in copy a_45583

out(c, ((CreateSessionRequest,pub(skA),Nc_45585),sign(h((CreateSessionRequest,pub(skA),Nc_45585)),skA))) at {18} in copy a_45583

in(c, ((CreateSessionResponse,A,pub(sk(a)),Nc_45585,a_45584),sign(h((CreateSessionResponse,A,pub(sk(a)),Nc_45585,a_45584)),sk(a)))) at {19} in copy a_45583

event(beginCli(A,a,(Login(pub(skA)),Passwd(skA)))) at {22} in copy a_45583

out(c, ((ActivateSessionRequest,a,pub(skA),Login(pub(skA)),Passwd(skA)),sign(h((ActivateSessionRequest,a,pub(skA),Login(pub(skA)),Passwd(skA))),skA))) at {24} in copy a_45583

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
