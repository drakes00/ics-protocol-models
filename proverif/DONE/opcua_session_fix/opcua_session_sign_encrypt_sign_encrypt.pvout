File "opcua_session_sign_encrypt_sign_encrypt.pv", line 103, character 41 - line 103, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, (em1: bitstring,sigM1: bitstring));
    {36}new Nc_66: bitstring;
    {37}let m1_67: bitstring = sdec(em1,K_61) in
    {38}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {39}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {40}new Ns_69: bitstring;
        {41}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {42}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {43}in(c, (em3: bitstring,sigM3: bitstring));
        {44}let m3_71: bitstring = sdec(em3,K_61) in
        {45}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {47}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {48}new Ns2_72: bitstring;
            {49}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {50}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 159 rules. 96 rules in the queue.
400 rules inserted. The rule base contains 304 rules. 140 rules in the queue.
600 rules inserted. The rule base contains 414 rules. 152 rules in the queue.
800 rules inserted. The rule base contains 468 rules. 65 rules in the queue.
1000 rules inserted. The rule base contains 615 rules. 116 rules in the queue.
1200 rules inserted. The rule base contains 729 rules. 90 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 147 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 130 rules in the queue.
600 rules inserted. The rule base contains 366 rules. 103 rules in the queue.
800 rules inserted. The rule base contains 422 rules. 67 rules in the queue.
1000 rules inserted. The rule base contains 510 rules. 82 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_25130 = K[Sess = Sess_25118,Cli = A[],!1 = @sid_25120]

1. The attacker has some term Sess_25118.
attacker(Sess_25118).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_25118.
Using the function 2-tuple the attacker may obtain (A[],Sess_25118).
attacker((A[],Sess_25118)).

4. The message (A[],Sess_25118) that the attacker may have by 3 may be received at input {7}.
We have Sess_25118 <> B[] & Sess_25118 <> A[].
So the message K_25130 may be sent to the attacker at output {15}.
attacker(K_25130).

5. By 1, the attacker may know Sess_25118.
Using the function sk the attacker may obtain sk(Sess_25118).
attacker(sk(Sess_25118)).

6. The attacker has some term Ns_25119.
attacker(Ns_25119).

7. By 5, the attacker may know sk(Sess_25118).
Using the function pub the attacker may obtain pub(sk(Sess_25118)).
attacker(pub(sk(Sess_25118))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_25118)).
By 6, the attacker may know Ns_25119.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119).
attacker((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)).
attacker(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)).
By 5, the attacker may know sk(Sess_25118).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119).
By 4, the attacker may know K_25130.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130).
attacker(senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130),sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130),sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118)))).

14. The message (A[],Sess_25118) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119),K_25130),sign(h((CreateSessionResponse,pub(sk(Sess_25118)),Ns_25119)),sk(Sess_25118))) that the attacker may have by 13 may be received at input {19}.
We have Sess_25118 <> B[] & Sess_25118 <> A[].
So the message (senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130),sign(h((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130),sign(h((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130),sign(h((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130).
attacker(senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])),K_25130).
By 4, the attacker may know K_25130.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_25118,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_25234 at {6} in copy a_25131

in(c, (A,a)) at {7} in copy a_25131

new K creating K_25133 at {12} in copy a_25131

out(ch_25234, (A,a,K_25133)) at {13} in copy a_25131 received at {30} in copy a_25131

out(c, K_25133) at {15} in copy a_25131

new Nc creating Nc_25416 at {16} in copy a_25131

out(c, (senc((CreateSessionRequest,pub(skA),Nc_25416),K_25133),sign(h((CreateSessionRequest,pub(skA),Nc_25416)),skA))) at {18} in copy a_25131

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_25132),K_25133),sign(h((CreateSessionResponse,pub(sk(a)),a_25132)),sk(a)))) at {19} in copy a_25131

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {23} in copy a_25131

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),K_25133),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_25131

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 147 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 130 rules in the queue.
600 rules inserted. The rule base contains 366 rules. 103 rules in the queue.
800 rules inserted. The rule base contains 422 rules. 67 rules in the queue.
1000 rules inserted. The rule base contains 510 rules. 82 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_36026 = K[Sess = Sess_36014,Cli = A[],!1 = @sid_36016]

1. The attacker has some term Sess_36014.
attacker(Sess_36014).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36014.
Using the function 2-tuple the attacker may obtain (A[],Sess_36014).
attacker((A[],Sess_36014)).

4. The message (A[],Sess_36014) that the attacker may have by 3 may be received at input {7}.
We have Sess_36014 <> B[] & Sess_36014 <> A[].
So the message K_36026 may be sent to the attacker at output {15}.
attacker(K_36026).

5. By 1, the attacker may know Sess_36014.
Using the function sk the attacker may obtain sk(Sess_36014).
attacker(sk(Sess_36014)).

6. The attacker has some term Ns_36015.
attacker(Ns_36015).

7. By 5, the attacker may know sk(Sess_36014).
Using the function pub the attacker may obtain pub(sk(Sess_36014)).
attacker(pub(sk(Sess_36014))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_36014)).
By 6, the attacker may know Ns_36015.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015).
attacker((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)).
By 5, the attacker may know sk(Sess_36014).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015).
By 4, the attacker may know K_36026.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026).
attacker(senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026),sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026),sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014)))).

14. The message (A[],Sess_36014) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015),K_36026),sign(h((CreateSessionResponse,pub(sk(Sess_36014)),Ns_36015)),sk(Sess_36014))) that the attacker may have by 13 may be received at input {19}.
We have Sess_36014 <> B[] & Sess_36014 <> A[].
So the message (senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026),sign(h((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026),sign(h((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026),sign(h((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026).
attacker(senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36026).
By 4, the attacker may know K_36026.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_36014,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_36132 at {6} in copy a_36028

in(c, (A,a_36027)) at {7} in copy a_36028

new K creating K_36030 at {12} in copy a_36028

out(ch_36132, (A,a_36027,K_36030)) at {13} in copy a_36028 received at {30} in copy a_36028

out(c, K_36030) at {15} in copy a_36028

new Nc creating Nc_36314 at {16} in copy a_36028

out(c, (senc((CreateSessionRequest,pub(skA),Nc_36314),K_36030),sign(h((CreateSessionRequest,pub(skA),Nc_36314)),skA))) at {18} in copy a_36028

in(c, (senc((CreateSessionResponse,pub(sk(a_36027)),a_36029),K_36030),sign(h((CreateSessionResponse,pub(sk(a_36027)),a_36029)),sk(a_36027)))) at {19} in copy a_36028

event(beginCli(A,a_36027,(Login(skA),Passwd(skA)))) at {23} in copy a_36028

out(c, (senc((ActivateSessionRequest,a_36027,pub(skA),Login(skA),Passwd(skA)),K_36030),sign(h((ActivateSessionRequest,a_36027,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_36028

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
