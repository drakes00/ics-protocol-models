File "opcua_session_sign_encrypt_sign_encrypt.pv", line 108, character 41 - line 108, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=Cli,=pkSess,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {33}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {34}let pkCli_63: bitstring = pub(skCli_62) in
    {35}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {36}let pkSess_65: bitstring = pub(skSess_64) in
    {37}in(c, (em1: bitstring,sigM1: bitstring));
    {38}new Nc_66: bitstring;
    {39}let m1_67: bitstring = sdec(em1,K_61) in
    {40}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {41}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {42}new Ns_69: bitstring;
        {43}event beginSrv(Sess_60,Cli_59,Ns_69);
        {44}let m2_70: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Ns_69) in
        {45}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {46}in(c, (em3: bitstring,sigM3: bitstring));
        {47}let m3_71: bitstring = sdec(em3,K_61) in
        {48}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {49}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {50}new Ns2_72: bitstring;
            {51}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {52}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)));
            {53}if ((Cli_59 = A) || (Cli_59 = B)) then
            {54}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 163 rules. 94 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 125 rules in the queue.
600 rules inserted. The rule base contains 406 rules. 134 rules in the queue.
800 rules inserted. The rule base contains 516 rules. 18 rules in the queue.
1000 rules inserted. The rule base contains 640 rules. 102 rules in the queue.
1200 rules inserted. The rule base contains 762 rules. 44 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: begin(beginSrv(A[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_15934])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_15934]),K[Sess = A[],Cli = B[],!1 = @sid_15934]),K_61 = K[Sess = A[],Cli = B[],!1 = @sid_15934],Sess_60 = A[],Cli_59 = B[],!1 = @sid_15934])) -> end(endCli(A[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_15934])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = A[],Cli = B[],!1 = @sid_15934]),K[Sess = A[],Cli = B[],!1 = @sid_15934]),K_61 = K[Sess = A[],Cli = B[],!1 = @sid_15934],Sess_60 = A[],Cli_59 = B[],!1 = @sid_15934]))
goal reachable: begin(beginSrv(B[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_15935])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_15935]),K[Sess = B[],Cli = A[],!1 = @sid_15935]),K_61 = K[Sess = B[],Cli = A[],!1 = @sid_15935],Sess_60 = B[],Cli_59 = A[],!1 = @sid_15935])) -> end(endCli(B[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_15935])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = B[],Cli = A[],!1 = @sid_15935]),K[Sess = B[],Cli = A[],!1 = @sid_15935]),K_61 = K[Sess = B[],Cli = A[],!1 = @sid_15935],Sess_60 = B[],Cli_59 = A[],!1 = @sid_15935]))
goal reachable: begin(beginSrv(B[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_15936])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_15936]),K[Sess = B[],Cli = B[],!1 = @sid_15936]),K_61 = K[Sess = B[],Cli = B[],!1 = @sid_15936],Sess_60 = B[],Cli_59 = B[],!1 = @sid_15936])) -> end(endCli(B[],B[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_15936])),skB[]),em1 = senc((CreateSessionRequest,pub(skB[]),Nc[Sess = B[],Cli = B[],!1 = @sid_15936]),K[Sess = B[],Cli = B[],!1 = @sid_15936]),K_61 = K[Sess = B[],Cli = B[],!1 = @sid_15936],Sess_60 = B[],Cli_59 = B[],!1 = @sid_15936]))
goal reachable: begin(beginSrv(A[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_15937])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_15937]),K[Sess = A[],Cli = A[],!1 = @sid_15937]),K_61 = K[Sess = A[],Cli = A[],!1 = @sid_15937],Sess_60 = A[],Cli_59 = A[],!1 = @sid_15937])) -> end(endCli(A[],A[],Ns_69[sigM1 = sign(h((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_15937])),skA[]),em1 = senc((CreateSessionRequest,pub(skA[]),Nc[Sess = A[],Cli = A[],!1 = @sid_15937]),K[Sess = A[],Cli = A[],!1 = @sid_15937]),K_61 = K[Sess = A[],Cli = A[],!1 = @sid_15937],Sess_60 = A[],Cli_59 = A[],!1 = @sid_15937]))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_15941,Y_15942,N_15943)) ==> event(beginCli(X_15941,Y_15942,N_15943))
Completing...
200 rules inserted. The rule base contains 160 rules. 94 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 136 rules in the queue.
600 rules inserted. The rule base contains 413 rules. 159 rules in the queue.
800 rules inserted. The rule base contains 476 rules. 50 rules in the queue.
1000 rules inserted. The rule base contains 612 rules. 113 rules in the queue.
1200 rules inserted. The rule base contains 728 rules. 85 rules in the queue.
Starting query event(endSrv(X_15941,Y_15942,N_15943)) ==> event(beginCli(X_15941,Y_15942,N_15943))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X_15941,Y_15942,N_15943)) ==> event(beginCli(X_15941,Y_15942,N_15943)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 152 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 122 rules in the queue.
600 rules inserted. The rule base contains 370 rules. 104 rules in the queue.
800 rules inserted. The rule base contains 426 rules. 66 rules in the queue.
1000 rules inserted. The rule base contains 514 rules. 82 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_41549 = K[Sess = Sess_41537,Cli = A[],!1 = @sid_41539]

1. The attacker has some term Sess_41537.
attacker(Sess_41537).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_41537.
Using the function 2-tuple the attacker may obtain (A[],Sess_41537).
attacker((A[],Sess_41537)).

4. The message (A[],Sess_41537) that the attacker may have by 3 may be received at input {7}.
We have Sess_41537 <> B[] & Sess_41537 <> A[].
So the message K_41549 may be sent to the attacker at output {15}.
attacker(K_41549).

5. By 1, the attacker may know Sess_41537.
Using the function sk the attacker may obtain sk(Sess_41537).
attacker(sk(Sess_41537)).

6. The attacker has some term Ns_41538.
attacker(Ns_41538).

7. By 5, the attacker may know sk(Sess_41537).
Using the function pub the attacker may obtain pub(sk(Sess_41537)).
attacker(pub(sk(Sess_41537))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 7, the attacker may know pub(sk(Sess_41537)).
By 6, the attacker may know Ns_41538.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538).
attacker((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)).

10. By 9, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538))).

11. By 10, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)).
By 5, the attacker may know sk(Sess_41537).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537))).

12. By 9, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538).
By 4, the attacker may know K_41549.
Using the function senc the attacker may obtain senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549).
attacker(senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549)).

13. By 12, the attacker may know senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549).
By 11, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549),sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537))).
attacker((senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549),sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537)))).

14. The message (A[],Sess_41537) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538),K_41549),sign(h((CreateSessionResponse,A[],pub(sk(Sess_41537)),Ns_41538)),sk(Sess_41537))) that the attacker may have by 13 may be received at input {19}.
We have Sess_41537 <> B[] & Sess_41537 <> A[].
So the message (senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549),sign(h((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549),sign(h((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549),sign(h((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549).
attacker(senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])),K_41549).
By 4, the attacker may know K_41549.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_41537,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_41653 at {6} in copy a_41550

in(c, (A,a)) at {7} in copy a_41550

new K creating K_41552 at {12} in copy a_41550

out(ch_41653, (A,a,K_41552)) at {13} in copy a_41550 received at {32} in copy a_41550

out(c, K_41552) at {15} in copy a_41550

new Nc creating Nc_41835 at {16} in copy a_41550

out(c, (senc((CreateSessionRequest,pub(skA),Nc_41835),K_41552),sign(h((CreateSessionRequest,pub(skA),Nc_41835)),skA))) at {18} in copy a_41550

in(c, (senc((CreateSessionResponse,A,pub(sk(a)),a_41551),K_41552),sign(h((CreateSessionResponse,A,pub(sk(a)),a_41551)),sk(a)))) at {19} in copy a_41550

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {23} in copy a_41550

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),K_41552),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_41550

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 152 rules. 90 rules in the queue.
400 rules inserted. The rule base contains 306 rules. 122 rules in the queue.
600 rules inserted. The rule base contains 370 rules. 104 rules in the queue.
800 rules inserted. The rule base contains 426 rules. 66 rules in the queue.
1000 rules inserted. The rule base contains 514 rules. 82 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_52852 = K[Sess = Sess_52840,Cli = A[],!1 = @sid_52842]

1. The attacker has some term Sess_52840.
attacker(Sess_52840).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_52840.
Using the function 2-tuple the attacker may obtain (A[],Sess_52840).
attacker((A[],Sess_52840)).

4. The message (A[],Sess_52840) that the attacker may have by 3 may be received at input {7}.
We have Sess_52840 <> B[] & Sess_52840 <> A[].
So the message K_52852 may be sent to the attacker at output {15}.
attacker(K_52852).

5. By 1, the attacker may know Sess_52840.
Using the function sk the attacker may obtain sk(Sess_52840).
attacker(sk(Sess_52840)).

6. The attacker has some term Ns_52841.
attacker(Ns_52841).

7. By 5, the attacker may know sk(Sess_52840).
Using the function pub the attacker may obtain pub(sk(Sess_52840)).
attacker(pub(sk(Sess_52840))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 7, the attacker may know pub(sk(Sess_52840)).
By 6, the attacker may know Ns_52841.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841).
attacker((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)).

10. By 9, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841))).

11. By 10, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)).
By 5, the attacker may know sk(Sess_52840).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840))).

12. By 9, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841).
By 4, the attacker may know K_52852.
Using the function senc the attacker may obtain senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852).
attacker(senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852)).

13. By 12, the attacker may know senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852).
By 11, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852),sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840))).
attacker((senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852),sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840)))).

14. The message (A[],Sess_52840) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841),K_52852),sign(h((CreateSessionResponse,A[],pub(sk(Sess_52840)),Ns_52841)),sk(Sess_52840))) that the attacker may have by 13 may be received at input {19}.
We have Sess_52840 <> B[] & Sess_52840 <> A[].
So the message (senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852),sign(h((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852),sign(h((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852),sign(h((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852).
attacker(senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])),K_52852).
By 4, the attacker may know K_52852.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_52840,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_52958 at {6} in copy a_52854

in(c, (A,a_52853)) at {7} in copy a_52854

new K creating K_52856 at {12} in copy a_52854

out(ch_52958, (A,a_52853,K_52856)) at {13} in copy a_52854 received at {32} in copy a_52854

out(c, K_52856) at {15} in copy a_52854

new Nc creating Nc_53140 at {16} in copy a_52854

out(c, (senc((CreateSessionRequest,pub(skA),Nc_53140),K_52856),sign(h((CreateSessionRequest,pub(skA),Nc_53140)),skA))) at {18} in copy a_52854

in(c, (senc((CreateSessionResponse,A,pub(sk(a_52853)),a_52855),K_52856),sign(h((CreateSessionResponse,A,pub(sk(a_52853)),a_52855)),sk(a_52853)))) at {19} in copy a_52854

event(beginCli(A,a_52853,(Login(skA),Passwd(skA)))) at {23} in copy a_52854

out(c, (senc((ActivateSessionRequest,a_52853,pub(skA),Login(skA),Passwd(skA)),K_52856),sign(h((ActivateSessionRequest,a_52853,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_52854

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
