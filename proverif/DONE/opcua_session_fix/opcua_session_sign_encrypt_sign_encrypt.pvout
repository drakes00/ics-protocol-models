Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {14}in(c, (em2: bitstring,sigM2: bitstring));
    {15}let m2: bitstring = sdec(em2,K) in
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {18}new CSC: bitstring;
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (CSC,Sess,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}let m1_66: bitstring = sdec(em1,K_65) in
    {35}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {36}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {37}new SSC_67: bitstring;
            {38}new Ns2_68: bitstring;
            {39}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {40}out(c, (senc(m2_69,K_65),sign(h(m2_69),skSess_63)));
            {41}in(c, (em3: bitstring,sigM3: bitstring));
            {42}let m3_70: bitstring = sdec(em3,K_65) in
            {43}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {44}let (CSC_71: bitstring,=Sess_60,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
                {45}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
                {46}let m4_72: bitstring = ActivateSessionResponse in
                {47}out(c, (senc(m4_72,K_65),sign(h(m4_72),skSess_63)))
) | (
    {48}!
    {49}in(c, (X: host,Y: host));
    {50}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {51}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {52}if ((X,Y) = (A,B)) then
        0
    else
        {53}if ((X,Y) = (B,A)) then
            0
        else
            {54}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 120 rules. 38 rules in the queue.
400 rules inserted. The rule base contains 190 rules. 28 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(B[],A[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],B[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],B[],(Login(skA[]),Passwd(skA[]))))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 32 rules in the queue.
400 rules inserted. The rule base contains 142 rules. 14 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 32 rules in the queue.
400 rules inserted. The rule base contains 142 rules. 14 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 32 rules in the queue.
400 rules inserted. The rule base contains 142 rules. 14 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_29254 = CSC[sigM2 = sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244)),em2 = senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))),Sess = Sess_29244,Cli = A[],!1 = @sid_29245]

1. The attacker has some term Sess_29244.
attacker(Sess_29244).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_29244.
Using the function 2-tuple the attacker may obtain (A[],Sess_29244).
attacker((A[],Sess_29244)).

4. The message (A[],Sess_29244) that the attacker may have by 3 may be received at input {49}.
We have Sess_29244 <> B[] & Sess_29244 <> A[].
So the message Skey(skA[],sk(Sess_29244)) may be sent to the attacker at output {54}.
attacker(Skey(skA[],sk(Sess_29244))).

5. By 1, the attacker may know Sess_29244.
Using the function sk the attacker may obtain sk(Sess_29244).
attacker(sk(Sess_29244)).

6. The attacker has some term Ns2_29243.
attacker(Ns2_29243).

7. The attacker has some term SSC_29242.
attacker(SSC_29242).

8. By 7, the attacker may know SSC_29242.
By 6, the attacker may know Ns2_29243.
Using the function 2-tuple the attacker may obtain (SSC_29242,Ns2_29243).
attacker((SSC_29242,Ns2_29243)).

9. By 8, the attacker may know (SSC_29242,Ns2_29243).
Using the function h the attacker may obtain h((SSC_29242,Ns2_29243)).
attacker(h((SSC_29242,Ns2_29243))).

10. By 9, the attacker may know h((SSC_29242,Ns2_29243)).
By 5, the attacker may know sk(Sess_29244).
Using the function sign the attacker may obtain sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244)).
attacker(sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244))).

11. By 8, the attacker may know (SSC_29242,Ns2_29243).
By 4, the attacker may know Skey(skA[],sk(Sess_29244)).
Using the function senc the attacker may obtain senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))).
attacker(senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244)))).

12. By 11, the attacker may know senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))).
By 10, the attacker may know sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244)).
Using the function 2-tuple the attacker may obtain (senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))),sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244))).
attacker((senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))),sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244)))).

13. The message (A[],Sess_29244) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_29242,Ns2_29243),Skey(skA[],sk(Sess_29244))),sign(h((SSC_29242,Ns2_29243)),sk(Sess_29244))) that the attacker may have by 12 may be received at input {14}.
We have Sess_29244 <> B[] & Sess_29244 <> A[].
So the message (senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244))),sign(h((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244))),sign(h((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244))),sign(h((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244))).
attacker(senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244)))).

15. By 14, the attacker may know senc((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29244))).
By 4, the attacker may know Skey(skA[],sk(Sess_29244)).
Using the function sdec the attacker may obtain (CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])).
attacker((CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_29254,Sess_29244,Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_29256)) at {6} in copy a_29257

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_29256))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_29257

in(c, (A,a_29256)) at {49} in copy a_29258

out(c, Skey(skA,sk(a_29256))) at {54} in copy a_29258

in(c, (senc((a,a_29255),Skey(skA,sk(a_29256))),sign(h((a,a_29255)),sk(a_29256)))) at {14} in copy a_29257

new CSC creating CSC_29259 at {18} in copy a_29257

event(beginCli(A,a_29256,(Login(skA),Passwd(skA)))) at {19} in copy a_29257

out(c, (senc((CSC_29259,a_29256,Login(skA),Passwd(skA)),Skey(skA,sk(a_29256))),sign(h((CSC_29259,a_29256,Login(skA),Passwd(skA))),skA))) at {21} in copy a_29257

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 112 rules. 32 rules in the queue.
400 rules inserted. The rule base contains 142 rules. 14 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_36592 = CSC[sigM2 = sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582)),em2 = senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))),Sess = Sess_36582,Cli = A[],!1 = @sid_36583]

1. The attacker has some term Sess_36582.
attacker(Sess_36582).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36582.
Using the function 2-tuple the attacker may obtain (A[],Sess_36582).
attacker((A[],Sess_36582)).

4. The message (A[],Sess_36582) that the attacker may have by 3 may be received at input {49}.
We have Sess_36582 <> B[] & Sess_36582 <> A[].
So the message Skey(skA[],sk(Sess_36582)) may be sent to the attacker at output {54}.
attacker(Skey(skA[],sk(Sess_36582))).

5. By 1, the attacker may know Sess_36582.
Using the function sk the attacker may obtain sk(Sess_36582).
attacker(sk(Sess_36582)).

6. The attacker has some term Ns2_36581.
attacker(Ns2_36581).

7. The attacker has some term SSC_36580.
attacker(SSC_36580).

8. By 7, the attacker may know SSC_36580.
By 6, the attacker may know Ns2_36581.
Using the function 2-tuple the attacker may obtain (SSC_36580,Ns2_36581).
attacker((SSC_36580,Ns2_36581)).

9. By 8, the attacker may know (SSC_36580,Ns2_36581).
Using the function h the attacker may obtain h((SSC_36580,Ns2_36581)).
attacker(h((SSC_36580,Ns2_36581))).

10. By 9, the attacker may know h((SSC_36580,Ns2_36581)).
By 5, the attacker may know sk(Sess_36582).
Using the function sign the attacker may obtain sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582)).
attacker(sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582))).

11. By 8, the attacker may know (SSC_36580,Ns2_36581).
By 4, the attacker may know Skey(skA[],sk(Sess_36582)).
Using the function senc the attacker may obtain senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))).
attacker(senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582)))).

12. By 11, the attacker may know senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))).
By 10, the attacker may know sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582)).
Using the function 2-tuple the attacker may obtain (senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))),sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582))).
attacker((senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))),sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582)))).

13. The message (A[],Sess_36582) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_36580,Ns2_36581),Skey(skA[],sk(Sess_36582))),sign(h((SSC_36580,Ns2_36581)),sk(Sess_36582))) that the attacker may have by 12 may be received at input {14}.
We have Sess_36582 <> B[] & Sess_36582 <> A[].
So the message (senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582))),sign(h((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582))),sign(h((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582))),sign(h((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582))).
attacker(senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582)))).

15. By 14, the attacker may know senc((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36582))).
By 4, the attacker may know Skey(skA[],sk(Sess_36582)).
Using the function sdec the attacker may obtain (CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])).
attacker((CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_36592,Sess_36582,Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_36595)) at {6} in copy a_36596

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_36595))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_36596

in(c, (A,a_36595)) at {49} in copy a_36597

out(c, Skey(skA,sk(a_36595))) at {54} in copy a_36597

in(c, (senc((a_36593,a_36594),Skey(skA,sk(a_36595))),sign(h((a_36593,a_36594)),sk(a_36595)))) at {14} in copy a_36596

new CSC creating CSC_36598 at {18} in copy a_36596

event(beginCli(A,a_36595,(Login(skA),Passwd(skA)))) at {19} in copy a_36596

out(c, (senc((CSC_36598,a_36595,Login(skA),Passwd(skA)),Skey(skA,sk(a_36595))),sign(h((CSC_36598,a_36595,Login(skA),Passwd(skA))),skA))) at {21} in copy a_36596

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
