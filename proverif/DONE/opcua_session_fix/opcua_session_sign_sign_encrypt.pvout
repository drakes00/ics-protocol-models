File "opcua_session_sign_sign_encrypt.pv", line 101, character 41 - line 101, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (m1,sign(h(m1),skCli)));
    {19}in(c, (m2: bitstring,sigM2: bitstring));
    {20}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {21}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {22}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {23}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {24}out(c, (m3,sign(h(m3),skCli)));
        {25}in(c, (m4: bitstring,sigM4: bitstring));
        {26}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {27}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}new Nc_66: bitstring;
    {35}let m1_67: bitstring = sdec(em1,K_61) in
    {36}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {38}new Ns_69: bitstring;
        {39}let m2_70: bitstring = (CreateSessionResponse,pkSess_65,Ns_69) in
        {40}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {41}in(c, (em3: bitstring,sigM3: bitstring));
        {42}let m3_71: bitstring = sdec(em3,K_61) in
        {43}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {44}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {45}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {46}new Ns2_72: bitstring;
            {47}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {48}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 144 rules. 74 rules in the queue.
400 rules inserted. The rule base contains 250 rules. 116 rules in the queue.
600 rules inserted. The rule base contains 314 rules. 125 rules in the queue.
800 rules inserted. The rule base contains 429 rules. 36 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 139 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 235 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 277 rules. 87 rules in the queue.
800 rules inserted. The rule base contains 337 rules. 32 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_18676.
attacker(Sess_18676).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_18676.
Using the function 2-tuple the attacker may obtain (A[],Sess_18676).
attacker((A[],Sess_18676)).

4. By 1, the attacker may know Sess_18676.
Using the function sk the attacker may obtain sk(Sess_18676).
attacker(sk(Sess_18676)).

5. The attacker has some term Ns_18677.
attacker(Ns_18677).

6. By 4, the attacker may know sk(Sess_18676).
Using the function pub the attacker may obtain pub(sk(Sess_18676)).
attacker(pub(sk(Sess_18676))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_18676)).
By 5, the attacker may know Ns_18677.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677).
attacker((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)).
attacker(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)).
By 4, the attacker may know sk(Sess_18676).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677),sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676))).
attacker(((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677),sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676)))).

12. The message (A[],Sess_18676) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677),sign(h((CreateSessionResponse,pub(sk(Sess_18676)),Ns_18677)),sk(Sess_18676))) that the attacker may have by 11 may be received at input {19}.
We have Sess_18676 <> B[] & Sess_18676 <> A[].
So the message ((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,Sess_18676,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_18782 at {6} in copy a_18687

in(c, (A,a)) at {7} in copy a_18687

new K creating K_18868 at {12} in copy a_18687

out(ch_18782, (A,a,K_18868)) at {13} in copy a_18687 received at {28} in copy a_18687

out(c, K_18868) at {15} in copy a_18687

new Nc creating Nc_18953 at {16} in copy a_18687

out(c, ((CreateSessionRequest,pub(skA),Nc_18953),sign(h((CreateSessionRequest,pub(skA),Nc_18953)),skA))) at {18} in copy a_18687

in(c, ((CreateSessionResponse,pub(sk(a)),a_18686),sign(h((CreateSessionResponse,pub(sk(a)),a_18686)),sk(a)))) at {19} in copy a_18687

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {22} in copy a_18687

out(c, ((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_18687

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 139 rules. 68 rules in the queue.
400 rules inserted. The rule base contains 235 rules. 94 rules in the queue.
600 rules inserted. The rule base contains 277 rules. 87 rules in the queue.
800 rules inserted. The rule base contains 337 rules. 32 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_27269.
attacker(Sess_27269).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_27269.
Using the function 2-tuple the attacker may obtain (A[],Sess_27269).
attacker((A[],Sess_27269)).

4. By 1, the attacker may know Sess_27269.
Using the function sk the attacker may obtain sk(Sess_27269).
attacker(sk(Sess_27269)).

5. The attacker has some term Ns_27270.
attacker(Ns_27270).

6. By 4, the attacker may know sk(Sess_27269).
Using the function pub the attacker may obtain pub(sk(Sess_27269)).
attacker(pub(sk(Sess_27269))).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 6, the attacker may know pub(sk(Sess_27269)).
By 5, the attacker may know Ns_27270.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270).
attacker((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)).

9. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)).
attacker(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270))).

10. By 9, the attacker may know h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)).
By 4, the attacker may know sk(Sess_27269).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269))).

11. By 8, the attacker may know (CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270).
By 10, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269)).
Using the function 2-tuple the attacker may obtain ((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270),sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269))).
attacker(((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270),sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269)))).

12. The message (A[],Sess_27269) that the attacker may have by 3 may be received at input {7}.
The message ((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270),sign(h((CreateSessionResponse,pub(sk(Sess_27269)),Ns_27270)),sk(Sess_27269))) that the attacker may have by 11 may be received at input {19}.
We have Sess_27269 <> B[] & Sess_27269 <> A[].
So the message ((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {24}.
attacker(((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

13. By 12, the attacker may know ((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[])),sign(h((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain (ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[]))).

14. By 13, the attacker may know (ActivateSessionRequest,Sess_27269,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_27377 at {6} in copy a_27281

in(c, (A,a_27279)) at {7} in copy a_27281

new K creating K_27463 at {12} in copy a_27281

out(ch_27377, (A,a_27279,K_27463)) at {13} in copy a_27281 received at {28} in copy a_27281

out(c, K_27463) at {15} in copy a_27281

new Nc creating Nc_27548 at {16} in copy a_27281

out(c, ((CreateSessionRequest,pub(skA),Nc_27548),sign(h((CreateSessionRequest,pub(skA),Nc_27548)),skA))) at {18} in copy a_27281

in(c, ((CreateSessionResponse,pub(sk(a_27279)),a_27280),sign(h((CreateSessionResponse,pub(sk(a_27279)),a_27280)),sk(a_27279)))) at {19} in copy a_27281

event(beginCli(A,a_27279,(Login(skA),Passwd(skA)))) at {22} in copy a_27281

out(c, ((ActivateSessionRequest,a_27279,pub(skA),Login(skA),Passwd(skA)),sign(h((ActivateSessionRequest,a_27279,pub(skA),Login(skA),Passwd(skA))),skA))) at {24} in copy a_27281

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
