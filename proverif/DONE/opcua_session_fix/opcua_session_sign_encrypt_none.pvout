Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {15}in(c, (em2: bitstring,sigM2: bitstring));
    {16}let m2: bitstring = sdec(em2,K) in
    {17}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {18}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, m1_66: bitstring);
    {34}let (=CreateSessionRequest,=pkCli_62,Nc_67: bitstring) = m1_66 in
    {35}new Ns_68: bitstring;
    {36}let m2_69: bitstring = (CreateSessionResponse,pkSess_64,Ns_68) in
    {37}out(c, m2_69);
    {38}in(c, m3_70: bitstring);
    {39}let (=ActivateSessionRequest,=Sess_60,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
    {40}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
    {41}new Ns2_71: bitstring;
    {42}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
    {43}out(c, m4_72)
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}if (X = Y) then
        0
    else
        {47}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {48}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {49}if ((X,Y) = (A,B)) then
            0
        else
            {50}if ((X,Y) = (B,A)) then
                0
            else
                {51}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 109 rules. 8 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Sess_6221 <> B[] && Sess_6221 <> A[] && begin(beginCli(B[],Sess_6221,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_6221) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The attacker has some term Nc_6312.
attacker(Nc_6312).

5. The message pub(skB[]) may be sent to the attacker at output {4}.
attacker(pub(skB[])).

6. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

7. By 6, the attacker may know CreateSessionRequest.
By 5, the attacker may know pub(skB[]).
By 4, the attacker may know Nc_6312.
Using the function 3-tuple the attacker may obtain (CreateSessionRequest,pub(skB[]),Nc_6312).
attacker((CreateSessionRequest,pub(skB[]),Nc_6312)).

8. We assume as hypothesis that
attacker(Sess_6253).

9. By 2, the attacker may know B[].
By 8, the attacker may know Sess_6253.
Using the function 2-tuple the attacker may obtain (B[],Sess_6253).
attacker((B[],Sess_6253)).

10. The message (B[],Sess_6253) that the attacker may have by 9 may be received at input {45}.
We have Sess_6253 <> A[] & Sess_6253 <> B[].
So the message Skey(skB[],sk(Sess_6253)) may be sent to the attacker at output {51}.
attacker(Skey(skB[],sk(Sess_6253))).

11. By 8, the attacker may know Sess_6253.
Using the function sk the attacker may obtain sk(Sess_6253).
attacker(sk(Sess_6253)).

12. The attacker has some term Ns_6254.
attacker(Ns_6254).

13. By 11, the attacker may know sk(Sess_6253).
Using the function pub the attacker may obtain pub(sk(Sess_6253)).
attacker(pub(sk(Sess_6253))).

14. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

15. By 14, the attacker may know CreateSessionResponse.
By 13, the attacker may know pub(sk(Sess_6253)).
By 12, the attacker may know Ns_6254.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254).
attacker((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)).

16. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)).
attacker(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254))).

17. By 16, the attacker may know h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)).
By 11, the attacker may know sk(Sess_6253).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253))).

18. By 15, the attacker may know (CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254).
By 10, the attacker may know Skey(skB[],sk(Sess_6253)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253)))).

19. By 18, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253))).
By 17, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253))),sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253))),sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253)))).

20. The message (B[],Sess_6253) that the attacker may have by 9 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254),Skey(skB[],sk(Sess_6253))),sign(h((CreateSessionResponse,pub(sk(Sess_6253)),Ns_6254)),sk(Sess_6253))) that the attacker may have by 19 may be received at input {15}.
The event beginCli(B[],Sess_6253,(Login(skB[]),Passwd(skB[]))) may be executed at {19}.
We have Sess_6253 <> B[] & Sess_6253 <> A[].
So the message (senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253))),sign(h((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253))),sign(h((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[]))).

21. By 20, the attacker may know (senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253))),sign(h((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[]))),skB[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253))).
attacker(senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253)))).

22. By 21, the attacker may know senc((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])),Skey(skB[],sk(Sess_6253))).
By 10, the attacker may know Skey(skB[],sk(Sess_6253)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[]))).

23. By 22, the attacker may know (ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

24. By 22, the attacker may know (ActivateSessionRequest,Sess_6253,pub(skB[]),Login(skB[]),Passwd(skB[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

25. Using the function ActivateSessionRequest the attacker may obtain ActivateSessionRequest.
attacker(ActivateSessionRequest).

26. By 25, the attacker may know ActivateSessionRequest.
By 1, the attacker may know A[].
By 5, the attacker may know pub(skB[]).
By 24, the attacker may know Login(skB[]).
By 23, the attacker may know Passwd(skB[]).
Using the function 5-tuple the attacker may obtain (ActivateSessionRequest,A[],pub(skB[]),Login(skB[]),Passwd(skB[])).
attacker((ActivateSessionRequest,A[],pub(skB[]),Login(skB[]),Passwd(skB[]))).

27. The message (B[],A[]) that the attacker may have by 3 may be received at input {27}.
The message (CreateSessionRequest,pub(skB[]),Nc_6312) that the attacker may have by 7 may be received at input {33}.
The message (ActivateSessionRequest,A[],pub(skB[]),Login(skB[]),Passwd(skB[])) that the attacker may have by 26 may be received at input {38}.
So event endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))) may be executed at {40}.
end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a)) at {6} in copy a_6318

new Nc creating Nc_6529 at {12} in copy a_6318

out(c, (senc((CreateSessionRequest,pub(skB),Nc_6529),Skey(skB,sk(a))),sign(h((CreateSessionRequest,pub(skB),Nc_6529)),skB))) at {14} in copy a_6318

in(c, (B,A)) at {27} in copy a_6321

in(c, (CreateSessionRequest,pub(skB),a_6320)) at {33} in copy a_6321

new Ns_68 creating Ns_6621 at {35} in copy a_6321

out(c, (CreateSessionResponse,pub(skA),Ns_6621)) at {37} in copy a_6321

in(c, (B,a)) at {45} in copy a_6319

out(c, Skey(skB,sk(a))) at {51} in copy a_6319

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_6317),Skey(skB,sk(a))),sign(h((CreateSessionResponse,pub(sk(a)),a_6317)),sk(a)))) at {15} in copy a_6318

event(beginCli(B,a,(Login(skB),Passwd(skB)))) at {19} in copy a_6318

out(c, (senc((ActivateSessionRequest,a,pub(skB),Login(skB),Passwd(skB)),Skey(skB,sk(a))),sign(h((ActivateSessionRequest,a,pub(skB),Login(skB),Passwd(skB))),skB))) at {21} in copy a_6318

in(c, (ActivateSessionRequest,A,pub(skB),Login(skB),Passwd(skB))) at {38} in copy a_6321

event(endSrv(B,A,(Login(skB),Passwd(skB)))) at {40} in copy a_6321

The event endSrv(B,A,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 99 rules. 4 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 99 rules. 4 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 99 rules. 4 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_23250.
attacker(Sess_23250).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_23250.
Using the function 2-tuple the attacker may obtain (A[],Sess_23250).
attacker((A[],Sess_23250)).

4. The message (A[],Sess_23250) that the attacker may have by 3 may be received at input {45}.
We have Sess_23250 <> B[] & Sess_23250 <> A[].
So the message Skey(skA[],sk(Sess_23250)) may be sent to the attacker at output {51}.
attacker(Skey(skA[],sk(Sess_23250))).

5. By 1, the attacker may know Sess_23250.
Using the function sk the attacker may obtain sk(Sess_23250).
attacker(sk(Sess_23250)).

6. The attacker has some term Ns_23251.
attacker(Ns_23251).

7. By 5, the attacker may know sk(Sess_23250).
Using the function pub the attacker may obtain pub(sk(Sess_23250)).
attacker(pub(sk(Sess_23250))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_23250)).
By 6, the attacker may know Ns_23251.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251).
attacker((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)).
attacker(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)).
By 5, the attacker may know sk(Sess_23250).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251).
By 4, the attacker may know Skey(skA[],sk(Sess_23250)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250))),sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250))),sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250)))).

14. The message (A[],Sess_23250) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251),Skey(skA[],sk(Sess_23250))),sign(h((CreateSessionResponse,pub(sk(Sess_23250)),Ns_23251)),sk(Sess_23250))) that the attacker may have by 13 may be received at input {15}.
We have Sess_23250 <> B[] & Sess_23250 <> A[].
So the message (senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250))),sign(h((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250))),sign(h((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250))),sign(h((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250))).
attacker(senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_23250))).
By 4, the attacker may know Skey(skA[],sk(Sess_23250)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_23250,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_23262)) at {6} in copy a_23264

new Nc creating Nc_23462 at {12} in copy a_23264

out(c, (senc((CreateSessionRequest,pub(skA),Nc_23462),Skey(skA,sk(a_23262))),sign(h((CreateSessionRequest,pub(skA),Nc_23462)),skA))) at {14} in copy a_23264

in(c, (A,a_23262)) at {45} in copy a_23265

out(c, Skey(skA,sk(a_23262))) at {51} in copy a_23265

in(c, (senc((CreateSessionResponse,pub(sk(a_23262)),a_23263),Skey(skA,sk(a_23262))),sign(h((CreateSessionResponse,pub(sk(a_23262)),a_23263)),sk(a_23262)))) at {15} in copy a_23264

event(beginCli(A,a_23262,(Login(skA),Passwd(skA)))) at {19} in copy a_23264

out(c, (senc((ActivateSessionRequest,a_23262,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_23262))),sign(h((ActivateSessionRequest,a_23262,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_23264

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 99 rules. 4 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_29078.
attacker(Sess_29078).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_29078.
Using the function 2-tuple the attacker may obtain (A[],Sess_29078).
attacker((A[],Sess_29078)).

4. The message (A[],Sess_29078) that the attacker may have by 3 may be received at input {45}.
We have Sess_29078 <> B[] & Sess_29078 <> A[].
So the message Skey(skA[],sk(Sess_29078)) may be sent to the attacker at output {51}.
attacker(Skey(skA[],sk(Sess_29078))).

5. By 1, the attacker may know Sess_29078.
Using the function sk the attacker may obtain sk(Sess_29078).
attacker(sk(Sess_29078)).

6. The attacker has some term Ns_29079.
attacker(Ns_29079).

7. By 5, the attacker may know sk(Sess_29078).
Using the function pub the attacker may obtain pub(sk(Sess_29078)).
attacker(pub(sk(Sess_29078))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_29078)).
By 6, the attacker may know Ns_29079.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079).
attacker((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)).
attacker(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)).
By 5, the attacker may know sk(Sess_29078).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079).
By 4, the attacker may know Skey(skA[],sk(Sess_29078)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078))),sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078))),sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078)))).

14. The message (A[],Sess_29078) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079),Skey(skA[],sk(Sess_29078))),sign(h((CreateSessionResponse,pub(sk(Sess_29078)),Ns_29079)),sk(Sess_29078))) that the attacker may have by 13 may be received at input {15}.
We have Sess_29078 <> B[] & Sess_29078 <> A[].
So the message (senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078))),sign(h((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078))),sign(h((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078))),sign(h((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078))).
attacker(senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_29078))).
By 4, the attacker may know Skey(skA[],sk(Sess_29078)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_29078,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_29090)) at {6} in copy a_29092

new Nc creating Nc_29290 at {12} in copy a_29092

out(c, (senc((CreateSessionRequest,pub(skA),Nc_29290),Skey(skA,sk(a_29090))),sign(h((CreateSessionRequest,pub(skA),Nc_29290)),skA))) at {14} in copy a_29092

in(c, (A,a_29090)) at {45} in copy a_29093

out(c, Skey(skA,sk(a_29090))) at {51} in copy a_29093

in(c, (senc((CreateSessionResponse,pub(sk(a_29090)),a_29091),Skey(skA,sk(a_29090))),sign(h((CreateSessionResponse,pub(sk(a_29090)),a_29091)),sk(a_29090)))) at {15} in copy a_29092

event(beginCli(A,a_29090,(Login(skA),Passwd(skA)))) at {19} in copy a_29092

out(c, (senc((ActivateSessionRequest,a_29090,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_29090))),sign(h((ActivateSessionRequest,a_29090,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_29092

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
