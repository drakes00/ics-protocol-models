File "opcua_session_none_sign_encrypt.pv", line 104, character 41 - line 104, character 43:
Warning: identifier Nc rebound
Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=Cli,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (em1: bitstring,sigM1: bitstring));
    {34}new Nc_66: bitstring;
    {35}let m1_67: bitstring = sdec(em1,K_61) in
    {36}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {38}new Ns_69: bitstring;
        {39}event beginSrv(Sess_60,Cli_59,Ns_69);
        {40}let m2_70: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Ns_69) in
        {41}out(c, (senc(m2_70,K_61),sign(h(m2_70),skSess_64)));
        {42}in(c, (em3: bitstring,sigM3: bitstring));
        {43}let m3_71: bitstring = sdec(em3,K_61) in
        {44}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {45}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_71 in
            {46}new Ns2_72: bitstring;
            {47}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {48}out(c, (senc(m4_73,K_61),sign(h(m4_73),skSess_64)));
            {49}if ((Cli_59 = A) || (Cli_59 = B)) then
            {50}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 128 rules. 36 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_6926) -> end(endCli(A[],B[],N_6926))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_6946).

5. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 2, the attacker may know B[].
By 5, the attacker may know pub(skA[]).
By 4, the attacker may know N_6946.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,B[],pub(skA[]),N_6946).
attacker((CreateSessionResponse,B[],pub(skA[]),N_6946)).

8. The attacker has some term Ns2_6941.
attacker(Ns2_6941).

9. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

10. By 9, the attacker may know ActivateSessionResponse.
By 8, the attacker may know Ns2_6941.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_6941).
attacker((ActivateSessionResponse,Ns2_6941)).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,B[],pub(skA[]),N_6946) that the attacker may have by 7 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_6941) that the attacker may have by 10 may be received at input {24}.
So event endCli(A[],B[],N_6946) may be executed at {27}.
end(endCli(A[],B[],N_6946)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_7037 at {6} in copy a_6948

in(c, (B,A)) at {7} in copy a_6948

new K creating K_7108 at {12} in copy a_6948

out(ch_7037, (B,A,K_7108)) at {13} in copy a_6948 received at {28} in copy a_6948

out(c, CreateSessionRequest) at {15} in copy a_6948

new Nc creating Nc_7208 at {16} in copy a_6948

out(c, (CreateSessionRequest,pub(skB),Nc_7208)) at {18} in copy a_6948

in(c, (CreateSessionResponse,B,pub(skA),a)) at {19} in copy a_6948

event(beginCli(B,A,(Login(skB),Passwd(skB)))) at {21} in copy a_6948

out(c, (ActivateSessionRequest,A,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_6948

in(c, (ActivateSessionResponse,a_6947)) at {24} in copy a_6948

event(endCli(A,B,a)) at {27} in copy a_6948

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_7237,Y_7238,N_7239)) ==> event(beginCli(X_7237,Y_7238,N_7239))
Completing...
200 rules inserted. The rule base contains 115 rules. 39 rules in the queue.
400 rules inserted. The rule base contains 234 rules. 36 rules in the queue.
Starting query event(endSrv(X_7237,Y_7238,N_7239)) ==> event(beginCli(X_7237,Y_7238,N_7239))
RESULT event(endSrv(X_7237,Y_7238,N_7239)) ==> event(beginCli(X_7237,Y_7238,N_7239)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 140 rules. 28 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_20652.
attacker(Ns_20652).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 1, the attacker may know A[].
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_20652.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(skA[]),Ns_20652).
attacker((CreateSessionResponse,A[],pub(skA[]),Ns_20652)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,A[],pub(skA[]),Ns_20652) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_20750 at {6} in copy a_20660

in(c, (A,A)) at {7} in copy a_20660

new K creating K_20821 at {12} in copy a_20660

out(ch_20750, (A,A,K_20821)) at {13} in copy a_20660 received at {28} in copy a_20660

out(c, CreateSessionRequest) at {15} in copy a_20660

new Nc creating Nc_20921 at {16} in copy a_20660

out(c, (CreateSessionRequest,pub(skA),Nc_20921)) at {18} in copy a_20660

in(c, (CreateSessionResponse,A,pub(skA),a_20659)) at {19} in copy a_20660

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_20660

out(c, (ActivateSessionRequest,A,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_20660

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 140 rules. 28 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_26751.
attacker(Ns_26751).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 1, the attacker may know A[].
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_26751.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(skA[]),Ns_26751).
attacker((CreateSessionResponse,A[],pub(skA[]),Ns_26751)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,A[],pub(skA[]),Ns_26751) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_26849 at {6} in copy a_26759

in(c, (A,A)) at {7} in copy a_26759

new K creating K_26920 at {12} in copy a_26759

out(ch_26849, (A,A,K_26920)) at {13} in copy a_26759 received at {28} in copy a_26759

out(c, CreateSessionRequest) at {15} in copy a_26759

new Nc creating Nc_27020 at {16} in copy a_26759

out(c, (CreateSessionRequest,pub(skA),Nc_27020)) at {18} in copy a_26759

in(c, (CreateSessionResponse,A,pub(skA),a_26758)) at {19} in copy a_26759

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_26759

out(c, (ActivateSessionRequest,A,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_26759

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
