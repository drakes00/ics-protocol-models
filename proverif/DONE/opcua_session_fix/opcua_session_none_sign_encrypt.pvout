Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {18}let m3: bitstring = (CSC,Sess,Login(skCli),Passwd(skCli)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, (em1: bitstring,sigM1: bitstring));
    {30}let m1_66: bitstring = sdec(em1,K_65) in
    {31}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {32}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {33}new SSC_67: bitstring;
            {34}new Ns2_68: bitstring;
            {35}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {36}out(c, (senc(m2_69,K_65),sign(h(m2_69),skSess_63)));
            {37}in(c, (em3: bitstring,sigM3: bitstring));
            {38}let m3_70: bitstring = sdec(em3,K_65) in
            {39}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {40}let (CSC_71: bitstring,=Sess_60,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
                {41}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
                {42}let m4_72: bitstring = ActivateSessionResponse in
                {43}out(c, (senc(m4_72,K_65),sign(h(m4_72),skSess_63)))
) | (
    {44}!
    {45}in(c, (X: host,Y: host));
    {46}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {47}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {48}if ((X,Y) = (A,B)) then
        0
    else
        {49}if ((X,Y) = (B,A)) then
            0
        else
            {50}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 137 rules. 26 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 126 rules. 12 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 126 rules. 12 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 126 rules. 12 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_21979 = CSC[m2 = (SSC_21972,Ns2_21973),Sess = A[],Cli = A[],!1 = @sid_21974]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns2_21973.
attacker(Ns2_21973).

4. The attacker has some term SSC_21972.
attacker(SSC_21972).

5. By 4, the attacker may know SSC_21972.
By 3, the attacker may know Ns2_21973.
Using the function 2-tuple the attacker may obtain (SSC_21972,Ns2_21973).
attacker((SSC_21972,Ns2_21973)).

6. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (SSC_21972,Ns2_21973) that the attacker may have by 5 may be received at input {14}.
So the message (CSC_21979,A[],Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((CSC_21979,A[],Login(skA[]),Passwd(skA[]))).

7. By 6, the attacker may know (CSC_21979,A[],Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_21981

out(c, CreateSessionRequest) at {13} in copy a_21981

in(c, (a,a_21980)) at {14} in copy a_21981

new CSC creating CSC_21982 at {16} in copy a_21981

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_21981

out(c, (CSC_21982,A,Login(skA),Passwd(skA))) at {19} in copy a_21981

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 126 rules. 12 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_27510 = CSC[m2 = (SSC_27503,Ns2_27504),Sess = A[],Cli = A[],!1 = @sid_27505]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns2_27504.
attacker(Ns2_27504).

4. The attacker has some term SSC_27503.
attacker(SSC_27503).

5. By 4, the attacker may know SSC_27503.
By 3, the attacker may know Ns2_27504.
Using the function 2-tuple the attacker may obtain (SSC_27503,Ns2_27504).
attacker((SSC_27503,Ns2_27504)).

6. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (SSC_27503,Ns2_27504) that the attacker may have by 5 may be received at input {14}.
So the message (CSC_27510,A[],Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((CSC_27510,A[],Login(skA[]),Passwd(skA[]))).

7. By 6, the attacker may know (CSC_27510,A[],Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_27513

out(c, CreateSessionRequest) at {13} in copy a_27513

in(c, (a_27511,a_27512)) at {14} in copy a_27513

new CSC creating CSC_27514 at {16} in copy a_27513

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_27513

out(c, (CSC_27514,A,Login(skA),Passwd(skA))) at {19} in copy a_27513

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
