Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, m1);
    {14}in(c, m2: bitstring);
    {15}let (SSC: bitstring,Ns2: bitstring) = m2 in
    {16}new CSC: bitstring;
    {17}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {18}let m3: bitstring = (CSC,Sess,Login(skCli),Passwd(skCli)) in
    {19}out(c, m3);
    {20}in(c, m4: bitstring);
    {21}if (m4 <> ActivateSessionResponse) then
    0
) | (
    {22}!
    {23}in(c, (Cli_59: host,Sess_60: host));
    {24}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {25}let pkCli_62: bitstring = pub(skCli_61) in
    {26}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {27}let pkSess_64: bitstring = pub(skSess_63) in
    {28}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {29}in(c, m1_66: bitstring);
    {30}if (m1_66 <> CreateSessionRequest) then
        0
    else
        {31}new SSC_67: bitstring;
        {32}new Ns2_68: bitstring;
        {33}let m2_69: bitstring = (SSC_67,Ns2_68) in
        {34}out(c, m2_69);
        {35}in(c, m3_70: bitstring);
        {36}let (CSC_71: bitstring,=Sess_60,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
        {37}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
        {38}let m4_72: bitstring = ActivateSessionResponse in
        {39}out(c, m4_72)
) | (
    {40}!
    {41}in(c, (X: host,Y: host));
    {42}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {43}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {44}if ((X,Y) = (A,B)) then
        0
    else
        {45}if ((X,Y) = (B,A)) then
            0
        else
            {46}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: Sess_4660 <> B[] && Sess_4660 <> A[] && begin(beginCli(B[],Sess_4660,(Login(skB[]),Passwd(skB[])))) && attacker(Sess_4660) -> end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))))
Abbreviations:
CSC_4710 = CSC[m2 = (SSC_4692,Ns2_4693),Sess = Sess_4679,Cli = B[],!1 = @sid_4694]
CSC_4711 = CSC[m2 = (SSC_4680,Ns2_4681),Sess = Sess_4679,Cli = B[],!1 = @sid_4682]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. Using the function CreateSessionRequest the attacker may obtain CreateSessionRequest.
attacker(CreateSessionRequest).

5. We assume as hypothesis that
attacker(Sess_4679).

6. By 2, the attacker may know B[].
By 5, the attacker may know Sess_4679.
Using the function 2-tuple the attacker may obtain (B[],Sess_4679).
attacker((B[],Sess_4679)).

7. The attacker has some term Ns2_4681.
attacker(Ns2_4681).

8. The attacker has some term SSC_4680.
attacker(SSC_4680).

9. By 8, the attacker may know SSC_4680.
By 7, the attacker may know Ns2_4681.
Using the function 2-tuple the attacker may obtain (SSC_4680,Ns2_4681).
attacker((SSC_4680,Ns2_4681)).

10. The message (B[],Sess_4679) that the attacker may have by 6 may be received at input {6}.
The message (SSC_4680,Ns2_4681) that the attacker may have by 9 may be received at input {14}.
The event beginCli(B[],Sess_4679,(Login(skB[]),Passwd(skB[]))) may be executed at {17}.
We have Sess_4679 <> B[] & Sess_4679 <> A[].
So the message (CSC_4711,Sess_4679,Login(skB[]),Passwd(skB[])) may be sent to the attacker at output {19}.
attacker((CSC_4711,Sess_4679,Login(skB[]),Passwd(skB[]))).

11. By 10, the attacker may know (CSC_4711,Sess_4679,Login(skB[]),Passwd(skB[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skB[]).
attacker(Passwd(skB[])).

12. The attacker has some term Ns2_4693.
attacker(Ns2_4693).

13. The attacker has some term SSC_4692.
attacker(SSC_4692).

14. By 13, the attacker may know SSC_4692.
By 12, the attacker may know Ns2_4693.
Using the function 2-tuple the attacker may obtain (SSC_4692,Ns2_4693).
attacker((SSC_4692,Ns2_4693)).

15. The message (B[],Sess_4679) that the attacker may have by 6 may be received at input {6}.
The message (SSC_4692,Ns2_4693) that the attacker may have by 14 may be received at input {14}.
The event beginCli(B[],Sess_4679,(Login(skB[]),Passwd(skB[]))) may be executed at {17}.
We have Sess_4679 <> B[] & Sess_4679 <> A[].
So the message (CSC_4710,Sess_4679,Login(skB[]),Passwd(skB[])) may be sent to the attacker at output {19}.
attacker((CSC_4710,Sess_4679,Login(skB[]),Passwd(skB[]))).

16. By 15, the attacker may know (CSC_4710,Sess_4679,Login(skB[]),Passwd(skB[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skB[]).
attacker(Login(skB[])).

17. The attacker has some term CSC_4705.
attacker(CSC_4705).

18. By 17, the attacker may know CSC_4705.
By 1, the attacker may know A[].
By 16, the attacker may know Login(skB[]).
By 11, the attacker may know Passwd(skB[]).
Using the function 4-tuple the attacker may obtain (CSC_4705,A[],Login(skB[]),Passwd(skB[])).
attacker((CSC_4705,A[],Login(skB[]),Passwd(skB[]))).

19. The message (B[],A[]) that the attacker may have by 3 may be received at input {23}.
The message CreateSessionRequest that the attacker may have by 4 may be received at input {29}.
The message (CSC_4705,A[],Login(skB[]),Passwd(skB[])) that the attacker may have by 18 may be received at input {35}.
So event endSrv(B[],A[],(Login(skB[]),Passwd(skB[]))) may be executed at {37}.
end(endSrv(B[],A[],(Login(skB[]),Passwd(skB[])))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (B,a_4714)) at {6} in copy a_4715

out(c, CreateSessionRequest) at {13} in copy a_4715

in(c, (a_4712,a_4713)) at {14} in copy a_4715

new CSC creating CSC_4720 at {16} in copy a_4715

event(beginCli(B,a_4714,(Login(skB),Passwd(skB)))) at {17} in copy a_4715

out(c, (CSC_4720,a_4714,Login(skB),Passwd(skB))) at {19} in copy a_4715

in(c, (B,a_4714)) at {6} in copy a_4718

out(c, CreateSessionRequest) at {13} in copy a_4718

in(c, (a_4716,a_4717)) at {14} in copy a_4718

new CSC creating CSC_4721 at {16} in copy a_4718

event(beginCli(B,a_4714,(Login(skB),Passwd(skB)))) at {17} in copy a_4718

out(c, (CSC_4721,a_4714,Login(skB),Passwd(skB))) at {19} in copy a_4718

in(c, (B,A)) at {23} in copy a_4719

in(c, CreateSessionRequest) at {29} in copy a_4719

new SSC_67 creating SSC_5091 at {31} in copy a_4719

new Ns2_68 creating Ns2_5092 at {32} in copy a_4719

out(c, (SSC_5091,Ns2_5092)) at {34} in copy a_4719

in(c, (a,A,Login(skB),Passwd(skB))) at {35} in copy a_4719

event(endSrv(B,A,(Login(skB),Passwd(skB)))) at {37} in copy a_4719

The event endSrv(B,A,(Login(skB),Passwd(skB))) is executed.
A trace has been found.
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is false.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_17496 = CSC[m2 = (SSC_17489,Ns2_17490),Sess = A[],Cli = A[],!1 = @sid_17491]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns2_17490.
attacker(Ns2_17490).

4. The attacker has some term SSC_17489.
attacker(SSC_17489).

5. By 4, the attacker may know SSC_17489.
By 3, the attacker may know Ns2_17490.
Using the function 2-tuple the attacker may obtain (SSC_17489,Ns2_17490).
attacker((SSC_17489,Ns2_17490)).

6. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (SSC_17489,Ns2_17490) that the attacker may have by 5 may be received at input {14}.
So the message (CSC_17496,A[],Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((CSC_17496,A[],Login(skA[]),Passwd(skA[]))).

7. By 6, the attacker may know (CSC_17496,A[],Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_17499

out(c, CreateSessionRequest) at {13} in copy a_17499

in(c, (a_17497,a_17498)) at {14} in copy a_17499

new CSC creating CSC_17500 at {16} in copy a_17499

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_17499

out(c, (CSC_17500,A,Login(skA),Passwd(skA))) at {19} in copy a_17499

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_21805 = CSC[m2 = (SSC_21798,Ns2_21799),Sess = A[],Cli = A[],!1 = @sid_21800]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns2_21799.
attacker(Ns2_21799).

4. The attacker has some term SSC_21798.
attacker(SSC_21798).

5. By 4, the attacker may know SSC_21798.
By 3, the attacker may know Ns2_21799.
Using the function 2-tuple the attacker may obtain (SSC_21798,Ns2_21799).
attacker((SSC_21798,Ns2_21799)).

6. The message (A[],A[]) that the attacker may have by 2 may be received at input {6}.
The message (SSC_21798,Ns2_21799) that the attacker may have by 5 may be received at input {14}.
So the message (CSC_21805,A[],Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {19}.
attacker((CSC_21805,A[],Login(skA[]),Passwd(skA[]))).

7. By 6, the attacker may know (CSC_21805,A[],Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,A)) at {6} in copy a_21808

out(c, CreateSessionRequest) at {13} in copy a_21808

in(c, (a_21806,a_21807)) at {14} in copy a_21808

new CSC creating CSC_21809 at {16} in copy a_21808

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {17} in copy a_21808

out(c, (CSC_21809,A,Login(skA),Passwd(skA))) at {19} in copy a_21808

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
