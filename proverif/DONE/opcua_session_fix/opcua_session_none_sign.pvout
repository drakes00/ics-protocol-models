Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=Cli,=pkSess,=Nc,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(pkCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}let tmp_66: bitstring = (if ((Cli_59 <> A) && (Cli_59 <> B)) then K_61 else CreateSessionRequest) in
    {34}out(c, tmp_66);
    {35}in(c, (m1_67: bitstring,sigM1: bitstring));
    {36}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {38}new Ns_69: bitstring;
        {39}event beginSrv(Sess_60,Cli_59,Ns_69);
        {40}let m2_70: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Nc_68,Ns_69) in
        {41}out(c, (m2_70,sign(h(m2_70),skSess_64)));
        {42}in(c, (m3_71: bitstring,sigM3: bitstring));
        {43}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {44}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(pkCli_63),=Passwd(skCli_62)) = m3_71 in
            {45}new Ns2_72: bitstring;
            {46}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {47}out(c, (m4_73,sign(h(m4_73),skSess_64)));
            {48}if ((Cli_59 = A) || (Cli_59 = B)) then
            {49}event endSrv(Cli_59,Sess_60,(Login(pkCli_63),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 95 rules. 44 rules in the queue.
400 rules inserted. The rule base contains 133 rules. 24 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_7616) -> end(endCli(A[],B[],N_7616))
Abbreviations:
Nc_7644 = Nc[Sess = A[],Cli = B[],!1 = @sid_7639]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_7643).

5. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
So the message (CreateSessionRequest,pub(skB[]),Nc_7644) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skB[]),Nc_7644)).

6. By 5, the attacker may know (CreateSessionRequest,pub(skB[]),Nc_7644).
Using the function 3-proj-3-tuple the attacker may obtain Nc_7644.
attacker(Nc_7644).

7. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 2, the attacker may know B[].
By 7, the attacker may know pub(skA[]).
By 6, the attacker may know Nc_7644.
By 4, the attacker may know N_7643.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,B[],pub(skA[]),Nc_7644,N_7643).
attacker((CreateSessionResponse,B[],pub(skA[]),Nc_7644,N_7643)).

10. The attacker has some term Ns2_7638.
attacker(Ns2_7638).

11. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

12. By 11, the attacker may know ActivateSessionResponse.
By 10, the attacker may know Ns2_7638.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_7638).
attacker((ActivateSessionResponse,Ns2_7638)).

13. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,B[],pub(skA[]),Nc_7644,N_7643) that the attacker may have by 9 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_7638) that the attacker may have by 12 may be received at input {24}.
So event endCli(A[],B[],N_7643) may be executed at {27}.
end(endCli(A[],B[],N_7643)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_7733 at {6} in copy a_7646

in(c, (B,A)) at {7} in copy a_7646

new K creating K_7748 at {8} in copy a_7646

out(ch_7733, (B,A,K_7748)) at {9} in copy a_7646 received at {28} in copy a_7646

out(c, CreateSessionRequest) at {34} in copy a_7646

out(c, CreateSessionRequest) at {15} in copy a_7646

new Nc creating Nc_7647 at {16} in copy a_7646

out(c, (CreateSessionRequest,pub(skB),Nc_7647)) at {18} in copy a_7646

in(c, (CreateSessionResponse,B,pub(skA),Nc_7647,a)) at {19} in copy a_7646

event(beginCli(B,A,(Login(pub(skB)),Passwd(skB)))) at {21} in copy a_7646

out(c, (ActivateSessionRequest,A,pub(skB),Login(pub(skB)),Passwd(skB))) at {23} in copy a_7646

in(c, (ActivateSessionResponse,a_7645)) at {24} in copy a_7646

event(endCli(A,B,a)) at {27} in copy a_7646

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_7945,Y_7946,N_7947)) ==> event(beginCli(X_7945,Y_7946,N_7947))
Completing...
200 rules inserted. The rule base contains 105 rules. 50 rules in the queue.
400 rules inserted. The rule base contains 137 rules. 30 rules in the queue.
Starting query event(endSrv(X_7945,Y_7946,N_7947)) ==> event(beginCli(X_7945,Y_7946,N_7947))
RESULT event(endSrv(X_7945,Y_7946,N_7947)) ==> event(beginCli(X_7945,Y_7946,N_7947)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 92 rules. 40 rules in the queue.
400 rules inserted. The rule base contains 132 rules. 21 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
Nc_20638 = Nc[Sess = A[],Cli = A[],!1 = @sid_20631]

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_20632.
attacker(Ns_20632).

4. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
So the message (CreateSessionRequest,pub(skA[]),Nc_20638) may be sent to the attacker at output {18}.
attacker((CreateSessionRequest,pub(skA[]),Nc_20638)).

5. By 4, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_20638).
Using the function 3-proj-3-tuple the attacker may obtain Nc_20638.
attacker(Nc_20638).

6. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

7. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

8. By 7, the attacker may know CreateSessionResponse.
By 1, the attacker may know A[].
By 6, the attacker may know pub(skA[]).
By 5, the attacker may know Nc_20638.
By 3, the attacker may know Ns_20632.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,A[],pub(skA[]),Nc_20638,Ns_20632).
attacker((CreateSessionResponse,A[],pub(skA[]),Nc_20638,Ns_20632)).

9. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,A[],pub(skA[]),Nc_20638,Ns_20632) that the attacker may have by 8 may be received at input {19}.
So the message (ActivateSessionRequest,A[],pub(skA[]),Login(pub(skA[])),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,A[],pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

10. By 9, the attacker may know (ActivateSessionRequest,A[],pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_20728 at {6} in copy a_20639

in(c, (A,A)) at {7} in copy a_20639

new K creating K_20743 at {8} in copy a_20639

out(ch_20728, (A,A,K_20743)) at {9} in copy a_20639 received at {28} in copy a_20639

out(c, CreateSessionRequest) at {34} in copy a_20639

out(c, CreateSessionRequest) at {15} in copy a_20639

new Nc creating Nc_20641 at {16} in copy a_20639

out(c, (CreateSessionRequest,pub(skA),Nc_20641)) at {18} in copy a_20639

in(c, (CreateSessionResponse,A,pub(skA),Nc_20641,a_20640)) at {19} in copy a_20639

event(beginCli(A,A,(Login(pub(skA)),Passwd(skA)))) at {21} in copy a_20639

out(c, (ActivateSessionRequest,A,pub(skA),Login(pub(skA)),Passwd(skA))) at {23} in copy a_20639

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
