Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, m1);
    {19}in(c, m2: bitstring);
    {20}let (=CreateSessionResponse,=Cli,=pkSess,Ns: bitstring) = m2 in
    {21}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
    {22}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
    {23}out(c, m3);
    {24}in(c, m4: bitstring);
    {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
    {26}if ((Sess = A) || (Sess = B)) then
    {27}event endCli(Sess,Cli,Ns)
) | (
    {28}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {29}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {30}let pkCli_63: bitstring = pub(skCli_62) in
    {31}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {32}let pkSess_65: bitstring = pub(skSess_64) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {36}new Ns_68: bitstring;
        {37}event beginSrv(Sess_60,Cli_59,Ns_68);
        {38}let m2_69: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Ns_68) in
        {39}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {40}in(c, (m3_70: bitstring,sigM3: bitstring));
        {41}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {42}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {43}new Ns2_71: bitstring;
            {44}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {45}out(c, (m4_72,sign(h(m4_72),skSess_64)));
            {46}if ((Cli_59 = A) || (Cli_59 = B)) then
            {47}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 110 rules. 36 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
goal reachable: attacker(N_6903) -> end(endCli(A[],B[],N_6903))

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(N_6923).

5. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

6. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

7. By 6, the attacker may know CreateSessionResponse.
By 2, the attacker may know B[].
By 5, the attacker may know pub(skA[]).
By 4, the attacker may know N_6923.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,B[],pub(skA[]),N_6923).
attacker((CreateSessionResponse,B[],pub(skA[]),N_6923)).

8. The attacker has some term Ns2_6918.
attacker(Ns2_6918).

9. Using the function ActivateSessionResponse the attacker may obtain ActivateSessionResponse.
attacker(ActivateSessionResponse).

10. By 9, the attacker may know ActivateSessionResponse.
By 8, the attacker may know Ns2_6918.
Using the function 2-tuple the attacker may obtain (ActivateSessionResponse,Ns2_6918).
attacker((ActivateSessionResponse,Ns2_6918)).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The message (CreateSessionResponse,B[],pub(skA[]),N_6923) that the attacker may have by 7 may be received at input {19}.
The message (ActivateSessionResponse,Ns2_6918) that the attacker may have by 10 may be received at input {24}.
So event endCli(A[],B[],N_6923) may be executed at {27}.
end(endCli(A[],B[],N_6923)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_7008 at {6} in copy a_6925

in(c, (B,A)) at {7} in copy a_6925

new K creating K_7079 at {12} in copy a_6925

out(ch_7008, (B,A,K_7079)) at {13} in copy a_6925 received at {28} in copy a_6925

out(c, CreateSessionRequest) at {15} in copy a_6925

new Nc creating Nc_7169 at {16} in copy a_6925

out(c, (CreateSessionRequest,pub(skB),Nc_7169)) at {18} in copy a_6925

in(c, (CreateSessionResponse,B,pub(skA),a)) at {19} in copy a_6925

event(beginCli(B,A,(Login(skB),Passwd(skB)))) at {21} in copy a_6925

out(c, (ActivateSessionRequest,A,pub(skB),Login(skB),Passwd(skB))) at {23} in copy a_6925

in(c, (ActivateSessionResponse,a_6924)) at {24} in copy a_6925

event(endCli(A,B,a)) at {27} in copy a_6925

The event endCli(A,B,a) is executed.
A trace has been found.
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is false.
-- Query event(endSrv(X_7198,Y_7199,N_7200)) ==> event(beginCli(X_7198,Y_7199,N_7200))
Completing...
200 rules inserted. The rule base contains 116 rules. 50 rules in the queue.
400 rules inserted. The rule base contains 168 rules. 62 rules in the queue.
600 rules inserted. The rule base contains 176 rules. 54 rules in the queue.
Starting query event(endSrv(X_7198,Y_7199,N_7200)) ==> event(beginCli(X_7198,Y_7199,N_7200))
RESULT event(endSrv(X_7198,Y_7199,N_7200)) ==> event(beginCli(X_7198,Y_7199,N_7200)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 104 rules. 32 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_20989.
attacker(Ns_20989).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 1, the attacker may know A[].
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_20989.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(skA[]),Ns_20989).
attacker((CreateSessionResponse,A[],pub(skA[]),Ns_20989)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,A[],pub(skA[]),Ns_20989) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_21081 at {6} in copy a_20997

in(c, (A,A)) at {7} in copy a_20997

new K creating K_21152 at {12} in copy a_20997

out(ch_21081, (A,A,K_21152)) at {13} in copy a_20997 received at {28} in copy a_20997

out(c, CreateSessionRequest) at {15} in copy a_20997

new Nc creating Nc_21242 at {16} in copy a_20997

out(c, (CreateSessionRequest,pub(skA),Nc_21242)) at {18} in copy a_20997

in(c, (CreateSessionResponse,A,pub(skA),a_20996)) at {19} in copy a_20997

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_20997

out(c, (ActivateSessionRequest,A,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_20997

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 104 rules. 32 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker initially knows A[].
attacker(A[]).

2. By 1, the attacker may know A[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (A[],A[]).
attacker((A[],A[])).

3. The attacker has some term Ns_26886.
attacker(Ns_26886).

4. The message pub(skA[]) may be sent to the attacker at output {2}.
attacker(pub(skA[])).

5. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

6. By 5, the attacker may know CreateSessionResponse.
By 1, the attacker may know A[].
By 4, the attacker may know pub(skA[]).
By 3, the attacker may know Ns_26886.
Using the function 4-tuple the attacker may obtain (CreateSessionResponse,A[],pub(skA[]),Ns_26886).
attacker((CreateSessionResponse,A[],pub(skA[]),Ns_26886)).

7. The message (A[],A[]) that the attacker may have by 2 may be received at input {7}.
The message (CreateSessionResponse,A[],pub(skA[]),Ns_26886) that the attacker may have by 6 may be received at input {19}.
So the message (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])) may be sent to the attacker at output {23}.
attacker((ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[]))).

8. By 7, the attacker may know (ActivateSessionRequest,A[],pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_26978 at {6} in copy a_26894

in(c, (A,A)) at {7} in copy a_26894

new K creating K_27049 at {12} in copy a_26894

out(ch_26978, (A,A,K_27049)) at {13} in copy a_26894 received at {28} in copy a_26894

out(c, CreateSessionRequest) at {15} in copy a_26894

new Nc creating Nc_27139 at {16} in copy a_26894

out(c, (CreateSessionRequest,pub(skA),Nc_27139)) at {18} in copy a_26894

in(c, (CreateSessionResponse,A,pub(skA),a_26893)) at {19} in copy a_26894

event(beginCli(A,A,(Login(skA),Passwd(skA)))) at {21} in copy a_26894

out(c, (ActivateSessionRequest,A,pub(skA),Login(skA),Passwd(skA))) at {23} in copy a_26894

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
