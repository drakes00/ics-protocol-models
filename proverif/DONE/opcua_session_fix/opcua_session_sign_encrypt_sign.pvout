Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}new Nc: bitstring;
    {13}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {14}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {15}in(c, (em2: bitstring,sigM2: bitstring));
    {16}let m2: bitstring = sdec(em2,K) in
    {17}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {18}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {35}let (=CreateSessionRequest,=pkCli_62,Nc_67: bitstring) = m1_66 in
        {36}new Ns_68: bitstring;
        {37}let m2_69: bitstring = (CreateSessionResponse,pkSess_64,Ns_68) in
        {38}out(c, (m2_69,sign(h(m2_69),skSess_63)));
        {39}in(c, (m3_70: bitstring,sigM3: bitstring));
        {40}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
            0
        else
            {41}let (=ActivateSessionRequest,=Sess_60,=pkCli_62,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
            {42}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
            {43}new Ns2_71: bitstring;
            {44}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {45}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {46}!
    {47}in(c, (X: host,Y: host));
    {48}if (X = Y) then
        0
    else
        {49}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
        {50}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
        {51}if ((X,Y) = (A,B)) then
            0
        else
            {52}if ((X,Y) = (B,A)) then
                0
            else
                {53}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 123 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 154 rules. 21 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 143 rules. 8 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 143 rules. 8 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 143 rules. 8 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))

1. The attacker has some term Sess_28879.
attacker(Sess_28879).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_28879.
Using the function 2-tuple the attacker may obtain (A[],Sess_28879).
attacker((A[],Sess_28879)).

4. The message (A[],Sess_28879) that the attacker may have by 3 may be received at input {47}.
We have Sess_28879 <> B[] & Sess_28879 <> A[].
So the message Skey(skA[],sk(Sess_28879)) may be sent to the attacker at output {53}.
attacker(Skey(skA[],sk(Sess_28879))).

5. By 1, the attacker may know Sess_28879.
Using the function sk the attacker may obtain sk(Sess_28879).
attacker(sk(Sess_28879)).

6. The attacker has some term Ns_28880.
attacker(Ns_28880).

7. By 5, the attacker may know sk(Sess_28879).
Using the function pub the attacker may obtain pub(sk(Sess_28879)).
attacker(pub(sk(Sess_28879))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_28879)).
By 6, the attacker may know Ns_28880.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880).
attacker((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)).
attacker(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)).
By 5, the attacker may know sk(Sess_28879).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880).
By 4, the attacker may know Skey(skA[],sk(Sess_28879)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879))),sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879))),sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879)))).

14. The message (A[],Sess_28879) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880),Skey(skA[],sk(Sess_28879))),sign(h((CreateSessionResponse,pub(sk(Sess_28879)),Ns_28880)),sk(Sess_28879))) that the attacker may have by 13 may be received at input {15}.
We have Sess_28879 <> B[] & Sess_28879 <> A[].
So the message (senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879))),sign(h((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879))),sign(h((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879))),sign(h((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879))).
attacker(senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_28879))).
By 4, the attacker may know Skey(skA[],sk(Sess_28879)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_28879,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a)) at {6} in copy a_28892

new Nc creating Nc_29093 at {12} in copy a_28892

out(c, (senc((CreateSessionRequest,pub(skA),Nc_29093),Skey(skA,sk(a))),sign(h((CreateSessionRequest,pub(skA),Nc_29093)),skA))) at {14} in copy a_28892

in(c, (A,a)) at {47} in copy a_28893

out(c, Skey(skA,sk(a))) at {53} in copy a_28893

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_28891),Skey(skA,sk(a))),sign(h((CreateSessionResponse,pub(sk(a)),a_28891)),sk(a)))) at {15} in copy a_28892

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {19} in copy a_28892

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a))),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_28892

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 122 rules. 80 rules in the queue.
400 rules inserted. The rule base contains 143 rules. 8 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))

1. The attacker has some term Sess_36189.
attacker(Sess_36189).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_36189.
Using the function 2-tuple the attacker may obtain (A[],Sess_36189).
attacker((A[],Sess_36189)).

4. The message (A[],Sess_36189) that the attacker may have by 3 may be received at input {47}.
We have Sess_36189 <> B[] & Sess_36189 <> A[].
So the message Skey(skA[],sk(Sess_36189)) may be sent to the attacker at output {53}.
attacker(Skey(skA[],sk(Sess_36189))).

5. By 1, the attacker may know Sess_36189.
Using the function sk the attacker may obtain sk(Sess_36189).
attacker(sk(Sess_36189)).

6. The attacker has some term Ns_36190.
attacker(Ns_36190).

7. By 5, the attacker may know sk(Sess_36189).
Using the function pub the attacker may obtain pub(sk(Sess_36189)).
attacker(pub(sk(Sess_36189))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_36189)).
By 6, the attacker may know Ns_36190.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190).
attacker((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)).
attacker(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)).
By 5, the attacker may know sk(Sess_36189).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190).
By 4, the attacker may know Skey(skA[],sk(Sess_36189)).
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189))).
attacker(senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189)))).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189))).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189))),sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189))),sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189)))).

14. The message (A[],Sess_36189) that the attacker may have by 3 may be received at input {6}.
The message (senc((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190),Skey(skA[],sk(Sess_36189))),sign(h((CreateSessionResponse,pub(sk(Sess_36189)),Ns_36190)),sk(Sess_36189))) that the attacker may have by 13 may be received at input {15}.
We have Sess_36189 <> B[] & Sess_36189 <> A[].
So the message (senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189))),sign(h((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189))),sign(h((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189))),sign(h((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189))).
attacker(senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189)))).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_36189))).
By 4, the attacker may know Skey(skA[],sk(Sess_36189)).
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_36189,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_36201)) at {6} in copy a_36203

new Nc creating Nc_36405 at {12} in copy a_36203

out(c, (senc((CreateSessionRequest,pub(skA),Nc_36405),Skey(skA,sk(a_36201))),sign(h((CreateSessionRequest,pub(skA),Nc_36405)),skA))) at {14} in copy a_36203

in(c, (A,a_36201)) at {47} in copy a_36204

out(c, Skey(skA,sk(a_36201))) at {53} in copy a_36204

in(c, (senc((CreateSessionResponse,pub(sk(a_36201)),a_36202),Skey(skA,sk(a_36201))),sign(h((CreateSessionResponse,pub(sk(a_36201)),a_36202)),sk(a_36201)))) at {15} in copy a_36203

event(beginCli(A,a_36201,(Login(skA),Passwd(skA)))) at {19} in copy a_36203

out(c, (senc((ActivateSessionRequest,a_36201,pub(skA),Login(skA),Passwd(skA)),Skey(skA,sk(a_36201))),sign(h((ActivateSessionRequest,a_36201,pub(skA),Login(skA),Passwd(skA))),skA))) at {21} in copy a_36203

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
