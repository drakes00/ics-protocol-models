Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}new K: bitstring;
    {9}out(ch, (Cli,Sess,K));
    {10}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {11}let pkCli: bitstring = pub(skCli) in
    {12}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {13}let pkSess: bitstring = pub(skSess) in
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=Cli,=pkSess,=Nc,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(pkCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(pkCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {33}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {34}let pkCli_63: bitstring = pub(skCli_62) in
    {35}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {36}let pkSess_65: bitstring = pub(skSess_64) in
    {37}let tmp_66: bitstring = (if ((Cli_59 <> A) && (Cli_59 <> B)) then K_61 else CreateSessionRequest) in
    {38}out(c, tmp_66);
    {39}in(c, (m1_67: bitstring,sigM1: bitstring));
    {40}if (verify(h(m1_67),sigM1,pkCli_63) <> true) then
        0
    else
        {41}let (=CreateSessionRequest,=pkCli_63,Nc_68: bitstring) = m1_67 in
        {42}new Ns_69: bitstring;
        {43}event beginSrv(Sess_60,Cli_59,Ns_69);
        {44}let m2_70: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Nc_68,Ns_69) in
        {45}out(c, (m2_70,sign(h(m2_70),skSess_64)));
        {46}in(c, (m3_71: bitstring,sigM3: bitstring));
        {47}if (verify(h(m3_71),sigM3,pkCli_63) <> true) then
            0
        else
            {48}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(pkCli_63),=Passwd(skCli_62)) = m3_71 in
            {49}new Ns2_72: bitstring;
            {50}let m4_73: bitstring = (ActivateSessionResponse,Ns2_72) in
            {51}out(c, (m4_73,sign(h(m4_73),skSess_64)));
            {52}if ((Cli_59 = A) || (Cli_59 = B)) then
            {53}event endSrv(Cli_59,Sess_60,(Login(pkCli_63),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 136 rules. 97 rules in the queue.
400 rules inserted. The rule base contains 208 rules. 109 rules in the queue.
600 rules inserted. The rule base contains 240 rules. 63 rules in the queue.
800 rules inserted. The rule base contains 271 rules. 28 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_11553,Y_11554,N_11555)) ==> event(beginCli(X_11553,Y_11554,N_11555))
Completing...
200 rules inserted. The rule base contains 136 rules. 107 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 120 rules in the queue.
600 rules inserted. The rule base contains 224 rules. 75 rules in the queue.
800 rules inserted. The rule base contains 241 rules. 48 rules in the queue.
Starting query event(endSrv(X_11553,Y_11554,N_11555)) ==> event(beginCli(X_11553,Y_11554,N_11555))
RESULT event(endSrv(X_11553,Y_11554,N_11555)) ==> event(beginCli(X_11553,Y_11554,N_11555)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 140 rules. 115 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 108 rules in the queue.
600 rules inserted. The rule base contains 227 rules. 60 rules in the queue.
800 rules inserted. The rule base contains 271 rules. 12 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_29934 = K[Sess = Sess_29922,Cli = A[],!1 = @sid_29923]
Nc_29935 = Nc[Sess = Sess_29922,Cli = A[],!1 = @sid_29923]

1. The attacker has some term Sess_29922.
attacker(Sess_29922).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_29922.
Using the function 2-tuple the attacker may obtain (A[],Sess_29922).
attacker((A[],Sess_29922)).

4. The message (A[],Sess_29922) that the attacker may have by 3 may be received at input {7}.
We have Sess_29922 <> B[] & Sess_29922 <> A[].
So the message K_29934 may be sent to the attacker at output {15}.
attacker(K_29934).

5. By 1, the attacker may know Sess_29922.
Using the function sk the attacker may obtain sk(Sess_29922).
attacker(sk(Sess_29922)).

6. The attacker has some term Ns_29924.
attacker(Ns_29924).

7. The message (A[],Sess_29922) that the attacker may have by 3 may be received at input {7}.
We have Sess_29922 <> B[] & Sess_29922 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934),sign(h((CreateSessionRequest,pub(skA[]),Nc_29935)),skA[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934),sign(h((CreateSessionRequest,pub(skA[]),Nc_29935)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934),sign(h((CreateSessionRequest,pub(skA[]),Nc_29935)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_29935),K_29934).
By 4, the attacker may know K_29934.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_29935).
attacker((CreateSessionRequest,pub(skA[]),Nc_29935)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_29935).
Using the function 3-proj-3-tuple the attacker may obtain Nc_29935.
attacker(Nc_29935).

11. By 5, the attacker may know sk(Sess_29922).
Using the function pub the attacker may obtain pub(sk(Sess_29922)).
attacker(pub(sk(Sess_29922))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 11, the attacker may know pub(sk(Sess_29922)).
By 10, the attacker may know Nc_29935.
By 6, the attacker may know Ns_29924.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924).
attacker((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)).

14. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924))).

15. By 14, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)).
By 5, the attacker may know sk(Sess_29922).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922))).

16. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924).
By 4, the attacker may know K_29934.
Using the function senc the attacker may obtain senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934).
attacker(senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934)).

17. By 16, the attacker may know senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934).
By 15, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934),sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922))).
attacker((senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934),sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922)))).

18. The message (A[],Sess_29922) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924),K_29934),sign(h((CreateSessionResponse,A[],pub(sk(Sess_29922)),Nc_29935,Ns_29924)),sk(Sess_29922))) that the attacker may have by 17 may be received at input {19}.
We have Sess_29922 <> B[] & Sess_29922 <> A[].
So the message (senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934),sign(h((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934),sign(h((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934),sign(h((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934).
attacker(senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934)).

20. By 19, the attacker may know senc((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])),K_29934).
By 4, the attacker may know K_29934.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,Sess_29922,pub(skA[]),Login(pub(skA[])),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_30037 at {6} in copy a_29936

in(c, (A,a)) at {7} in copy a_29936

new K creating K_29939 at {8} in copy a_29936

out(ch_30037, (A,a,K_29939)) at {9} in copy a_29936 received at {32} in copy a_29936

out(c, K_29939) at {15} in copy a_29936

new Nc creating Nc_29938 at {16} in copy a_29936

out(c, (senc((CreateSessionRequest,pub(skA),Nc_29938),K_29939),sign(h((CreateSessionRequest,pub(skA),Nc_29938)),skA))) at {18} in copy a_29936

in(c, (senc((CreateSessionResponse,A,pub(sk(a)),Nc_29938,a_29937),K_29939),sign(h((CreateSessionResponse,A,pub(sk(a)),Nc_29938,a_29937)),sk(a)))) at {19} in copy a_29936

event(beginCli(A,a,(Login(pub(skA)),Passwd(skA)))) at {23} in copy a_29936

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(pub(skA)),Passwd(skA)),K_29939),sign(h((ActivateSessionRequest,a,pub(skA),Login(pub(skA)),Passwd(skA))),skA))) at {25} in copy a_29936

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
