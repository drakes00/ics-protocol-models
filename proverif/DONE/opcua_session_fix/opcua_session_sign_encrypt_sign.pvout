Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=Cli,=pkSess,=Nc,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            {30}if ((Sess = A) || (Sess = B)) then
            {31}event endCli(Sess,Cli,Ns)
) | (
    {32}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {33}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {34}let pkCli_63: bitstring = pub(skCli_62) in
    {35}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {36}let pkSess_65: bitstring = pub(skSess_64) in
    {37}in(c, (m1_66: bitstring,sigM1: bitstring));
    {38}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {39}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {40}new Ns_68: bitstring;
        {41}event beginSrv(Sess_60,Cli_59,Ns_68);
        {42}let m2_69: bitstring = (CreateSessionResponse,Cli_59,pkSess_65,Nc_67,Ns_68) in
        {43}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {44}in(c, (m3_70: bitstring,sigM3: bitstring));
        {45}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {46}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {47}new Ns2_71: bitstring;
            {48}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {49}out(c, (m4_72,sign(h(m4_72),skSess_64)));
            {50}if ((Cli_59 = A) || (Cli_59 = B)) then
            {51}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)))
)

-- Query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
Completing...
200 rules inserted. The rule base contains 133 rules. 88 rules in the queue.
400 rules inserted. The rule base contains 212 rules. 97 rules in the queue.
600 rules inserted. The rule base contains 261 rules. 16 rules in the queue.
Starting query event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N))
RESULT event(endCli(X,Y,N)) ==> event(beginSrv(X,Y,N)) is true.
-- Query event(endSrv(X_10092,Y_10093,N_10094)) ==> event(beginCli(X_10092,Y_10093,N_10094))
Completing...
200 rules inserted. The rule base contains 130 rules. 89 rules in the queue.
400 rules inserted. The rule base contains 198 rules. 115 rules in the queue.
600 rules inserted. The rule base contains 269 rules. 20 rules in the queue.
Starting query event(endSrv(X_10092,Y_10093,N_10094)) ==> event(beginCli(X_10092,Y_10093,N_10094))
RESULT event(endSrv(X_10092,Y_10093,N_10094)) ==> event(beginCli(X_10092,Y_10093,N_10094)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 134 rules. 101 rules in the queue.
400 rules inserted. The rule base contains 200 rules. 81 rules in the queue.
600 rules inserted. The rule base contains 245 rules. 16 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_27513 = K[Sess = Sess_27501,Cli = A[],!1 = @sid_27502]
Nc_27514 = Nc[Sess = Sess_27501,Cli = A[],!1 = @sid_27502]

1. The attacker has some term Sess_27501.
attacker(Sess_27501).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_27501.
Using the function 2-tuple the attacker may obtain (A[],Sess_27501).
attacker((A[],Sess_27501)).

4. The message (A[],Sess_27501) that the attacker may have by 3 may be received at input {7}.
We have Sess_27501 <> B[] & Sess_27501 <> A[].
So the message K_27513 may be sent to the attacker at output {15}.
attacker(K_27513).

5. By 1, the attacker may know Sess_27501.
Using the function sk the attacker may obtain sk(Sess_27501).
attacker(sk(Sess_27501)).

6. The attacker has some term Ns_27503.
attacker(Ns_27503).

7. The message (A[],Sess_27501) that the attacker may have by 3 may be received at input {7}.
We have Sess_27501 <> B[] & Sess_27501 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513),sign(h((CreateSessionRequest,pub(skA[]),Nc_27514)),skA[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513),sign(h((CreateSessionRequest,pub(skA[]),Nc_27514)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513),sign(h((CreateSessionRequest,pub(skA[]),Nc_27514)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_27514),K_27513).
By 4, the attacker may know K_27513.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_27514).
attacker((CreateSessionRequest,pub(skA[]),Nc_27514)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_27514).
Using the function 3-proj-3-tuple the attacker may obtain Nc_27514.
attacker(Nc_27514).

11. By 5, the attacker may know sk(Sess_27501).
Using the function pub the attacker may obtain pub(sk(Sess_27501)).
attacker(pub(sk(Sess_27501))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 11, the attacker may know pub(sk(Sess_27501)).
By 10, the attacker may know Nc_27514.
By 6, the attacker may know Ns_27503.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503).
attacker((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)).

14. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503))).

15. By 14, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)).
By 5, the attacker may know sk(Sess_27501).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501))).

16. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503).
By 4, the attacker may know K_27513.
Using the function senc the attacker may obtain senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513).
attacker(senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513)).

17. By 16, the attacker may know senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513).
By 15, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513),sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501))).
attacker((senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513),sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501)))).

18. The message (A[],Sess_27501) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503),K_27513),sign(h((CreateSessionResponse,A[],pub(sk(Sess_27501)),Nc_27514,Ns_27503)),sk(Sess_27501))) that the attacker may have by 17 may be received at input {19}.
We have Sess_27501 <> B[] & Sess_27501 <> A[].
So the message (senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513),sign(h((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513),sign(h((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513),sign(h((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513).
attacker(senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513)).

20. By 19, the attacker may know senc((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])),K_27513).
By 4, the attacker may know K_27513.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,Sess_27501,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_27613 at {6} in copy a_27515

in(c, (A,a)) at {7} in copy a_27515

new K creating K_27518 at {12} in copy a_27515

out(ch_27613, (A,a,K_27518)) at {13} in copy a_27515 received at {32} in copy a_27515

out(c, K_27518) at {15} in copy a_27515

new Nc creating Nc_27517 at {16} in copy a_27515

out(c, (senc((CreateSessionRequest,pub(skA),Nc_27517),K_27518),sign(h((CreateSessionRequest,pub(skA),Nc_27517)),skA))) at {18} in copy a_27515

in(c, (senc((CreateSessionResponse,A,pub(sk(a)),Nc_27517,a_27516),K_27518),sign(h((CreateSessionResponse,A,pub(sk(a)),Nc_27517,a_27516)),sk(a)))) at {19} in copy a_27515

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {23} in copy a_27515

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),K_27518),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_27515

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 134 rules. 101 rules in the queue.
400 rules inserted. The rule base contains 200 rules. 81 rules in the queue.
600 rules inserted. The rule base contains 245 rules. 16 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_36007 = K[Sess = Sess_35995,Cli = A[],!1 = @sid_35996]
Nc_36008 = Nc[Sess = Sess_35995,Cli = A[],!1 = @sid_35996]

1. The attacker has some term Sess_35995.
attacker(Sess_35995).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_35995.
Using the function 2-tuple the attacker may obtain (A[],Sess_35995).
attacker((A[],Sess_35995)).

4. The message (A[],Sess_35995) that the attacker may have by 3 may be received at input {7}.
We have Sess_35995 <> B[] & Sess_35995 <> A[].
So the message K_36007 may be sent to the attacker at output {15}.
attacker(K_36007).

5. By 1, the attacker may know Sess_35995.
Using the function sk the attacker may obtain sk(Sess_35995).
attacker(sk(Sess_35995)).

6. The attacker has some term Ns_35997.
attacker(Ns_35997).

7. The message (A[],Sess_35995) that the attacker may have by 3 may be received at input {7}.
We have Sess_35995 <> B[] & Sess_35995 <> A[].
So the message (senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007),sign(h((CreateSessionRequest,pub(skA[]),Nc_36008)),skA[])) may be sent to the attacker at output {18}.
attacker((senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007),sign(h((CreateSessionRequest,pub(skA[]),Nc_36008)),skA[]))).

8. By 7, the attacker may know (senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007),sign(h((CreateSessionRequest,pub(skA[]),Nc_36008)),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007).
attacker(senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007)).

9. By 8, the attacker may know senc((CreateSessionRequest,pub(skA[]),Nc_36008),K_36007).
By 4, the attacker may know K_36007.
Using the function sdec the attacker may obtain (CreateSessionRequest,pub(skA[]),Nc_36008).
attacker((CreateSessionRequest,pub(skA[]),Nc_36008)).

10. By 9, the attacker may know (CreateSessionRequest,pub(skA[]),Nc_36008).
Using the function 3-proj-3-tuple the attacker may obtain Nc_36008.
attacker(Nc_36008).

11. By 5, the attacker may know sk(Sess_35995).
Using the function pub the attacker may obtain pub(sk(Sess_35995)).
attacker(pub(sk(Sess_35995))).

12. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

13. By 12, the attacker may know CreateSessionResponse.
By 2, the attacker may know A[].
By 11, the attacker may know pub(sk(Sess_35995)).
By 10, the attacker may know Nc_36008.
By 6, the attacker may know Ns_35997.
Using the function 5-tuple the attacker may obtain (CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997).
attacker((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)).

14. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997).
Using the function h the attacker may obtain h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)).
attacker(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997))).

15. By 14, the attacker may know h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)).
By 5, the attacker may know sk(Sess_35995).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995)).
attacker(sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995))).

16. By 13, the attacker may know (CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997).
By 4, the attacker may know K_36007.
Using the function senc the attacker may obtain senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007).
attacker(senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007)).

17. By 16, the attacker may know senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007).
By 15, the attacker may know sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007),sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995))).
attacker((senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007),sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995)))).

18. The message (A[],Sess_35995) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997),K_36007),sign(h((CreateSessionResponse,A[],pub(sk(Sess_35995)),Nc_36008,Ns_35997)),sk(Sess_35995))) that the attacker may have by 17 may be received at input {19}.
We have Sess_35995 <> B[] & Sess_35995 <> A[].
So the message (senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007),sign(h((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007),sign(h((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

19. By 18, the attacker may know (senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007),sign(h((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007).
attacker(senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007)).

20. By 19, the attacker may know senc((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])),K_36007).
By 4, the attacker may know K_36007.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[]))).

21. By 20, the attacker may know (ActivateSessionRequest,Sess_35995,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_36109 at {6} in copy a_36010

in(c, (A,a_36009)) at {7} in copy a_36010

new K creating K_36013 at {12} in copy a_36010

out(ch_36109, (A,a_36009,K_36013)) at {13} in copy a_36010 received at {32} in copy a_36010

out(c, K_36013) at {15} in copy a_36010

new Nc creating Nc_36012 at {16} in copy a_36010

out(c, (senc((CreateSessionRequest,pub(skA),Nc_36012),K_36013),sign(h((CreateSessionRequest,pub(skA),Nc_36012)),skA))) at {18} in copy a_36010

in(c, (senc((CreateSessionResponse,A,pub(sk(a_36009)),Nc_36012,a_36011),K_36013),sign(h((CreateSessionResponse,A,pub(sk(a_36009)),Nc_36012,a_36011)),sk(a_36009)))) at {19} in copy a_36010

event(beginCli(A,a_36009,(Login(skA),Passwd(skA)))) at {23} in copy a_36010

out(c, (senc((ActivateSessionRequest,a_36009,pub(skA),Login(skA),Passwd(skA)),K_36013),sign(h((ActivateSessionRequest,a_36009,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_36010

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
