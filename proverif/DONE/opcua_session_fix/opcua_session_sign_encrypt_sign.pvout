Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
{5}!
{6}new ch: channel;
(
    {7}in(c, (Cli: host,Sess: host));
    {8}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {9}let pkCli: bitstring = pub(skCli) in
    {10}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {11}let pkSess: bitstring = pub(skSess) in
    {12}new K: bitstring;
    {13}out(ch, (Cli,Sess,K));
    {14}let tmp: bitstring = (if ((Sess <> A) && (Sess <> B)) then K else CreateSessionRequest) in
    {15}out(c, tmp);
    {16}new Nc: bitstring;
    {17}let m1: bitstring = (CreateSessionRequest,pkCli,Nc) in
    {18}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {19}in(c, (em2: bitstring,sigM2: bitstring));
    {20}let m2: bitstring = sdec(em2,K) in
    {21}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {22}let (=CreateSessionResponse,=pkSess,Ns: bitstring) = m2 in
        {23}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {24}let m3: bitstring = (ActivateSessionRequest,Sess,pkCli,Login(skCli),Passwd(skCli)) in
        {25}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {26}in(c, (em4: bitstring,sigM4: bitstring));
        {27}let m4: bitstring = sdec(em4,K) in
        {28}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {29}let (=ActivateSessionResponse,Ns2: bitstring) = m4 in
            0
) | (
    {30}in(ch, (Cli_59: host,Sess_60: host,K_61: bitstring));
    {31}let skCli_62: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {32}let pkCli_63: bitstring = pub(skCli_62) in
    {33}let skSess_64: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {34}let pkSess_65: bitstring = pub(skSess_64) in
    {35}in(c, (m1_66: bitstring,sigM1: bitstring));
    {36}if (verify(h(m1_66),sigM1,pkCli_63) <> true) then
        0
    else
        {37}let (=CreateSessionRequest,=pkCli_63,Nc_67: bitstring) = m1_66 in
        {38}new Ns_68: bitstring;
        {39}let m2_69: bitstring = (CreateSessionResponse,pkSess_65,Ns_68) in
        {40}out(c, (m2_69,sign(h(m2_69),skSess_64)));
        {41}in(c, (m3_70: bitstring,sigM3: bitstring));
        {42}if (verify(h(m3_70),sigM3,pkCli_63) <> true) then
            0
        else
            {43}let (=ActivateSessionRequest,=Sess_60,=pkCli_63,=Login(skCli_62),=Passwd(skCli_62)) = m3_70 in
            {44}event endSrv(Cli_59,Sess_60,(Login(skCli_62),Passwd(skCli_62)));
            {45}new Ns2_71: bitstring;
            {46}let m4_72: bitstring = (ActivateSessionResponse,Ns2_71) in
            {47}out(c, (m4_72,sign(h(m4_72),skSess_64)))
)

-- Query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
Completing...
200 rules inserted. The rule base contains 130 rules. 89 rules in the queue.
400 rules inserted. The rule base contains 195 rules. 118 rules in the queue.
600 rules inserted. The rule base contains 250 rules. 9 rules in the queue.
Starting query event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N))
RESULT event(endSrv(X,Y,N)) ==> event(beginCli(X,Y,N)) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 136 rules. 107 rules in the queue.
400 rules inserted. The rule base contains 193 rules. 80 rules in the queue.
600 rules inserted. The rule base contains 233 rules. 16 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
K_16755 = K[Sess = Sess_16743,Cli = A[],!1 = @sid_16745]

1. The attacker has some term Sess_16743.
attacker(Sess_16743).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_16743.
Using the function 2-tuple the attacker may obtain (A[],Sess_16743).
attacker((A[],Sess_16743)).

4. The message (A[],Sess_16743) that the attacker may have by 3 may be received at input {7}.
We have Sess_16743 <> B[] & Sess_16743 <> A[].
So the message K_16755 may be sent to the attacker at output {15}.
attacker(K_16755).

5. By 1, the attacker may know Sess_16743.
Using the function sk the attacker may obtain sk(Sess_16743).
attacker(sk(Sess_16743)).

6. The attacker has some term Ns_16744.
attacker(Ns_16744).

7. By 5, the attacker may know sk(Sess_16743).
Using the function pub the attacker may obtain pub(sk(Sess_16743)).
attacker(pub(sk(Sess_16743))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_16743)).
By 6, the attacker may know Ns_16744.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744).
attacker((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)).
attacker(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)).
By 5, the attacker may know sk(Sess_16743).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744).
By 4, the attacker may know K_16755.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755).
attacker(senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755),sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755),sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743)))).

14. The message (A[],Sess_16743) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744),K_16755),sign(h((CreateSessionResponse,pub(sk(Sess_16743)),Ns_16744)),sk(Sess_16743))) that the attacker may have by 13 may be received at input {19}.
We have Sess_16743 <> B[] & Sess_16743 <> A[].
So the message (senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755),sign(h((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755),sign(h((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755),sign(h((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755).
attacker(senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])),K_16755).
By 4, the attacker may know K_16755.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_16743,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 5-proj-5-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_16853 at {6} in copy a_16756

in(c, (A,a)) at {7} in copy a_16756

new K creating K_16758 at {12} in copy a_16756

out(ch_16853, (A,a,K_16758)) at {13} in copy a_16756 received at {30} in copy a_16756

out(c, K_16758) at {15} in copy a_16756

new Nc creating Nc_17029 at {16} in copy a_16756

out(c, (senc((CreateSessionRequest,pub(skA),Nc_17029),K_16758),sign(h((CreateSessionRequest,pub(skA),Nc_17029)),skA))) at {18} in copy a_16756

in(c, (senc((CreateSessionResponse,pub(sk(a)),a_16757),K_16758),sign(h((CreateSessionResponse,pub(sk(a)),a_16757)),sk(a)))) at {19} in copy a_16756

event(beginCli(A,a,(Login(skA),Passwd(skA)))) at {23} in copy a_16756

out(c, (senc((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA)),K_16758),sign(h((ActivateSessionRequest,a,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_16756

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 136 rules. 107 rules in the queue.
400 rules inserted. The rule base contains 193 rules. 80 rules in the queue.
600 rules inserted. The rule base contains 233 rules. 16 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
K_24725 = K[Sess = Sess_24713,Cli = A[],!1 = @sid_24715]

1. The attacker has some term Sess_24713.
attacker(Sess_24713).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_24713.
Using the function 2-tuple the attacker may obtain (A[],Sess_24713).
attacker((A[],Sess_24713)).

4. The message (A[],Sess_24713) that the attacker may have by 3 may be received at input {7}.
We have Sess_24713 <> B[] & Sess_24713 <> A[].
So the message K_24725 may be sent to the attacker at output {15}.
attacker(K_24725).

5. By 1, the attacker may know Sess_24713.
Using the function sk the attacker may obtain sk(Sess_24713).
attacker(sk(Sess_24713)).

6. The attacker has some term Ns_24714.
attacker(Ns_24714).

7. By 5, the attacker may know sk(Sess_24713).
Using the function pub the attacker may obtain pub(sk(Sess_24713)).
attacker(pub(sk(Sess_24713))).

8. Using the function CreateSessionResponse the attacker may obtain CreateSessionResponse.
attacker(CreateSessionResponse).

9. By 8, the attacker may know CreateSessionResponse.
By 7, the attacker may know pub(sk(Sess_24713)).
By 6, the attacker may know Ns_24714.
Using the function 3-tuple the attacker may obtain (CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714).
attacker((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)).

10. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714).
Using the function h the attacker may obtain h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)).
attacker(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714))).

11. By 10, the attacker may know h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)).
By 5, the attacker may know sk(Sess_24713).
Using the function sign the attacker may obtain sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713)).
attacker(sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713))).

12. By 9, the attacker may know (CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714).
By 4, the attacker may know K_24725.
Using the function senc the attacker may obtain senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725).
attacker(senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725)).

13. By 12, the attacker may know senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725).
By 11, the attacker may know sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713)).
Using the function 2-tuple the attacker may obtain (senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725),sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713))).
attacker((senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725),sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713)))).

14. The message (A[],Sess_24713) that the attacker may have by 3 may be received at input {7}.
The message (senc((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714),K_24725),sign(h((CreateSessionResponse,pub(sk(Sess_24713)),Ns_24714)),sk(Sess_24713))) that the attacker may have by 13 may be received at input {19}.
We have Sess_24713 <> B[] & Sess_24713 <> A[].
So the message (senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725),sign(h((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {25}.
attacker((senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725),sign(h((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[]))).

15. By 14, the attacker may know (senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725),sign(h((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725).
attacker(senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725)).

16. By 15, the attacker may know senc((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])),K_24725).
By 4, the attacker may know K_24725.
Using the function sdec the attacker may obtain (ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])).
attacker((ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[]))).

17. By 16, the attacker may know (ActivateSessionRequest,Sess_24713,pub(skA[]),Login(skA[]),Passwd(skA[])).
Using the function 4-proj-5-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

new ch creating ch_24825 at {6} in copy a_24727

in(c, (A,a_24726)) at {7} in copy a_24727

new K creating K_24729 at {12} in copy a_24727

out(ch_24825, (A,a_24726,K_24729)) at {13} in copy a_24727 received at {30} in copy a_24727

out(c, K_24729) at {15} in copy a_24727

new Nc creating Nc_25001 at {16} in copy a_24727

out(c, (senc((CreateSessionRequest,pub(skA),Nc_25001),K_24729),sign(h((CreateSessionRequest,pub(skA),Nc_25001)),skA))) at {18} in copy a_24727

in(c, (senc((CreateSessionResponse,pub(sk(a_24726)),a_24728),K_24729),sign(h((CreateSessionResponse,pub(sk(a_24726)),a_24728)),sk(a_24726)))) at {19} in copy a_24727

event(beginCli(A,a_24726,(Login(skA),Passwd(skA)))) at {23} in copy a_24727

out(c, (senc((ActivateSessionRequest,a_24726,pub(skA),Login(skA),Passwd(skA)),K_24729),sign(h((ActivateSessionRequest,a_24726,pub(skA),Login(skA),Passwd(skA))),skA))) at {25} in copy a_24727

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
