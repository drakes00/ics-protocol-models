Process:
{1}let pkA: bitstring = pub(skA) in
{2}out(c, pkA);
{3}let pkB: bitstring = pub(skB) in
{4}out(c, pkB);
(
    {5}!
    {6}in(c, (Cli: host,Sess: host));
    {7}let skCli: bitstring = (if (Cli = A) then skA else (if (Cli = B) then skB else fail-any)) in
    {8}let pkCli: bitstring = pub(skCli) in
    {9}let skSess: bitstring = (if (Sess = A) then skA else (if (Sess = B) then skB else sk(Sess))) in
    {10}let pkSess: bitstring = pub(skSess) in
    {11}let K: bitstring = Skey(skCli,skSess) in
    {12}let m1: bitstring = CreateSessionRequest in
    {13}out(c, (senc(m1,K),sign(h(m1),skCli)));
    {14}in(c, (em2: bitstring,sigM2: bitstring));
    {15}let m2: bitstring = sdec(em2,K) in
    {16}if (verify(h(m2),sigM2,pkSess) <> true) then
        0
    else
        {17}let (SSC: bitstring,Ns2: bitstring) = m2 in
        {18}new CSC: bitstring;
        {19}event beginCli(Cli,Sess,(Login(skCli),Passwd(skCli)));
        {20}let m3: bitstring = (CSC,Sess,Login(skCli),Passwd(skCli)) in
        {21}out(c, (senc(m3,K),sign(h(m3),skCli)));
        {22}in(c, (em4: bitstring,sigM4: bitstring));
        {23}let m4: bitstring = sdec(em4,K) in
        {24}if (verify(h(m4),sigM4,pkSess) <> true) then
            0
        else
            {25}if (m4 <> ActivateSessionResponse) then
            0
) | (
    {26}!
    {27}in(c, (Cli_59: host,Sess_60: host));
    {28}let skCli_61: bitstring = (if (Cli_59 = A) then skA else (if (Cli_59 = B) then skB else sk(Cli_59))) in
    {29}let pkCli_62: bitstring = pub(skCli_61) in
    {30}let skSess_63: bitstring = (if (Sess_60 = A) then skA else (if (Sess_60 = B) then skB else fail-any)) in
    {31}let pkSess_64: bitstring = pub(skSess_63) in
    {32}let K_65: bitstring = Skey(skCli_61,skSess_63) in
    {33}in(c, (m1_66: bitstring,sigM1: bitstring));
    {34}if (verify(h(m1_66),sigM1,pkCli_62) <> true) then
        0
    else
        {35}if (m1_66 <> CreateSessionRequest) then
            0
        else
            {36}new SSC_67: bitstring;
            {37}new Ns2_68: bitstring;
            {38}let m2_69: bitstring = (SSC_67,Ns2_68) in
            {39}out(c, (m2_69,sign(h(m2_69),skSess_63)));
            {40}in(c, (m3_70: bitstring,sigM3: bitstring));
            {41}if (verify(h(m3_70),sigM3,pkCli_62) <> true) then
                0
            else
                {42}let (CSC_71: bitstring,=Sess_60,=Login(skCli_61),=Passwd(skCli_61)) = m3_70 in
                {43}event endSrv(Cli_59,Sess_60,(Login(skCli_61),Passwd(skCli_61)));
                {44}let m4_72: bitstring = ActivateSessionResponse in
                {45}out(c, (m4_72,sign(h(m4_72),skSess_63)))
) | (
    {46}!
    {47}in(c, (X: host,Y: host));
    {48}let skX: bitstring = (if (X = A) then skA else (if (X = B) then skB else sk(X))) in
    {49}let skY: bitstring = (if (Y = A) then skA else (if (Y = B) then skB else sk(Y))) in
    {50}if ((X,Y) = (A,B)) then
        0
    else
        {51}if ((X,Y) = (B,A)) then
            0
        else
            {52}out(c, Skey(skX,skY))
)

-- Query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
Completing...
200 rules inserted. The rule base contains 100 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 171 rules. 15 rules in the queue.
Starting query event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N))
goal reachable: begin(beginCli(B[],B[],(Login(skB[]),Passwd(skB[])))) -> end(endSrv(B[],B[],(Login(skB[]),Passwd(skB[]))))
goal reachable: begin(beginCli(A[],A[],(Login(skA[]),Passwd(skA[])))) -> end(endSrv(A[],A[],(Login(skA[]),Passwd(skA[]))))
RESULT event(endSrv(X_73,Y_74,N)) ==> event(beginCli(X_73,Y_74,N)) is true.
-- Query not attacker(Skey(skB[],skA[]))
Completing...
200 rules inserted. The rule base contains 95 rules. 25 rules in the queue.
Starting query not attacker(Skey(skB[],skA[]))
RESULT not attacker(Skey(skB[],skA[])) is true.
-- Query not attacker(Skey(skA[],skB[]))
Completing...
200 rules inserted. The rule base contains 95 rules. 25 rules in the queue.
Starting query not attacker(Skey(skA[],skB[]))
RESULT not attacker(Skey(skA[],skB[])) is true.
-- Query not attacker(Passwd(skA[]))
Completing...
200 rules inserted. The rule base contains 95 rules. 25 rules in the queue.
Starting query not attacker(Passwd(skA[]))
goal reachable: attacker(Passwd(skA[]))
Abbreviations:
CSC_27644 = CSC[sigM2 = sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634)),em2 = senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))),Sess = Sess_27634,Cli = A[],!1 = @sid_27635]

1. The attacker has some term Sess_27634.
attacker(Sess_27634).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_27634.
Using the function 2-tuple the attacker may obtain (A[],Sess_27634).
attacker((A[],Sess_27634)).

4. The message (A[],Sess_27634) that the attacker may have by 3 may be received at input {47}.
We have Sess_27634 <> B[] & Sess_27634 <> A[].
So the message Skey(skA[],sk(Sess_27634)) may be sent to the attacker at output {52}.
attacker(Skey(skA[],sk(Sess_27634))).

5. By 1, the attacker may know Sess_27634.
Using the function sk the attacker may obtain sk(Sess_27634).
attacker(sk(Sess_27634)).

6. The attacker has some term Ns2_27633.
attacker(Ns2_27633).

7. The attacker has some term SSC_27632.
attacker(SSC_27632).

8. By 7, the attacker may know SSC_27632.
By 6, the attacker may know Ns2_27633.
Using the function 2-tuple the attacker may obtain (SSC_27632,Ns2_27633).
attacker((SSC_27632,Ns2_27633)).

9. By 8, the attacker may know (SSC_27632,Ns2_27633).
Using the function h the attacker may obtain h((SSC_27632,Ns2_27633)).
attacker(h((SSC_27632,Ns2_27633))).

10. By 9, the attacker may know h((SSC_27632,Ns2_27633)).
By 5, the attacker may know sk(Sess_27634).
Using the function sign the attacker may obtain sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634)).
attacker(sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634))).

11. By 8, the attacker may know (SSC_27632,Ns2_27633).
By 4, the attacker may know Skey(skA[],sk(Sess_27634)).
Using the function senc the attacker may obtain senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))).
attacker(senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634)))).

12. By 11, the attacker may know senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))).
By 10, the attacker may know sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634)).
Using the function 2-tuple the attacker may obtain (senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))),sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634))).
attacker((senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))),sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634)))).

13. The message (A[],Sess_27634) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_27632,Ns2_27633),Skey(skA[],sk(Sess_27634))),sign(h((SSC_27632,Ns2_27633)),sk(Sess_27634))) that the attacker may have by 12 may be received at input {14}.
We have Sess_27634 <> B[] & Sess_27634 <> A[].
So the message (senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634))),sign(h((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634))),sign(h((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634))),sign(h((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634))).
attacker(senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634)))).

15. By 14, the attacker may know senc((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_27634))).
By 4, the attacker may know Skey(skA[],sk(Sess_27634)).
Using the function sdec the attacker may obtain (CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])).
attacker((CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_27644,Sess_27634,Login(skA[]),Passwd(skA[])).
Using the function 4-proj-4-tuple the attacker may obtain Passwd(skA[]).
attacker(Passwd(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_27646)) at {6} in copy a_27647

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_27646))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_27647

in(c, (A,a_27646)) at {47} in copy a_27648

out(c, Skey(skA,sk(a_27646))) at {52} in copy a_27648

in(c, (senc((a,a_27645),Skey(skA,sk(a_27646))),sign(h((a,a_27645)),sk(a_27646)))) at {14} in copy a_27647

new CSC creating CSC_27649 at {18} in copy a_27647

event(beginCli(A,a_27646,(Login(skA),Passwd(skA)))) at {19} in copy a_27647

out(c, (senc((CSC_27649,a_27646,Login(skA),Passwd(skA)),Skey(skA,sk(a_27646))),sign(h((CSC_27649,a_27646,Login(skA),Passwd(skA))),skA))) at {21} in copy a_27647

The attacker has the message Passwd(skA).
A trace has been found.
RESULT not attacker(Passwd(skA[])) is false.
-- Query not attacker(Login(skA[]))
Completing...
200 rules inserted. The rule base contains 95 rules. 25 rules in the queue.
Starting query not attacker(Login(skA[]))
goal reachable: attacker(Login(skA[]))
Abbreviations:
CSC_34604 = CSC[sigM2 = sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594)),em2 = senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))),Sess = Sess_34594,Cli = A[],!1 = @sid_34595]

1. The attacker has some term Sess_34594.
attacker(Sess_34594).

2. The attacker initially knows A[].
attacker(A[]).

3. By 2, the attacker may know A[].
By 1, the attacker may know Sess_34594.
Using the function 2-tuple the attacker may obtain (A[],Sess_34594).
attacker((A[],Sess_34594)).

4. The message (A[],Sess_34594) that the attacker may have by 3 may be received at input {47}.
We have Sess_34594 <> B[] & Sess_34594 <> A[].
So the message Skey(skA[],sk(Sess_34594)) may be sent to the attacker at output {52}.
attacker(Skey(skA[],sk(Sess_34594))).

5. By 1, the attacker may know Sess_34594.
Using the function sk the attacker may obtain sk(Sess_34594).
attacker(sk(Sess_34594)).

6. The attacker has some term Ns2_34593.
attacker(Ns2_34593).

7. The attacker has some term SSC_34592.
attacker(SSC_34592).

8. By 7, the attacker may know SSC_34592.
By 6, the attacker may know Ns2_34593.
Using the function 2-tuple the attacker may obtain (SSC_34592,Ns2_34593).
attacker((SSC_34592,Ns2_34593)).

9. By 8, the attacker may know (SSC_34592,Ns2_34593).
Using the function h the attacker may obtain h((SSC_34592,Ns2_34593)).
attacker(h((SSC_34592,Ns2_34593))).

10. By 9, the attacker may know h((SSC_34592,Ns2_34593)).
By 5, the attacker may know sk(Sess_34594).
Using the function sign the attacker may obtain sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594)).
attacker(sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594))).

11. By 8, the attacker may know (SSC_34592,Ns2_34593).
By 4, the attacker may know Skey(skA[],sk(Sess_34594)).
Using the function senc the attacker may obtain senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))).
attacker(senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594)))).

12. By 11, the attacker may know senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))).
By 10, the attacker may know sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594)).
Using the function 2-tuple the attacker may obtain (senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))),sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594))).
attacker((senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))),sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594)))).

13. The message (A[],Sess_34594) that the attacker may have by 3 may be received at input {6}.
The message (senc((SSC_34592,Ns2_34593),Skey(skA[],sk(Sess_34594))),sign(h((SSC_34592,Ns2_34593)),sk(Sess_34594))) that the attacker may have by 12 may be received at input {14}.
We have Sess_34594 <> B[] & Sess_34594 <> A[].
So the message (senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594))),sign(h((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[]))),skA[])) may be sent to the attacker at output {21}.
attacker((senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594))),sign(h((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[]))),skA[]))).

14. By 13, the attacker may know (senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594))),sign(h((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[]))),skA[])).
Using the function 1-proj-2-tuple the attacker may obtain senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594))).
attacker(senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594)))).

15. By 14, the attacker may know senc((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])),Skey(skA[],sk(Sess_34594))).
By 4, the attacker may know Skey(skA[],sk(Sess_34594)).
Using the function sdec the attacker may obtain (CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])).
attacker((CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[]))).

16. By 15, the attacker may know (CSC_34604,Sess_34594,Login(skA[]),Passwd(skA[])).
Using the function 3-proj-4-tuple the attacker may obtain Login(skA[]).
attacker(Login(skA[])).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {2}

out(c, pub(skB)) at {4}

in(c, (A,a_34607)) at {6} in copy a_34608

out(c, (senc(CreateSessionRequest,Skey(skA,sk(a_34607))),sign(h(CreateSessionRequest),skA))) at {13} in copy a_34608

in(c, (A,a_34607)) at {47} in copy a_34609

out(c, Skey(skA,sk(a_34607))) at {52} in copy a_34609

in(c, (senc((a_34605,a_34606),Skey(skA,sk(a_34607))),sign(h((a_34605,a_34606)),sk(a_34607)))) at {14} in copy a_34608

new CSC creating CSC_34610 at {18} in copy a_34608

event(beginCli(A,a_34607,(Login(skA),Passwd(skA)))) at {19} in copy a_34608

out(c, (senc((CSC_34610,a_34607,Login(skA),Passwd(skA)),Skey(skA,sk(a_34607))),sign(h((CSC_34610,a_34607,Login(skA),Passwd(skA))),skA))) at {21} in copy a_34608

The attacker has the message Login(skA).
A trace has been found.
RESULT not attacker(Login(skA[])) is false.
