File "sign.pv", line 40, character 9 - line 40, character 11:
Warning: identifier sk rebound
File "sign.pv", line 44, character 9 - line 44, character 10:
Warning: identifier m rebound
Process:
{1}out(c, pub(skA));
{2}out(c, pub(skB));
(
    {3}in(cAO, (X: host,Y: host,m1: bitstring));
    {4}in(cBO, (=X,=Y,m2: bitstring));
    {5}if (m1 = m2) then
        0
    else
        {6}event different(X,Y,m2)
) | (
    {7}in(c, (X_45: host,Y_46: host));
    {8}if ((X_45 <> A) && (X_45 <> B)) then
        0
    else
        {9}let sk_47: bitstring = (if (X_45 = A) then skA else (if (X_45 = B) then skB else sk(X_45))) in
        {10}new m: bitstring;
        {11}new m_48: bitstring;
        {12}event sent(X_45,Y_46,m_48);
        {13}event begin(X_45,Y_46,m_48);
        {14}out(cAO, (X_45,Y_46,m_48));
        {15}out(c, (m_48,sign(sk_47,m_48)))
) | (
    {16}in(c, (X_49: host,Y_50: host));
    {17}if ((Y_50 <> A) && (Y_50 <> B)) then
        0
    else
        {18}let pk: bitstring = (if (X_49 = A) then pub(skA) else (if (X_49 = B) then pub(skB) else pub(sk(X_49)))) in
        {19}in(c, (x_51: bitstring,sX: bitstring));
        {20}if (verify(pk,sX,x_51) <> true) then
            0
        else
            {21}event received(X_49,Y_50,x_51);
            {22}out(cBO, (X_49,Y_50,x_51));
            {23}if ((X_49 = A) || (X_49 = B)) then
            {24}event end(X_49,Y_50,x_51)
)

-- Query event(different(X_52,Y_53,N)) ==> (event(sent(X_52,Y_53,N)) && event(received(X_52,Y_53,N)))
Completing...
Starting query event(different(X_52,Y_53,N)) ==> (event(sent(X_52,Y_53,N)) && event(received(X_52,Y_53,N)))
goal reachable: Y_1978 <> A[] && begin(received(B[],A[],m_48[Y_46 = Y_1978,X_45 = B[]])) && begin(sent(B[],Y_1978,m_48[Y_46 = Y_1978,X_45 = B[]])) && attacker(Y_1978) && begin(sent(B[],A[],m_48[Y_46 = A[],X_45 = B[]])) -> end(different(B[],A[],m_48[Y_46 = Y_1978,X_45 = B[]]))
Abbreviations:
m_2010 = m_48[Y_46 = Y_1995,X_45 = B[]]
m_2011 = m_48[Y_46 = A[],X_45 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. The message (B[],A[]) that the attacker may have by 3 may be received at input {7}.
The event sent(B[],A[],m_2011) may be executed at {12}.
So the message (B[],A[],m_2011) may be sent on channel cAO[] at output {14}.
mess(cAO[],(B[],A[],m_2011)).

5. We assume as hypothesis that
attacker(Y_1995).

6. By 2, the attacker may know B[].
By 5, the attacker may know Y_1995.
Using the function 2-tuple the attacker may obtain (B[],Y_1995).
attacker((B[],Y_1995)).

7. The message (B[],Y_1995) that the attacker may have by 6 may be received at input {7}.
The event sent(B[],Y_1995,m_2010) may be executed at {12}.
So the message (m_2010,sign(skB[],m_2010)) may be sent to the attacker at output {15}.
attacker((m_2010,sign(skB[],m_2010))).

8. By 7, the attacker may know (m_2010,sign(skB[],m_2010)).
Using the function 2-proj-2-tuple the attacker may obtain sign(skB[],m_2010).
attacker(sign(skB[],m_2010)).

9. By 7, the attacker may know (m_2010,sign(skB[],m_2010)).
Using the function 1-proj-2-tuple the attacker may obtain m_2010.
attacker(m_2010).

10. By 9, the attacker may know m_2010.
By 8, the attacker may know sign(skB[],m_2010).
Using the function 2-tuple the attacker may obtain (m_2010,sign(skB[],m_2010)).
attacker((m_2010,sign(skB[],m_2010))).

11. The message (B[],A[]) that the attacker may have by 3 may be received at input {16}.
The message (m_2010,sign(skB[],m_2010)) that the attacker may have by 10 may be received at input {19}.
The event received(B[],A[],m_2010) may be executed at {21}.
So the message (B[],A[],m_2010) may be sent on channel cBO[] at output {22}.
mess(cBO[],(B[],A[],m_2010)).

12. The message (B[],A[],m_2011) that may be sent on channel cAO[] by 4 may be received at input {3}.
The message (B[],A[],m_2010) that may be sent on channel cBO[] by 11 may be received at input {4}.
We have m_2011 <> m_2010.
So event different(B[],A[],m_2010) may be executed at {6}.
end(different(B[],A[],m_2010)).


Unified Y_1995 with A[]
Iterating unifyDerivation.
Fixpoint reached: nothing more to unify.
Unification made an inequality become false.
Trying with the initial derivation tree instead.
Could not find a trace corresponding to this derivation.
RESULT event(different(X_52,Y_53,N)) ==> (event(sent(X_52,Y_53,N)) && event(received(X_52,Y_53,N))) cannot be proved.
-- Query event(end(X_2243,Y_2244,Z)) ==> event(begin(X_2243,Y_2244,Z))
Completing...
Starting query event(end(X_2243,Y_2244,Z)) ==> event(begin(X_2243,Y_2244,Z))
goal reachable: begin(begin(B[],Y_4104,m_48[Y_46 = Y_4104,X_45 = B[]])) && attacker(Y_4104) -> end(end(B[],A[],m_48[Y_46 = Y_4104,X_45 = B[]]))
Abbreviations:
m_4129 = m_48[Y_46 = Y_4118,X_45 = B[]]

1. The attacker initially knows A[].
attacker(A[]).

2. The attacker initially knows B[].
attacker(B[]).

3. By 2, the attacker may know B[].
By 1, the attacker may know A[].
Using the function 2-tuple the attacker may obtain (B[],A[]).
attacker((B[],A[])).

4. We assume as hypothesis that
attacker(Y_4118).

5. By 2, the attacker may know B[].
By 4, the attacker may know Y_4118.
Using the function 2-tuple the attacker may obtain (B[],Y_4118).
attacker((B[],Y_4118)).

6. The message (B[],Y_4118) that the attacker may have by 5 may be received at input {7}.
The event begin(B[],Y_4118,m_4129) may be executed at {13}.
So the message (m_4129,sign(skB[],m_4129)) may be sent to the attacker at output {15}.
attacker((m_4129,sign(skB[],m_4129))).

7. By 6, the attacker may know (m_4129,sign(skB[],m_4129)).
Using the function 2-proj-2-tuple the attacker may obtain sign(skB[],m_4129).
attacker(sign(skB[],m_4129)).

8. By 6, the attacker may know (m_4129,sign(skB[],m_4129)).
Using the function 1-proj-2-tuple the attacker may obtain m_4129.
attacker(m_4129).

9. By 8, the attacker may know m_4129.
By 7, the attacker may know sign(skB[],m_4129).
Using the function 2-tuple the attacker may obtain (m_4129,sign(skB[],m_4129)).
attacker((m_4129,sign(skB[],m_4129))).

10. The message (B[],A[]) that the attacker may have by 3 may be received at input {16}.
The message (m_4129,sign(skB[],m_4129)) that the attacker may have by 9 may be received at input {19}.
So event end(B[],A[],m_4129) may be executed at {24}.
end(end(B[],A[],m_4129)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, pub(skA)) at {1}

out(c, pub(skB)) at {2}

in(c, (B,a_4130)) at {7}

new m creating m_4153 at {10}

new m_48 creating m_4131 at {11}

event(sent(B,a_4130,m_4131)) at {12}

event(begin(B,a_4130,m_4131)) at {13}

out(cAO, (B,a_4130,m_4131)) at {14} received at {3}

out(c, (m_4131,sign(skB,m_4131))) at {15}

in(c, (B,A)) at {16}

in(c, (m_4131,sign(skB,m_4131))) at {19}

event(received(B,A,m_4131)) at {21}

out(cBO, (B,A,m_4131)) at {22} received at {4} (input fails)

event(end(B,A,m_4131)) at {24}

The event end(B,A,m_4131) is executed.
A trace has been found.
RESULT event(end(X_2243,Y_2244,Z)) ==> event(begin(X_2243,Y_2244,Z)) is false.
